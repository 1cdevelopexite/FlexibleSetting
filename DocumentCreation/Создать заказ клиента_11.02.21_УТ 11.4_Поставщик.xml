<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать заказ клиента</Value>
		<Value xsi:type="xs:string">ЭКОМ Документы</Value>
		<Value xsi:type="xs:string">Заказ клиента</Value>
		<Value xsi:type="xs:string">// Получение общих для всех документов значений.
ПроводитьЗаказ                                   = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументЗаказ1СПроведенным");
ЗагружатьТекущейДатой                            = Настройка_Параметр_Прочитать("ЭКОМ_ЗаказыЗагружатьТекущейДатой");
КэшированныеЗначения                             = Неопределено;
КолонкиДокумента                                 = Новый Соответствие;
Для Каждого Колонка Из  Документы.ЗаказКлиента.ПустаяСсылка().Товары.ВыгрузитьКолонки().Колонки Цикл
    КолонкиДокумента.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение());
КонецЦикла;
// Получение функциональных опций.
ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
ИспользоватьАвтоматическиеСкидкиВПродажах       = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
ИспользоватьСоглашенияСКлиентами                = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
ИспользоватьУправлениеДоставкой					= ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");

УстановитьПривилегированныйРежим(Истина);
// Основной запрос для заполнения шапки документа.
Запрос = Новый Запрос;
Запрос.Текст = 
    "ВЫБРАТЬ
    |	ЭКОМ_Документы.Ссылка КАК Ссылка,
    |	ЭКОМ_Документы.Ссылка.Представление КАК ИсточникПредставление,
	|	ЭКОМ_Документы.Документ1С КАК Заказ,
    |	Приоритеты.Ссылка КАК Приоритет,
    |	ЭКОМ_Документы.Дата КАК Дата,
    |	ЭКОМ_Документы.ТочкаДоставки КАК Партнер,
    |	ЭКОМ_Документы.ТочкаДоставки.Представление КАК ПартнерПредставление,
    |	ЭКОМ_Документы.Контрагент КАК Контрагент,
    |	ЭКОМ_Документы.Организация КАК Организация,
    |	ЭКОМ_Документы.ЗаказНомер КАК НомерПоДаннымКлиента,
    |	ЭКОМ_Документы.ЗаказДата КАК ДатаПоДаннымКлиента,
    |	ИСТИНА КАК НеОтгружатьЧастями,
    |	ЭКОМ_Документы.ДатаПоставки КАК ЖелаемаяДатаОтгрузки,
    |	ЭКОМ_Документы.ДатаПоставки КАК ДатаОтгрузки,
    |	ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз) КАК СпособДоставки,
    |	ИСТИНА КАК СкидкиРассчитаны,
    |	ЭКОМ_Документы.ФайлНомер КАК ФайлНомер,
    |	ЭКОМ_Документы.ФайлДата КАК ФайлДата
    |ИЗ
    |	Справочник.Приоритеты КАК Приоритеты,
    |	Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
    |ГДЕ
    |	Приоритеты.Наименование = ""Средний""
    |	И ЭКОМ_Документы.Ссылка В(&amp;Источник)";
Запрос.УстановитьПараметр("Источник", Источник);
РезультатЗапроса = Запрос.Выполнить().Выгрузить();

// Получение данных табличной части Товары.
Запрос = Новый Запрос;
Запрос.Текст = 
    "ВЫБРАТЬ
    |    ЭКОМ_ДокументыТЧ_Товары.Ссылка КАК Ссылка,
    |    ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
    |    ЭКОМ_ДокументыТЧ_Товары.КоличествоЗаказанное КАК КоличествоУпаковок,
    |    ЭКОМ_ДокументыТЧ_Товары.Цена КАК Цена,
    |    ЭКОМ_ДокументыТЧ_Товары.ЦенаСНДС КАК ЦенаСНДС,
    |    ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
    |    ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
    |    ЛОЖЬ КАК Отменено
    |ИЗ
    |    Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
    |ГДЕ
    |    ЭКОМ_ДокументыТЧ_Товары.Ссылка В(&amp;Источник)";
Запрос.УстановитьПараметр("Источник", Источник);
РезультатЗапросаТЧТовары = Запрос.Выполнить().Выгрузить();

Если ИспользоватьУправлениеДоставкой Тогда
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтактнаяИнформация.Вид.Представление КАК Вид,
		|	КонтактнаяИнформация.Представление КАК АдресДоставки,
		|	КонтактнаяИнформация.ЗначенияПолей КАК АдресДоставкиЗначенияПолей
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка В(&amp;Партнер)
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");
		
	Запрос.УстановитьПараметр("Партнер", РезультатЗапроса.ВыгрузитьКолонку("Партнер"));
	АдресаПолучателяИзКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
КонецЕсли;

УстановитьПривилегированныйРежим(Ложь);

Для Каждого Запись Из РезультатЗапроса Цикл
	// Берем ранее созданный документ, если он заполнен в Документ1С Эком документа.
	Приемник = ?(ЗначениеЗаполнено(Запись.Заказ), Запись.Заказ.ПолучитьОбъект(), Приемник);
	// Очистка реквизитов документа перед заполнением.
	ЗаполнитьЗначенияСвойств(Приемник, Документы.ЗаказКлиента.СоздатьДокумент());
    // Автозаполнение документа.
    ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(Приемник, Неопределено);
    // Заполнение реквизитов из запроса.
    ЗаполнитьЗначенияСвойств(Приемник, Запись);
    // Заполнение соглашения и этапов графика оплаты.
    Если ИспользоватьСоглашенияСКлиентами Тогда
        Приемник.ЗаполнитьУсловияПродажПоУмолчанию();
        Если НЕ ЗначениеЗаполнено(Приемник.Соглашение) Тогда
            ТекстОшибки = НСтр("ru = 'Не найдено соглашение для Партнера &lt;%Партнер%&gt;. Докуент не создан'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Партнер%", Запись.ПартнерПредставление);
            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
            Продолжить;
        КонецЕсли;
	КонецЕсли;
	// Заполнение адреса доставки.
	Если ИспользоватьУправлениеДоставкой Тогда
		АдресПолучателя = АдресаПолучателяИзКонтактнойИнформации.НайтиСтроки(Новый Структура("Ссылка, Вид", Приемник.Партнер, "Адрес доставки"));
		ЗаполнитьЗначенияСвойств(Приемник, ?(АдресПолучателя.Количество() &gt; 0, АдресПолучателя.Получить(0), Новый Структура));
	КонецЕсли;
    // Установка статуса.
    Если ИспользоватьРасширенныеВозможностиЗаказаКлиента Тогда
        Приемник.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
    Иначе
        Приемник.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
    КонецЕсли;
    // Корректировка реквизитов.
    Приемник.Дата = ?(ЗагружатьТекущейДатой = Истина, ТекущаяДата(), Приемник.Дата);
	Приемник.Менеджер = Пользователи.ТекущийПользователь();
    Приемник.Комментарий = ?(ЗначениеЗаполнено(Запись.НомерПоДаннымКлиента), "Заказ № " + Запись.НомерПоДаннымКлиента, "");
    Приемник.Комментарий = Приемник.Комментарий
        + ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(Запись.ДатаПоДаннымКлиента), 
        " от " + Формат(Запись.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"), "");
	// Заполнение ответственных лиц.
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Приемник.Организация, КонецДня(Приемник.Дата));
	Приемник.Руководитель 		= ОтветственныеЛица.РуководительСсылка;
	Приемник.ГлавныйБухгалтер 	= ОтветственныеЛица.ГлавныйБухгалтерСсылка;
    // Заполнение Товаров.
    Приемник.Товары.Очистить();
    СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Приемник);
    ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Приемник, Документы.ЗаказКлиента));
    ВариантыОбеспечения = ПродажиСервер.ВариантыОбеспеченияПоУмолчанию(Приемник.Соглашение, Приемник.Статус);
	
    Для Каждого Строка Из РезультатЗапросаТЧТовары.НайтиСтроки(Новый Структура("Ссылка", Запись.Ссылка)) Цикл

        ДанныеДляЗаполнения = Новый Структура;
        Для Каждого Колонка Из КолонкиДокумента Цикл
            ДанныеДляЗаполнения.Вставить(Колонка.Ключ, Колонка.Значение);
        КонецЦикла;

        // Заполнение данных строки.
        ЗаполнитьЗначенияСвойств(ДанныеДляЗаполнения, Строка, "Номенклатура, КоличествоУпаковок");
        ДанныеДляЗаполнения.Склад = Приемник.Склад;
        // Заполнение реквизитов строки методами конфигурации (пока без цен и сумм).
        СтруктураДействий = Новый Структура;
        СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ДанныеДляЗаполнения.Упаковка);
        СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
        Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Приемник.Соглашение) Тогда
            СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Приемник));
        Иначе
            СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Приемник));
        КонецЕсли;
        СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, ПоДатеОтгрузки", Приемник.НалогообложениеНДС, Приемник.Дата, Истина));
        СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Приемник.ВернутьМногооборотнуюТару);
        СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Приемник, Ложь));
        СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ДанныеДляЗаполнения.Склад, ПараметрыУказанияСерий));
        ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Приемник.ЖелаемаяДатаОтгрузки);
        СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
        СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Приемник.Партнер);
        ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеДляЗаполнения, СтруктураДействий, КэшированныеЗначения);

        // Заполнение цены.
        Цена = 0;
        Если Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
            Цена = Строка.ЦенаСНДС;
        ИначеЕсли НЕ Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
            Цена = Строка.Цена;
        ИначеЕсли Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
            Цена  = Окр((Строка.Цена * (100 + СтавкаНДСЧислом(ДанныеДляЗаполнения.СтавкаНДС))) / 100 , 4);
        ИначеЕсли НЕ Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
            Цена = Окр((Строка.ЦенаСНДС * 100) / (100 + СтавкаНДСЧислом(ДанныеДляЗаполнения.СтавкаНДС)) , 4);
        КонецЕсли;
        ДанныеДляЗаполнения.Цена = Цена;
        // Заполнение сумм методами конфигурации.
        СтруктураДействий = Новый Структура;
        СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
        СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
        СтруктураДействий.Вставить("ПересчитатьСумму");
        СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
        СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
        ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеДляЗаполнения, СтруктураДействий, КэшированныеЗначения);
        // Перенос данных в строку ТЧ Товары.
        ЗаполнитьЗначенияСвойств(Приемник.Товары.Добавить(), ДанныеДляЗаполнения);

    КонецЦикла;
    // Заполнение порядка оплаты.
    Если Не ЗначениеЗаполнено(Приемник.ПорядокОплаты) Тогда
        ВалютаОплаты            = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Приемник.ФормаОплаты, Приемник.БанковскийСчет, Приемник.Касса);
        Приемник.ПорядокОплаты     = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Приемник.Валюта, Приемник.НалогообложениеНДС, ВалютаОплаты);
    КонецЕсли;
    // Заполнение этапов графика оплаты.
    Приемник.ЗаполнитьЭтапыГрафикаОплаты();
    // Проверка и запись документов.
    ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
    Если ОшибокНеОбнаружено Тогда
        НачатьТранзакцию();
        Попытка
            Приемник.Записать(?(ПроводитьЗаказ, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
        Исключение
            ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьЗаказ, "проведения", "записи"));
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", Запись.ФайлНомер);
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(Запись.ФайлДата, "ДФ=dd.MM.yyyy"));
            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
            ОтменитьТранзакцию();
            Продолжить;
        КонецПопытки;
        // Запись ссылки в ЭКОМ документ.
        Попытка
            ИсточникОбъект = Источник.ПолучитьОбъект();
            ИсточникОбъект.Документ1С = Приемник.Ссылка;
            ИсточникОбъект.Записать();
        Исключение
            ТекстОшибки = НСтр("ru = 'Ошибка записи ссылки на созданный документ в %Источник%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Источник%", Запись.ИсточникПредставление);
            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
            ОтменитьТранзакцию();
            Продолжить;
        КонецПопытки;
        ЗафиксироватьТранзакцию();
    КонецЕсли;
КонецЦикла;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">ЭКОМ_Документ_ORDER</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать заказ клиента</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>