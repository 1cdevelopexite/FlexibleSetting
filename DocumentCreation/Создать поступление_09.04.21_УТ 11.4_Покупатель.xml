<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать поступление</Value>
		<Value xsi:type="xs:string">Заказ поставщику</Value>
		<Value xsi:type="xs:string">ПриобретениеТоваровУслуг</Value>
		<Value xsi:type="xs:string">ИмяДокументаПрименика = "Поступление 1С";

Если НЕ (Источник.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден 
	ИЛИ Источник.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт) Тогда
    ТекстЛогаСобытий = "Документ """ + ИмяДокументаПрименика + """ по документу " + Строка(Источник.Ссылка) +
    " не создан, т.к. ввод на основании разрешен только в статусах ""Подтвержден"", ""Закрыт"".";
    ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);
Иначе
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДокументОснование", Источник.Ссылка);
	Приемник.Заполнить(ПараметрыДокумента);
	Приемник.Дата = ТекущаяДата();

	СоздаватьДокумент1СПроведенным = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументПоступления1СПроведенным", Ложь);

	// Запишем документ в базу
	Если Приемник.Товары.Количество() = 0 Тогда
	    ТекстЛогаСобытий = "Документ """ + ИмяДокументаПрименика + """ по документу " + Строка(Источник.Ссылка) +
	    " не создан, т.к. не заполнены товары, возможно документ был сформирован вручную, проверьте документ.";
	    ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);
	Иначе    
	    ДокументЗаписан = Ложь;
	    Попытка
	        Приемник.Записать(?(СоздаватьДокумент1СПроведенным, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));      
	        ДокументЗаписан = Истина;
	    Исключение
	        Приемник.Записать(РежимЗаписиДокумента.Запись);
	        ТекстЛогаСобытий = ИмяДокументаПрименика + " по документу " + Строка(Источник.Ссылка) + " не создано!!! " + СокрЛП(ОписаниеОшибки()); 
	        ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);
	        ДокументЗаписан = Истина;
	    КонецПопытки;

	    Если ДокументЗаписан Тогда
	        // Поиск документа ЭКОМ
	        Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЭКОМ_ЦепочкиДокументовПокупателя.DESADV КАК ЭКОМ_Документ,
			               |	ЭКОМ_ЦепочкиДокументовПокупателя.DESADV.НакладнаяНомер КАК НакладнаяНомер,
			               |	ЭКОМ_ЦепочкиДокументовПокупателя.DESADV.НакладнаяДата КАК НакладнаяДата
			               |ИЗ
			               |	РегистрСведений.ЭКОМ_ЦепочкиДокументовПокупателя КАК ЭКОМ_ЦепочкиДокументовПокупателя
			               |ГДЕ
			               |	ЭКОМ_ЦепочкиДокументовПокупателя.Заказ = &amp;Заказ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ЭКОМ_ДокументыТЧ_Товары.Ссылка КАК Ссылка,
			               |	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
			               |	СУММА(ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое) КАК КоличествоПоставляемое
			               |ИЗ
			               |	РегистрСведений.ЭКОМ_ЦепочкиДокументовПокупателя КАК ЭКОМ_ЦепочкиДокументовПокупателя,
			               |	Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
			               |ГДЕ
			               |	ЭКОМ_ЦепочкиДокументовПокупателя.Заказ = &amp;Заказ
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ЭКОМ_ДокументыТЧ_Товары.Ссылка,
			               |	ЭКОМ_ДокументыТЧ_Товары.Номенклатура";
			
	        Запрос.УстановитьПараметр("Заказ", Источник.Ссылка);
	        РезультатЗапроса = Запрос.ВыполнитьПакет();
			Выборка = РезультатЗапроса[0].Выбрать();
			DESADV_Товары = РезультатЗапроса[1].Выгрузить();
	        РезультатЗапроса = Запрос.Выполнить();
	        Если НЕ РезультатЗапроса.Пустой() Тогда
	            Выборка.Следующий();
	            ЭКОМ_ДокументОбъект = Выборка.ЭКОМ_Документ.ПолучитьОбъект();
	            ЭКОМ_ДокументОбъект.ДокументыСвязанные.Очистить();
	            Нов = ЭКОМ_ДокументОбъект.ДокументыСвязанные.Добавить();
	            Нов.ДокументСвязанный = Приемник.Ссылка;
	            ЭКОМ_ДокументОбъект.Записать();

	            Приемник.НомерВходящегоДокумента = Выборка.НакладнаяНомер; 
	            Приемник.ДатаВходящегоДокумента  = Выборка.НакладнаяДата;
	            Приемник.Товары.Очистить();
	            // Обновляем табличную часть
	            Для каждого СтрЭКОМ Из DESADV_Товары.НайтиСтроки(Новый Структура("Ссылка", Выборка.ЭКОМ_Документ)) Цикл         
	                НайденнаяСтрока = Источник.Товары.Найти(СтрЭКОМ.Номенклатура, "Номенклатура");    
					Если НЕ НайденнаяСтрока = Неопределено
						И СтрЭКОМ.КоличествоПоставляемое &gt; 0 Тогда  
	                    НовСтр = Приемник.Товары.Добавить();
	                    ЗаполнитьЗначенияСвойств(НовСтр, НайденнаяСтрока);
	                    НовСтр.Количество = СтрЭКОМ.КоличествоПоставляемое;
	                КонецЕсли;          
	            КонецЦикла;

	            СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Приемник);

	            СтруктураДействий = Новый Структура;
	            СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	            СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	            СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	            СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");        
	            СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));        
	            СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Приемник.НалогообложениеНДС, Приемник.Дата));
	            СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Приемник.ВернутьМногооборотнуюТару);
	            СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок", ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());    
	            СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов", Неопределено);

	            ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Приемник.Товары, СтруктураДействий, Неопределено); 

	            Приемник.Записать();
	        Иначе
	            ТекстЛогаСобытий = "Документ " + Строка(Источник.Ссылка) + " не найден в цепочке."; 
	            ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);            
	        КонецЕсли;            
	    КонецЕсли;    
	КонецЕсли;
КонецЕсли;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">ДокументЗаказа</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
	</row>
</ValueTree>