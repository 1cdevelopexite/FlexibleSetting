<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать реализацию товаров</Value>
		<Value xsi:type="xs:string">ЭКОМ_Документ_ORDER</Value>
		<Value xsi:type="xs:string">Docrobot Документ</Value>
		<Value xsi:type="xs:string">Реализация товаров и услуг</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">Если КэшированныеЗначения = Неопределено Тогда
	КэшированныеЗначения = новый Структура;
КонецЕсли;
// Получение общих для всех документов значений.
ПроводитьРеализацию			= Неопределено;
Если НЕ КэшированныеЗначения.Свойство("ПроводитьРеализацию", ПроводитьРеализацию) Тогда
	ПроводитьРеализацию		= Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументРеализация1СПроведенным");
	КэшированныеЗначения.Вставить("ПроводитьРеализацию", ПроводитьРеализацию);
КонецЕсли;
ЗагружатьДатойПоставки		= Неопределено;
Если НЕ КэшированныеЗначения.Свойство("ЗагружатьДатойПоставки", ЗагружатьДатойПоставки) Тогда
	ЗагружатьДатойПоставки	= Настройка_Параметр_Прочитать("ЭКОМ_РеализацииСоздаватьДатойПоставки");
	КэшированныеЗначения.Вставить("ЗагружатьДатойПоставки", ЗагружатьДатойПоставки);
КонецЕсли;

глТекущийПользователь = Неопределено;
Если НЕ КэшированныеЗначения.Свойство("глТекущийПользователь", глТекущийПользователь) Тогда
	глТекущийПользователь	= глЗначениеПеременной("глТекущийПользователь");
	КэшированныеЗначения.Вставить("глТекущийПользователь", глТекущийПользователь);
КонецЕсли;

ОсновнойСклад = Неопределено;
Если НЕ КэшированныеЗначения.Свойство("ОсновнойСклад", ОсновнойСклад) Тогда
	ОсновнойСклад	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
	КэшированныеЗначения.Вставить("ОсновнойСклад", ОсновнойСклад);
КонецЕсли;

мВалютаРегламентированногоУчета = Неопределено;
Если НЕ КэшированныеЗначения.Свойство("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета) Тогда
	мВалютаРегламентированногоУчета 	= глЗначениеПеременной("ВалютаРегламентированногоУчета");
	КэшированныеЗначения.Вставить("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
КонецЕсли;

docrobotНомерЗаказа = Неопределено;
Если НЕ КэшированныеЗначения.Свойство("docrobotНомерЗаказа", docrobotНомерЗаказа) Тогда
	КэшированныеЗначения.Вставить("docrobotНомерЗаказа", Неопределено);
КонецЕсли;

docrobotДатаЗаказа = Неопределено;
Если НЕ КэшированныеЗначения.Свойство("docrobotДатаЗаказа", docrobotДатаЗаказа) Тогда
	КэшированныеЗначения.Вставить("docrobotДатаЗаказа", Неопределено);
КонецЕсли;

МассивЗаказыПокупателя     = Новый Массив;

// Получаем коллекцию источников-заказов клиента. Остальные - предположительно эком документы (иначе ошибка).

Если НЕ ТипЗнч(Источник) = Тип("Массив") Тогда
    ИсточникМассив = Новый Массив;
    ИсточникМассив.Добавить(Источник);
    Источник = ИсточникМассив;
КонецЕсли;

Для Каждого ДокументИсточник Из Источник Цикл
    Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
        МассивЗаказыПокупателя.Добавить(ДокументИсточник);
    КонецЕсли;
КонецЦикла;

УстановитьПривилегированныйРежим(Истина);
// Находим Эком документы по ссылке на заказы.
Запрос = Новый Запрос;
Запрос.Текст = 
    "ВЫБРАТЬ
    |	ЦепочкиДокументовПоставщика.ORDER КАК ЭкомДокумент,
    |	ЦепочкиДокументовПоставщика.Заказ КАК ЗаказПокупателя,
    |	ЦепочкиДокументовПоставщика.Накладная КАК РеализацияТоваров,
    |	ЦепочкиДокументовПоставщика.Заказ.НомерВходящегоДокументаЭлектронногоОбмена КАК НомерПоДаннымКлиента,
    |	ЦепочкиДокументовПоставщика.Заказ.ДатаВходящегоДокументаЭлектронногоОбмена КАК ДатаПоДаннымКлиента,
    |	ЦепочкиДокументовПоставщика.Заказ.Комментарий КАК Комментарий,
    |	ЦепочкиДокументовПоставщика.ORDER.ДатаПоставки КАК ДатаПоставки
    |ИЗ
    |	РегистрСведений.ЭКОМ_ЦепочкиДокументовПоставщика КАК ЦепочкиДокументовПоставщика
    |ГДЕ
    |	ЦепочкиДокументовПоставщика.Заказ В(&amp;Источник)";
Запрос.УстановитьПараметр("Источник", Источник);
РезультатЗапроса = Запрос.Выполнить().Выгрузить();
УстановитьПривилегированныйРежим(Ложь);

// Создаем реализации на основании заказов клиентов и удаляем заказы из дальнейшей обработки.
Для Каждого ДокументИсточник Из МассивЗаказыПокупателя Цикл
    СтрокиИзЗапроса = РезультатЗапроса.НайтиСтроки(Новый Структура("ЗаказПокупателя", ДокументИсточник));
    ДатаДокумента = ТекущаяДатаСеанса();
	НомерПоДаннымКлиента = "";
	ДатаПоДаннымКлиента = "";
	Комментарий = "";
	РеализацияТоваров = Неопределено;
    Для Каждого СтрокаИзЗапроса Из СтрокиИзЗапроса Цикл
        Если ТипЗнч(СтрокаИзЗапроса.ДатаПоставки) = Тип("Дата") И
            ДатаДокумента &gt; СтрокаИзЗапроса.ДатаПоставки Тогда
            ДатаДокумента = СтрокаИзЗапроса.ДатаПоставки; // Для нескольких документов выбираем наименьшую дату.
		КонецЕсли;
		НомерПоДаннымКлиента 	= СтрокаИзЗапроса.НомерПоДаннымКлиента;
		ДатаПоДаннымКлиента 	= СтрокаИзЗапроса.ДатаПоДаннымКлиента;
		РеализацияТоваров 		= СтрокаИзЗапроса.РеализацияТоваров;
		Комментарий 			= СтрокаИзЗапроса.Комментарий;
    КонецЦикла;

    Приемник = ?(ЗначениеЗаполнено(РеализацияТоваров) , РеализацияТоваров.ПолучитьОбъект(), Документы.РеализацияТоваровУслуг.СоздатьДокумент());
	ЗаполнитьЗначенияСвойств(Приемник, Документы.РеализацияТоваровУслуг.СоздатьДокумент());
    Приемник.Заполнить(ДокументИсточник);
	Приемник.Дата = ?(ЗагружатьДатойПоставки = Истина, ДатаДокумента, ТекущаяДатаСеанса());
	Приемник.ОтражатьВУправленческомУчете 	= Истина;
	Приемник.ОтражатьВНалоговомУчете 		= Истина;
    //Приемник.Дата = ДатаДокумента;
    Если НЕ ПустаяСтрока(Комментарий) Тогда
        Приемник.Комментарий = Комментарий;
    Иначе
        Приемник.Комментарий = ?(ЗначениеЗаполнено(НомерПоДаннымКлиента), "Заказ № " + НомерПоДаннымКлиента, "");
        Приемник.Комментарий = Приемник.Комментарий
            + ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(ДатаПоДаннымКлиента), 
            " от " + Формат(ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"), "");
    КонецЕсли;

    ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
    Если ОшибокНеОбнаружено Тогда
        Попытка
            Приемник.Записать(?(ПроводитьРеализацию, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
        Исключение
            Ошибка = ОписаниеОшибки();
            ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки());
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьРеализацию, "проведения", "записи"));
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", ДокументИсточник.Номер);
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(ДокументИсточник.Дата, "ДФ=dd.MM.yyyy"));
            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
            Продолжить;
        КонецПопытки;
    КонецЕсли;

    ИндексЭлемента = Источник.Найти(ДокументИсточник);
    Если НЕ ИндексЭлемента = Неопределено Тогда
        Источник.Удалить(ИндексЭлемента);
    КонецЕсли;
КонецЦикла;

УстановитьПривилегированныйРежим(Истина);
// Основной запрос для заполнения шапки документа.
Запрос = Новый Запрос;
Запрос.Текст = 
    "ВЫБРАТЬ
    |	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.Ссылка КАК Ссылка,
    |	ЭКОМ_ЦепочкиДокументовПоставщика.Накладная КАК Реализация,
    |	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.Ссылка.Представление КАК ИсточникПредставление,
    |	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.ТочкаДоставки КАК Грузополучатель,
    |	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.ТочкаДоставки.Представление КАК ПартнерПредставление,
    |	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.Контрагент КАК Контрагент,
    |	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.Организация КАК Организация,
    |	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.ФайлНомер КАК ФайлНомер,
    |	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.ФайлДата КАК ФайлДата,
    |	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия) КАК ВидОперации,
    |	ЗНАЧЕНИЕ(Перечисление.ВидыПередачиТоваров.СоСклада) КАК ВидПередачи,
    |	ЕСТЬNULL(ЭКОМ_GLN.Контрагент_ЦеныИз1С, ЛОЖЬ) КАК ЦеныИз1С,
    |	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.ЗаказНомер КАК НомерПоДаннымКлиента,
    |	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.ЗаказДата КАК ДатаПоДаннымКлиента
    |ИЗ
    |	РегистрСведений.ЭКОМ_ЦепочкиДокументовПоставщика КАК ЭКОМ_ЦепочкиДокументовПоставщика
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
    |		ПО ЭКОМ_ЦепочкиДокументовПоставщика.Контрагент = ЭКОМ_GLN.Объект
    |ГДЕ
    |	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.Ссылка В(&amp;Источник)";
Запрос.УстановитьПараметр("Источник", Источник);
РезультатЗапроса = Запрос.Выполнить().Выгрузить();

// Получение данных табличной части Товары.
Запрос = Новый Запрос;
Запрос.Текст = 
    "ВЫБРАТЬ
    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка КАК Ссылка,
    |	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
    |	ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое КАК Количество,
    |	ЭКОМ_ДокументыТЧ_Товары.Цена КАК Цена,
    |	ЭКОМ_ДокументыТЧ_Товары.ЦенаСНДС КАК ЦенаСНДС,
    |	ЭКОМ_ДокументыТЧ_Товары.ЕдиницаИзмерения,
    |	ЭКОМ_ДокументыТЧ_Товары.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
    |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
    |ИЗ
    |	Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
    |ГДЕ
    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка В(&amp;Источник)";
Запрос.УстановитьПараметр("Источник", Источник);
РезультатЗапросаТЧТовары = Запрос.Выполнить().Выгрузить();

УстановитьПривилегированныйРежим(Ложь);

Для Каждого Запись Из РезультатЗапроса Цикл
	
	Если НЕ ЗначениеЗаполнено(docrobotНомерЗаказа)
		ИЛИ НЕ ЗначениеЗаполнено(docrobotДатаЗаказа) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	"""""""" КАК ОбязательноеПоле
			|ПОМЕСТИТЬ вт
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(НазначенияСвойствКатегорийОбъектов.Ссылка, НЕОПРЕДЕЛЕНО) КАК НазначениеСвойств,
			|	ЕСТЬNULL(СвойстваОбъектовНомерЗаказа.Ссылка, НЕОПРЕДЕЛЕНО) КАК НомерЗаказа,
			|	ЕСТЬNULL(СвойстваОбъектовДатаЗаказа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ДатаЗаказа
			|ИЗ
			|	вт КАК вт
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов КАК НазначенияСвойствКатегорийОбъектов
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектовНомерЗаказа
			|			ПО НазначенияСвойствКатегорийОбъектов.Ссылка = СвойстваОбъектовНомерЗаказа.НазначениеСвойства
			|				И (СвойстваОбъектовНомерЗаказа.Наименование = ""docrobot Номер заказа"")
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектовДатаЗаказа
			|			ПО НазначенияСвойствКатегорийОбъектов.Ссылка = СвойстваОбъектовДатаЗаказа.Ссылка
			|				И (СвойстваОбъектовДатаЗаказа.Наименование = ""docrobot Дата заказа"")
			|		ПО (ИСТИНА)
			|			И (НазначенияСвойствКатегорийОбъектов.Наименование = ""Реализация товаров и услуг"")";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДопСвойства = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДопСвойства.Следующий() Тогда
			
			НазначениеСвойств 		= ВыборкаДопСвойства.НазначениеСвойств;
			docrobotНомерЗаказа 	= ВыборкаДопСвойства.НомерЗаказа;
			docrobotДатаЗаказа 	= ВыборкаДопСвойства.ДатаЗаказа;
			Если НЕ ЗначениеЗаполнено(ВыборкаДопСвойства.НазначениеСвойств) Тогда
				НазначениеСвойствОбъект = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.СоздатьЭлемент();
				НазначениеСвойствОбъект.Наименование = "Реализация товаров и услуг";
				НазначениеСвойствОбъект.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
				НазначениеСвойствОбъект.Записать();
				НазначениеСвойств = НазначениеСвойствОбъект.Ссылка;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДопСвойства.НомерЗаказа) Тогда
				ДопСвойствоНомерЗаказаОбъект = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
				ДопСвойствоНомерЗаказаОбъект.Наименование = "docrobot Номер заказа";
				ДопСвойствоНомерЗаказаОбъект.ТипЗначения = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
				ДопСвойствоНомерЗаказаОбъект.НазначениеСвойства = НазначениеСвойств;
				ДопСвойствоНомерЗаказаОбъект.Записать();
				docrobotНомерЗаказа = ДопСвойствоНомерЗаказаОбъект.Ссылка;
				КэшированныеЗначения.docrobotНомерЗаказа = docrobotНомерЗаказа;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДопСвойства.ДатаЗаказа) Тогда
				ДопСвойствоДатаЗаказаОбъект = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
				ДопСвойствоДатаЗаказаОбъект.Наименование = "docrobot Дата заказа";
				ДопСвойствоДатаЗаказаОбъект.ТипЗначения = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
				ДопСвойствоДатаЗаказаОбъект.НазначениеСвойства = НазначениеСвойств;
				ДопСвойствоДатаЗаказаОбъект.Записать();
				docrobotДатаЗаказа = ДопСвойствоДатаЗаказаОбъект.Ссылка;
				КэшированныеЗначения.docrobotДатаЗаказа = docrobotДатаЗаказа;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
    // Берем ранее созданный документ, если он заполнен в Документ1С Эком документа.
    Приемник = ?(ЗначениеЗаполнено(Запись.Реализация), Запись.Реализация.ПолучитьОбъект(), Приемник);
    // Проверка корректности выбора настроек шаблона.
    Если ТипЗнч(Приемник) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
        ТекстОшибки = НСтр("ru = 'Ошибка создания документа на основании %Источник%. Возможно ошибка связана с некорректным заполнением значений ""Колонка источника"" и ""Источник"" в шаблоне.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Источник%", Строка(Запись.Ссылка));
        ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
        Продолжить;
    КонецЕсли;    // Очистка реквизитов документа перед заполнением.
    ЗаполнитьЗначенияСвойств(Приемник, Документы.РеализацияТоваровУслуг.СоздатьДокумент());
    // Заполнение реквизитов из запроса.
    ЗаполнитьЗначенияСвойств(Приемник, Запись);
    // Корректировка реквизитов.
    Приемник.Дата = ?(ЗагружатьДатойПоставки = Истина, Запись.ДатаПоставки, ТекущаяДата());
    Приемник.Ответственный = Пользователи.ТекущийПользователь();
    Приемник.Комментарий = ?(ЗначениеЗаполнено(Запись.НомерПоДаннымКлиента), "Заказ № " + Запись.НомерПоДаннымКлиента, "");
    Приемник.Комментарий = Приемник.Комментарий
        + ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(Запись.ДатаПоДаннымКлиента), 
        " от " + Формат(Запись.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"), "");
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Приемник, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
    // Заполнение Товаров.
    Приемник.Товары.Очистить();

    Для Каждого Строка Из РезультатЗапросаТЧТовары.НайтиСтроки(Новый Структура("Ссылка", Запись.Ссылка)) Цикл

		СтрокаТабличнойЧасти = Приемник.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Строка, "Номенклатура, Количество, ЕдиницаИзмерения, Коэффициент");
		СтрокаТабличнойЧасти.Склад = Приемник.Склад;
		
		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Приемник, "Реализация");
		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, Приемник);
		
		Если Запись.ЦеныИз1С Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Приемник, мВалютаРегламентированногоУчета);
		Иначе
			Цена = 0;
	        Если Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
	            Цена = Строка.ЦенаСНДС;
	        ИначеЕсли НЕ Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
	            Цена = Строка.Цена;
	        ИначеЕсли Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
	            Цена  = Окр((Строка.Цена * (100 + СтавкаНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС))) / 100 , 4);
	        ИначеЕсли НЕ Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
	            Цена = Окр((Строка.ЦенаСНДС * 100) / (100 + СтавкаНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС)) , 4);
	        КонецЕсли;
	        СтрокаТабличнойЧасти.Цена = Цена;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Приемник);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Приемник);
		ОбработкаТабличныхЧастей.ЗаполнитьКодТНВЭД(СтрокаТабличнойЧасти);
    КонецЦикла;
	
	// Проверка и запись документов.
    ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
	Если ОшибокНеОбнаружено Тогда
		НачатьТранзакцию();
		Если Приемник.ЭтоНовый() Тогда
	        Ссылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор);
	        Приемник.УстановитьСсылкуНового(Ссылка);
		Иначе
			Ссылка = Приемник.Ссылка;
		КонецЕсли;
		
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Ссылка);
			
			// Запись дополнительных свойств.
			Измерения = Новый Массив;
			Ресурсы = Новый Массив;
			
			ДанныеИзмерений = Новый Структура;
			ДанныеИзмерений.Вставить("Объект", Ссылка);
			ДанныеИзмерений.Вставить("Свойство", docrobotНомерЗаказа);
			Измерения.Добавить(ДанныеИзмерений);
			
			ДанныеИзмерений = Новый Структура;
			ДанныеИзмерений.Вставить("Объект", Ссылка);
			ДанныеИзмерений.Вставить("Свойство", docrobotДатаЗаказа);
			Измерения.Добавить(ДанныеИзмерений);
			
			ДанныеРесурсов = Новый Структура;
			ДанныеРесурсов.Вставить("Значение", Запись.НомерПоДаннымКлиента);
			Ресурсы.Добавить(ДанныеРесурсов);
			
			ДанныеРесурсов = Новый Структура;
			ДанныеРесурсов.Вставить("Значение", Запись.ДатаПоДаннымКлиента);
			Ресурсы.Добавить(ДанныеРесурсов);
													   
			ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЗначенияСвойствОбъектов");
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
	            // Записываем документ в первый раз.
				Для Индекс = 0 По Измерения.ВГраница() Цикл
	            	ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НаборЗаписей.Добавить(), Измерения.Получить(Индекс), Ресурсы.Получить(Индекс)); // записываем данные в регистр если они заполнены
				КонецЦикла;
	        Иначе
	            // Если существует документ в регистре.
				Для Каждого НоваяЗапись Из НаборЗаписей Цикл
					Если НоваяЗапись.Свойство = docrobotНомерЗаказа Тогда
		                ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, Ресурсы.Получить(0)); // записываем данные в регистр если они заполнены
					ИначеЕсли НоваяЗапись.Свойство = docrobotДатаЗаказа Тогда
		                ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, Ресурсы.Получить(1)); // записываем данные в регистр если они заполнены
					КонецЕсли;
	            КонецЦикла;
			КонецЕсли;
			
			Если НаборЗаписей.Модифицированность() Тогда
	            НаборЗаписей.Записать();
			КонецЕсли;
			
            Приемник.Записать(?(ПроводитьРеализацию, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
            ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%.'");
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьРеализацию, "проведения", "записи"));
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", Запись.ФайлНомер);
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(Запись.ФайлДата, "ДФ=dd.MM.yyyy"));
            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
            Продолжить;
        КонецПопытки;
    КонецЕсли;
КонецЦикла;</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать реализацию товаров</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>