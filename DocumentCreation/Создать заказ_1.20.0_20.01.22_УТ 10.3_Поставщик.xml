<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать заказ</Value>
		<Value xsi:type="xs:string">ЭКОМ_Документ_ORDER</Value>
		<Value xsi:type="xs:string">Docrobot Документ</Value>
		<Value xsi:type="xs:string">ЗаказПокупателя</Value>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">РазделятьЗаказы = Настройка_Параметр_Прочитать("ЭКОМ_РазделятьЗаказы", Ложь);   

ЗапрещеноИзменениеЗаказа = Ложь;
Если Цепочка.ДокументЗаказа1С &lt;&gt; Неопределено И ЗначениеЗаполнено(Цепочка.ДокументЗаказа1С)
	И Цепочка.ДокументЗаказа1С.Проведен И ЗначениеЗаполнено(Цепочка.ДокументРеализации) И Не Разделятьзаказы Тогда 
		ЗапрещеноИзменениеЗаказа = Истина;
КонецЕсли;
				
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ЭКОМ_Документы.Ссылка КАК Ссылка
               |ИЗ
               |	Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
               |ГДЕ
               |	ЭКОМ_Документы.Ссылка = &amp;Источник
               |	И НЕ ЭКОМ_Документы.ПометкаУдаления";
Запрос.УстановитьПараметр("Источник", Источник);
Результат = Запрос.Выполнить();
ИсточникПомеченНаУдаление = Результат.Пустой(); 
Если Не ИсточникПомеченНаУдаление И Не ЗапрещеноИзменениеЗаказа Тогда

	// Получение общих для всех документов значений.
	Если КэшированныеЗначения 	= Неопределено Тогда
		КэшированныеЗначения 	= Новый Структура;
	КонецЕсли;

	ПроводитьЗаказ 				= Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("ПроводитьЗаказ", ПроводитьЗаказ) Тогда
		ПроводитьЗаказ 			= Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументЗаказ1СПроведенным");
		КэшированныеЗначения.Вставить("ПроводитьЗаказ", ПроводитьЗаказ);
	КонецЕсли;

	ЗагружатьТекущейДатой 		= Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой) Тогда
		ЗагружатьТекущейДатой 	= Настройка_Параметр_Прочитать("ЭКОМ_ЗаказыЗагружатьТекущейДатой");
		КэшированныеЗначения.Вставить("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой);
	КонецЕсли;

	глТекущийПользователь = Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("глТекущийПользователь", глТекущийПользователь) Тогда
		глТекущийПользователь 	= глЗначениеПеременной("глТекущийПользователь");
		КэшированныеЗначения.Вставить("глТекущийПользователь", глТекущийПользователь);
	КонецЕсли;

	мВалютаРегламентированногоУчета = Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета) Тогда
		мВалютаРегламентированногоУчета 	= глЗначениеПеременной("ВалютаРегламентированногоУчета");
		КэшированныеЗначения.Вставить("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	КонецЕсли;

	ОсновнойСклад = Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("ОсновнойСклад", ОсновнойСклад) Тогда
		ОсновнойСклад	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
		КэшированныеЗначения.Вставить("ОсновнойСклад", ОсновнойСклад);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	// Основной запрос для заполнения шапки документа.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ЭКОМ_GLN.Контрагент_ЦеныИз1С, ЛОЖЬ) КАК ЦеныИз1С,
		|	КонтактнаяИнформация.Представление КАК АдресДоставки,
		|	ЭКОМ_Документы.Ссылка КАК Ссылка,
		|	ЭКОМ_Документы.Представление КАК ИсточникПредставление,
		|	ЭКОМ_Документы.Дата КАК Дата,
		|	ЭКОМ_Документы.ТочкаДоставки КАК Грузополучатель,
		|	ЭКОМ_Документы.Контрагент КАК Контрагент,
		|	ЭКОМ_Документы.Контрагент.ОсновноеКонтактноеЛицо КАК ОсновноеКонтактноеЛицо,
		|	ЭКОМ_Документы.Организация КАК Организация,
		|	ЭКОМ_Документы.ЗаказНомер КАК НомерВходящегоДокументаЭлектронногоОбмена,
		|	ЭКОМ_Документы.ЗаказДата КАК ДатаВходящегоДокументаЭлектронногоОбмена,
		|	ЭКОМ_Документы.ДатаПоставки КАК ДатаОтгрузки,
		|	ЭКОМ_Документы.ФайлНомер КАК ФайлНомер,
		|	ЭКОМ_Документы.ФайлДата КАК ФайлДата
		|ИЗ
		|	Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
		|		ПО ЭКОМ_Документы.Контрагент = ЭКОМ_GLN.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ЭКОМ_Документы.ТочкаДоставки = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента))
		|ГДЕ
		|	ЭКОМ_Документы.Ссылка В(&amp;Источник)";

	Запрос.УстановитьПараметр("Источник", Источник);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	// Получение данных табличной части Товары.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка КАК Ссылка,
	    |	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
	    |	ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое КАК Количество,
	    |	ЭКОМ_ДокументыТЧ_Товары.Цена КАК Цена,
	    |	ЭКОМ_ДокументыТЧ_Товары.ЦенаСНДС КАК ЦенаСНДС,
	    |	ЭКОМ_ДокументыТЧ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	    |	ЭКОМ_ДокументыТЧ_Товары.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
	    |ИЗ
	    |	Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
	    |ГДЕ
	    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка В(&amp;Источник)
	    |	И ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое &gt; 0";
	Запрос.УстановитьПараметр("Источник", Источник);
	РезультатЗапросаТЧТовары = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОстатки = Новый ТаблицаЗначений;
	Если РазделятьЗаказы Тогда
		Запрос.Текст = 
		    "ВЫБРАТЬ
		    |	ЭКОМ_ДокументыДокументыСвязанные.ДокументСвязанный,
		    |	ЭКОМ_ДокументыДокументыСвязанные.Ссылка
		    |ПОМЕСТИТЬ ДокументыСвязанные
		    |ИЗ
		    |	Документ.ЭКОМ_Документы.ДокументыСвязанные КАК ЭКОМ_ДокументыДокументыСвязанные
		    |ГДЕ
		    |	ЭКОМ_ДокументыДокументыСвязанные.Ссылка В(&amp;Источник)
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка КАК ДокументИсточник,
		    |	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
		    |	СУММА(ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое) КАК Количество
		    |ПОМЕСТИТЬ ТоварыOrder
		    |ИЗ
		    |	Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
		    |ГДЕ
		    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка В(&amp;Источник)
		    |	И ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое &gt; 0
		    |
		    |СГРУППИРОВАТЬ ПО
		    |	ЭКОМ_ДокументыТЧ_Товары.Номенклатура,
		    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	ДокументыСвязанные.Ссылка КАК ДокументИсточник,
		    |	ЗаказПокупателяТовары.Номенклатура,
		    |	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество
		    |ПОМЕСТИТЬ ТоварыЗаказы
		    |ИЗ
		    |	ДокументыСвязанные КАК ДокументыСвязанные
		    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		    |		ПО ДокументыСвязанные.ДокументСвязанный = ЗаказПокупателяТовары.Ссылка
		    |ГДЕ
		    |	ЗаказПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		    |
		    |СГРУППИРОВАТЬ ПО
		    |	ЗаказПокупателяТовары.Номенклатура,
		    |	ДокументыСвязанные.Ссылка
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	ТоварыOrder.ДокументИсточник,
		    |	ТоварыOrder.Номенклатура,
		    |	ТоварыOrder.Количество - ЕСТЬNULL(ТоварыЗаказы.Количество, 0) КАК КоличествоОстаток
		    |ИЗ
		    |	ТоварыOrder КАК ТоварыOrder
		    |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаказы КАК ТоварыЗаказы
		    |		ПО ТоварыOrder.Номенклатура = ТоварыЗаказы.Номенклатура
		    |			И ТоварыOrder.ДокументИсточник = ТоварыЗаказы.ДокументИсточник";
		ТаблицаОстатки = Запрос.Выполнить().Выгрузить();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	Для Каждого Запись Из РезультатЗапроса Цикл
		Если Не РазделятьЗаказы Тогда
	    	// Проверка заполненности Заказа в текущей цепочке, если заполнена - выполняется перезапись объекта
			Если Цепочка.ДокументЗаказа1С &lt;&gt; Неопределено И ЗначениеЗаполнено(Цепочка.ДокументЗаказа1С) Тогда
				Приемник = Цепочка.ДокументЗаказа1С.ПолучитьОбъект(); 				
		   	 	ОперацияЗапись = Истина;
			Иначе
		    	// Очистка реквизитов документа перед заполнением.
		   	 	ЗаполнитьЗначенияСвойств(Приемник, Документы.ЗаказПокупателя.СоздатьДокумент());
			КонецЕсли;
	    КонецЕсли;
		// Заполнение шапки.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Приемник, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
	    // Заполнение реквизитов из запроса.
	    ЗаполнитьЗначенияСвойств(Приемник, Запись);
		// Выполняем общие действия для всех документов при изменении Контрагент.
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Приемник, Неопределено);

		Если НЕ ЗначениеЗаполнено(Приемник.КонтактноеЛицоКонтрагента) Тогда
			Приемник.КонтактноеЛицоКонтрагента = Запись.ОсновноеКонтактноеЛицо;
		ИначеЕсли Приемник.КонтактноеЛицоКонтрагента.Владелец &lt;&gt; Приемник.Контрагент Тогда
			Приемник.КонтактноеЛицоКонтрагента = Запись.ОсновноеКонтактноеЛицо;
		КонецЕсли;
		
		Приемник.Дата = ?(ЗагружатьТекущейДатой = Истина, ТекущаяДата(), Приемник.Дата);
		Приемник.ДатаОтгрузки = ?(ЗначениеЗаполнено(Приемник.ДатаОтгрузки) И Приемник.ДатаОтгрузки &lt; НачалоДня(Приемник.Дата),
	        НачалоДня(Приемник.Дата), Приемник.ДатаОтгрузки);
		Приемник.Ответственный = Пользователи.ТекущийПользователь();
	    Приемник.Комментарий = ?(ЗначениеЗаполнено(Запись.НомерВходящегоДокументаЭлектронногоОбмена), "Заказ № " + Запись.НомерВходящегоДокументаЭлектронногоОбмена, "");
	    Приемник.Комментарий = Приемник.Комментарий
	        + ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(Запись.ДатаВходящегоДокументаЭлектронногоОбмена), 
	        " от " + Формат(Запись.ДатаВходящегоДокументаЭлектронногоОбмена, "ДФ=dd.MM.yyyy"), "");
		Приемник.Товары.Очистить();
		Для Каждого Строка Из РезультатЗапросаТЧТовары.НайтиСтроки(Новый Структура("Ссылка", Запись.Ссылка)) Цикл
			СтрокаТабличнойЧасти = Приемник.Товары.Добавить();
			// Заполнение данных строки.
	        ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Строка, "Номенклатура, Количество, ЕдиницаИзмерения, Коэффициент");
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Приемник, "Реализация");
			СтрокаТабличнойЧасти.Размещение = ОсновнойСклад;
			
			Если Запись.ЦеныИз1С Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Приемник, мВалютаРегламентированногоУчета);
			Иначе
				Цена = 0;
		        Если Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
		            Цена = Строка.ЦенаСНДС;
		        ИначеЕсли НЕ Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
		            Цена = Строка.Цена;
		        ИначеЕсли Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
		            Цена  = Окр((Строка.Цена * (100 + СтавкаНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС))) / 100 , 4);
		        ИначеЕсли НЕ Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
		            Цена = Окр((Строка.ЦенаСНДС * 100) / (100 + СтавкаНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС)) , 4);
		        КонецЕсли;
		        СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Приемник);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Приемник);
			// Рассчитываем плановую себестоимость.
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, Приемник, мВалютаРегламентированногоУчета);
		КонецЦикла;
		
		Если РазделятьЗаказы Тогда
			// актуализация количества с учетом ранее созданных заказов клиента по данному ордеру
			ОстаткиПоОрдеру = ТаблицаОстатки.НайтиСтроки(Новый Структура("ДокументИсточник", Запись.Ссылка));
			Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
				КоличествоОстаток = СтрокаОстатки.КоличествоОстаток;
				ПараметрыОтбора = Новый Структура("Номенклатура");
				ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаОстатки);
				НайденныеСтроки = Приемник.Товары.НайтиСтроки(ПараметрыОтбора);
				Для Каждого Строка Из НайденныеСтроки Цикл
					Если КоличествоОстаток &lt;= 0 Тогда
						Приемник.Товары.Удалить(Строка);
					Иначе
						Строка.Количество = Мин(КоличествоОстаток, Строка.Количество);
						КоличествоОстаток = КоличествоОстаток - Строка.Количество;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Приемник.Товары.Количество() = 0 Тогда
			ТекстЛогаСобытий = "Документ Заказ покупателя по документу " + Строка(Запись.Ссылка) +
			" не создан, т.к. не заполнены товары. Возможно по ORDER уже созданы другие заказы на все заказанное количество.";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
			Продолжить;
		КонецЕсли;
		
		// Проверка и запись документов.
	    ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
	    Если ОшибокНеОбнаружено Тогда
        	НачатьТранзакцию();
			Попытка
	            Приемник.Записать(?(ПроводитьЗаказ, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	        Исключение
	            ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки());
	            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьЗаказ, "проведения", "записи"));
	            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", Запись.ФайлНомер);
	            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(Запись.ФайлДата, "ДФ=dd.MM.yyyy"));
	            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
           		ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
	        // Запись ссылки в ЭКОМ документ.
	        Попытка
				Отбор = Новый Структура();
		        Отбор.Вставить("ДокументСвязанный", Приемник.Ссылка);
		        НайденныеСтроки = Источник.ДокументыСвязанные.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ИсточникОбъект = Источник.ПолучитьОбъект();
					НовДок = ИсточникОбъект.ДокументыСвязанные.Добавить();
					НовДок.ДокументСвязанный = Приемник.Ссылка;
					ИсточникОбъект.НеВыполнятьКодПриЗаписи = Истина;
					ИсточникОбъект.Записать();
				КонецЕсли;
				ЗафиксироватьТранзакцию();
				
				Если РазделятьЗаказы И ЗначениеЗаполнено(Цепочка.ДокументЗаказа1С) Тогда
					ТекстЛогаСобытий = "Разделена цепочка по заказу " + Строка(Источник.Ссылка) + ". Создан документ " + Строка(Приемник.Ссылка) + ".";
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Успешно, ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
				ИначеЕсли Не РазделятьЗаказы И Цепочка.ДокументЗаказа1С &lt;&gt; Неопределено И ЗначениеЗаполнено(Цепочка.ДокументЗаказа1С) Тогда
					ТекстЛогаСобытий = "Перезаписан уже существующий документ " + Строка(Цепочка.ДокументЗаказа1С) + " по заказу № " + Запись.НомерВходящегоДокументаЭлектронногоОбмена 
						+ " от " + Запись.ДатаВходящегоДокументаЭлектронногоОбмена;
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Успешно, ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
				КонецЕсли;

			Исключение
	            ТекстОшибки = НСтр("ru = 'Ошибка записи ссылки на созданный документ в %Источник%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Источник%", Запись.ИсточникПредставление);
	            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
	            ОтменитьТранзакцию();
	            Продолжить;
	        КонецПопытки;
	    КонецЕсли;
	КонецЦикла;
	
Иначе
	Если ЗапрещеноИзменениеЗаказа Тогда
		ТекстЛогаСобытий = "По заказу " + Строка(Цепочка.ДокументЗаказа1С) + " уже введена реализация " + Строка(Цепочка.ДокументРеализации) + ". Изменение документа запрещено.";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
	Иначе
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога("Документ " + Источник + " помечен на удаление, заказ клиента не создан", Перечисления.ЭКОМ_УровниЛогирования.Ошибка, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
	КонецЕсли; 
КонецЕсли; // проверка пометки удаления источника</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">7</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать заказ</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">5</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">6</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">7</id>
			</item>
		</Value>
	</row>
</ValueTree>