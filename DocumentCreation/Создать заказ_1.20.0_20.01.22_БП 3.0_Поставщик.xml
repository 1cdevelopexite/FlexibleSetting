<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать заказ клиента</Value>
		<Value xsi:type="xs:string">ЭКОМ Документы</Value>
		<Value xsi:type="xs:string">СчетНаОплатуПокупателю</Value>
		<Value xsi:type="xs:string">РазделятьЗаказы = Настройка_Параметр_Прочитать("ЭКОМ_РазделятьЗаказы", Ложь);  

ЗапрещеноИзменениеЗаказа = Ложь;
Если ЗначениеЗаполнено(Цепочка.ДокументЗаказа1С) И Цепочка.ДокументЗаказа1С.Проведен И ЗначениеЗаполнено(Цепочка.ДокументРеализации) И Не Разделятьзаказы Тогда 
		ЗапрещеноИзменениеЗаказа = Истина;
КонецЕсли;

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ЭКОМ_Документы.Ссылка КАК Ссылка
               |ИЗ
               |	Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
               |ГДЕ
               |	ЭКОМ_Документы.Ссылка = &amp;Источник
               |	И НЕ ЭКОМ_Документы.ПометкаУдаления";
Запрос.УстановитьПараметр("Источник", Источник);
Результат = Запрос.Выполнить();
ИсточникПомеченНаУдаление = Результат.Пустой(); 
Если Не ИсточникПомеченНаУдаление И Не ЗапрещеноИзменениеЗаказа Тогда
		
	ИмяДокументаПрименика = "Заказ 1С";

	ЭКОМ_СоздаватьДокументЗаказ1СПроведенным = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументЗаказ1СПроведенным");
	ЭКОМ_ЗаказыЗагружатьТекущейДатой = Настройка_Параметр_Прочитать("ЭКОМ_ЗаказыЗагружатьТекущейДатой");

	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Приемник.Организация);

	ДатаЗаказа = ТекущаяДата();
	Если ЭКОМ_ЗаказыЗагружатьТекущейДатой = Ложь Тогда
		Если ЗначениеЗаполнено(Источник.ФайлДата) Тогда
			ДатаЗаказа = Источник.ФайлДата;
		КонецЕсли;
	КонецЕсли;

	// Основной запрос для заполнения шапки документа.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |	ЭКОМ_Документы.Ссылка КАК ORDER,
	    |	ЕСТЬNULL(ЭКОМ_GLN.Контрагент_ЦеныИз1С, ЛОЖЬ) КАК ИспользоватьЦеныИз1С,
	    |	ЭКОМ_ТочкиДоставки.Адрес КАК АдресТочкиДоставки,
	    |	ЭКОМ_Документы.ТочкаДоставки КАК ТочкаДоставки,
	    |	ЭКОМ_ИнфоПоля.СхемаПодсчета КАК СхемаПодсчета,
	    |	ЭКОМ_Документы.ЗаказНомер КАК ORDERNUMBER,
	    |	ЭКОМ_Документы.ЗаказДата КАК ORDERDATE
	    |ИЗ
	    |	Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
	    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭКОМ_ИнфоПоля КАК ЭКОМ_ИнфоПоля
	    |			ПО ЭКОМ_GLN.Контрагент_ФорматЭСФ = ЭКОМ_ИнфоПоля.ФорматУПД
	    |		ПО ЭКОМ_Документы.Контрагент = ЭКОМ_GLN.Объект
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ТочкиДоставки КАК ЭКОМ_ТочкиДоставки
	    |		ПО ЭКОМ_Документы.ТочкаДоставки = ЭКОМ_ТочкиДоставки.Объект
	    |ГДЕ
	    |	ЭКОМ_Документы.Ссылка = &amp;Источник";
	Запрос.УстановитьПараметр("Источник", Источник);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	ИспользоватьЦеныИз1С  = Выборка.ИспользоватьЦеныИз1С;
	ТочкаДоставки         = Выборка.ТочкаДоставки;
	АдресТочкиДоставки    = Выборка.АдресТочкиДоставки;
	СхемаПодсчетаОбратная = Выборка.СхемаПодсчета;
	ORDERNUMBER           = Выборка.ORDERNUMBER;
	ORDERDATE             = Выборка.ORDERDATE;

	// Используется ранее созданный документ, если выключено разделение цепочки по заказам
	Если ЗначениеЗаполнено(Цепочка.ДокументЗаказа1С) И Не РазделятьЗаказы Тогда 
		Приемник = Цепочка.ДокументЗаказа1С.ПолучитьОбъект();  			
		ОперацияЗапись = Истина; 
		НомерДокумента = Приемник.Номер;
	КонецЕсли;
	Приемник.Товары.Очистить();
		
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	Если ОперацияЗапись Тогда
		Приемник.Номер = НомерДокумента;
	Иначе
		Приемник.Номер                   = Неопределено; // Заполняется системно
	КонецЕсли;
	Приемник.Дата                    = ДатаЗаказа;
	Приемник.ДоговорКонтрагента      = ТочкаДоставки;
	Приемник.ТипЦен                  = Приемник.ДоговорКонтрагента.ТипЦен;
	Приемник.СуммаВключаетНДС        = Приемник.ТипЦен.ЦенаВключаетНДС;
	Приемник.Ответственный           = ПользователиКлиентСервер.ТекущийПользователь();
	Приемник.КурсВзаиморасчетов      = 1;
	Приемник.КратностьВзаиморасчетов = 1;
	Приемник.АдресДоставки           = АдресТочкиДоставки;
	Приемник.ОрганизацияПолучатель   = Приемник.Организация;
	Приемник.Комментарий             = "Заказ №" + ORDERNUMBER + " от " + Формат(ORDERDATE, "ДЛФ=Д");
	Приемник.СтруктурнаяЕдиница      = ОсновнойБанковскийСчетОрганизацииЗаполнен;
	Если НЕ ЗначениеЗаполнено(Приемник.СтруктурнаяЕдиница) Тогда
	     Приемник.СтруктурнаяЕдиница  = Приемник.Организация.ОсновнойБанковскийСчет;	
	КонецЕсли;
	
	ТаблицаОстатки = Новый ТаблицаЗначений;
	Если РазделятьЗаказы Тогда
		Запрос.Текст = 
		    "ВЫБРАТЬ
		    |	ЭКОМ_ДокументыДокументыСвязанные.ДокументСвязанный КАК ДокументСвязанный,
		    |	ЭКОМ_ДокументыДокументыСвязанные.Ссылка КАК Ссылка
		    |ПОМЕСТИТЬ ДокументыСвязанные
		    |ИЗ
		    |	Документ.ЭКОМ_Документы.ДокументыСвязанные КАК ЭКОМ_ДокументыДокументыСвязанные
		    |ГДЕ
		    |	ЭКОМ_ДокументыДокументыСвязанные.Ссылка В(&amp;Источник)
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка КАК ДокументИсточник,
		    |	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
		    |	СУММА(ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое) КАК Количество
		    |ПОМЕСТИТЬ ТоварыOrder
		    |ИЗ
		    |	Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
		    |ГДЕ
		    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка = &amp;Источник
		    |	И ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое &gt; 0
		    |
		    |СГРУППИРОВАТЬ ПО
		    |	ЭКОМ_ДокументыТЧ_Товары.Номенклатура,
		    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	ДокументыСвязанные.Ссылка КАК ДокументИсточник,
		    |	СчетНаОплатуТовары.Номенклатура КАК Номенклатура,
		    |	СУММА(СчетНаОплатуТовары.Количество) КАК Количество
		    |ПОМЕСТИТЬ ТоварыЗаказы
		    |ИЗ
		    |	ДокументыСвязанные КАК ДокументыСвязанные
		    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуТовары
		    |		ПО ДокументыСвязанные.ДокументСвязанный = СчетНаОплатуТовары.Ссылка
		    |ГДЕ
		    |	СчетНаОплатуТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		    |
		    |СГРУППИРОВАТЬ ПО
		    |	СчетНаОплатуТовары.Номенклатура,
		    |	ДокументыСвязанные.Ссылка
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	ТоварыOrder.ДокументИсточник КАК ДокументИсточник,
		    |	ТоварыOrder.Номенклатура КАК Номенклатура,
		    |	ТоварыOrder.Количество - ЕСТЬNULL(ТоварыЗаказы.Количество, 0) КАК КоличествоОстаток
		    |ИЗ
		    |	ТоварыOrder КАК ТоварыOrder
		    |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаказы КАК ТоварыЗаказы
		    |		ПО ТоварыOrder.Номенклатура = ТоварыЗаказы.Номенклатура
		    |			И ТоварыOrder.ДокументИсточник = ТоварыЗаказы.ДокументИсточник";
		Запрос.УстановитьПараметр("Источник", Источник);
		ТаблицаОстатки = Запрос.Выполнить().Выгрузить();
	КонецЕсли;

	// Табличная часть
	ЗапросТЧ = Новый Запрос;
	ЗапросТЧ.Текст = 
	"ВЫБРАТЬ
	|	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаИз1С,
	|	ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое КАК КоличествоПоставляемое,
	|	ЭКОМ_ДокументыТЧ_Товары.ЦенаСНДС КАК ЦенаСНДС,
	|	ЭКОМ_ДокументыТЧ_Товары.СтавкаНДС КАК СтавкаНДС,
	|	ЭКОМ_ДокументыТЧ_Товары.Сумма_с_НДС КАК Сумма_с_НДС,
	|	ЭКОМ_ДокументыТЧ_Товары.Цена КАК Цена,
	|	ЭКОМ_ДокументыТЧ_Товары.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&amp;ДатаЗаказа, ТипЦен = &amp;ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ЭКОМ_ДокументыТЧ_Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)
	|ГДЕ
	|	ЭКОМ_ДокументыТЧ_Товары.Ссылка = &amp;Ссылка
	|	И НЕ ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое = 0";

	ЗапросТЧ.УстановитьПараметр("ТипЦен"    , Приемник.ДоговорКонтрагента.ТипЦен);
	ЗапросТЧ.УстановитьПараметр("ДатаЗаказа", Источник.ЗаказДата);
	ЗапросТЧ.УстановитьПараметр("Ссылка"    , Источник.Ссылка);
	РезультатЗапросаТЧ = ЗапросТЧ.Выполнить();
	ВыборкаТЧ = РезультатЗапросаТЧ.Выбрать();
	Пока ВыборкаТЧ.Следующий() Цикл
		НовСтр = Приемник.Товары.Добавить();        	    	   
		НовСтр.Количество   = ВыборкаТЧ.КоличествоПоставляемое;
		НовСтр.СтавкаНДС    = СтавкаНДССсылка(ВыборкаТЧ.СтавкаНДС);
	    НовСтр.Номенклатура = ВыборкаТЧ.Номенклатура;
		
		// Цена из документа или из базы 1С
		Цена = 0;
		Если ИспользоватьЦеныИз1С = Истина 
			И НЕ ВыборкаТЧ.ЦенаИз1С = 0 Тогда
			Цена = ВыборкаТЧ.ЦенаИз1С;
		Иначе
			Если Приемник.СуммаВключаетНДС Тогда
				Цена = ВыборкаТЧ.ЦенаСНДС;
			Иначе
				Цена = ВыборкаТЧ.Цена;		
			КонецЕсли;		
		КонецЕсли;
		
		// Цена без НДС или с НДС
		Если Приемник.СуммаВключаетНДС Тогда
			ЦенаСНДС   = Цена;
			ЦенаБезНДС = Цена/((100 + ВыборкаТЧ.СтавкаНДС)/100);
		Иначе
			ЦенаСНДС   = Цена * ((100 + ВыборкаТЧ.СтавкаНДС)/100);
			ЦенаБезНДС = Цена;
		КонецЕсли;
		
		// Обратная (от цены с НДС)
		Если СхемаПодсчетаОбратная = Истина Тогда 
			СуммаСНДС   = ЦенаСНДС * НовСтр.Количество; 
			СуммаНДС    = Окр(СуммаСНДС / (100 + ВыборкаТЧ.СтавкаНДС) * ВыборкаТЧ.СтавкаНДС, 4);
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
		// Прямая (от цены без НДС)
		Иначе	
			СуммаБезНДС = ЦенаБезНДС * НовСтр.Количество;
			СуммаСНДС   = СуммаБезНДС * (100 + ВыборкаТЧ.СтавкаНДС)/100;
			СуммаНДС    = Окр(СуммаСНДС - СуммаБезНДС, 4);
			
		КонецЕсли;

	    НовСтр.СуммаНДС     = СуммаНДС;
		НовСтр.Цена         = Цена;
		НовСтр.Сумма        = Цена * НовСтр.Количество;			
	КонецЦикла;
	
	Если РазделятьЗаказы Тогда
		// актуализация количества с учетом ранее созданных заказов клиента по данному ордеру
		ОстаткиПоОрдеру = ТаблицаОстатки.НайтиСтроки(Новый Структура("ДокументИсточник", Источник.Ссылка));
		Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
			КоличествоОстаток = СтрокаОстатки.КоличествоОстаток;
			ПараметрыОтбора = Новый Структура("Номенклатура");
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаОстатки);
			НайденныеСтроки = Приемник.Товары.НайтиСтроки(ПараметрыОтбора);
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если КоличествоОстаток &lt;= 0 Тогда
					Приемник.Товары.Удалить(Строка);
				Иначе
					Строка.Количество = Мин(КоличествоОстаток, Строка.Количество);
					КоличествоОстаток = КоличествоОстаток - Строка.Количество;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Если Приемник.Товары.Количество() = 0 Тогда
		ТекстЛогаСобытий = "Документ Заказ покупателя по документу " + Строка(Источник.Ссылка) +
		" не создан, т.к. не заполнены товары. Возможно по ORDER уже созданы другие заказы на все заказанное количество.";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
	Иначе
		НачатьТранзакцию();  
			
		
		ДокументЗаписан = Ложь;
		Попытка
		    Приемник.ПометкаУдаления = Ложь; 
		    Приемник.Записать(?(ЭКОМ_СоздаватьДокументЗаказ1СПроведенным, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		    ДокументЗаписан = Истина;	
		Исключение
		    Приемник.Записать(РежимЗаписиДокумента.Запись);
		    ТекстЛогаСобытий = ИмяДокументаПрименика + " по документу " + Строка(Источник.Ссылка) + " не создан!!! " + СокрЛП(ОписаниеОшибки());
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);
			ДокументЗаписан = Истина;
			ОтменитьТранзакцию();
		КонецПопытки;
		
		Если ДокументЗаписан Тогда
			Попытка		
				// привязываем документ СчетНаОплатуПокупателю к ЭКОМ документу
				Отбор = Новый Структура();
		        Отбор.Вставить("ДокументСвязанный", Приемник.Ссылка);
		        НайденныеСтроки = Источник.ДокументыСвязанные.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ИсточникОбъект = Источник.ПолучитьОбъект();
					НовДок = ИсточникОбъект.ДокументыСвязанные.Добавить();
					НовДок.ДокументСвязанный = Приемник.Ссылка;
					ИсточникОбъект.НеВыполнятьКодПриЗаписи = Истина;
					ИсточникОбъект.Записать();
					
					Приемник.Записать();
				КонецЕсли;
				ЗафиксироватьТранзакцию();
				
				Если Не РазделятьЗаказы И ЗначениеЗаполнено(Цепочка.ДокументЗаказа1С) Тогда  				
					ТекстЛогаСобытий = "Перезаписан уже существующий документ для " + Строка(Источник.Ссылка) + " по заказу № " + ORDERNUMBER + " от " +  ORDERDATE;
					ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);
			    ИначеЕсли РазделятьЗаказы И ЗначениеЗаполнено(Цепочка.ДокументЗаказа1С) Тогда
					ТекстЛогаСобытий = "Разделена цепочка по заказу № " + ORDERNUMBER + " от " + ORDERDATE + ". Создан документ " + Строка(Приемник.Ссылка) + ".";
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Успешно, ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
				КонецЕсли;					
			Исключение
					ТекстЛогаСобытий = "Не удалось добавить документ в список связанных к входящему ордеру: " + Строка(Приемник.Ссылка) + " по заказу № " + ORDERNUMBER + " от " + ORDERDATE + "."
									+ Символы.ПС + "Создание документа ""Счет на оплату покупателю"" отменено.";
					ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий); 
				   ОтменитьТранзакцию();
			КонецПопытки;
		КонецЕсли;	 	
	КонецЕсли;

Иначе
	Если ЗапрещеноИзменениеЗаказа Тогда
		ТекстЛогаСобытий = "По заказу " + Строка(Цепочка.ДокументЗаказа1С) + " уже введена реализация " + Строка(Цепочка.ДокументРеализации) + ". Изменение документа запрещено.";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
	Иначе
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога("Документ " + Источник + " помечен на удаление, заказ клиента не создан", Перечисления.ЭКОМ_УровниЛогирования.Ошибка, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
	КонецЕсли; 
КонецЕсли; // проверка пометки удаления источника</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">ЭКОМ_Документ_ORDER</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать заказ клиента</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>