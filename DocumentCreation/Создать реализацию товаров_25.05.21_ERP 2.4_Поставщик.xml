<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать реализацию товаров</Value>
		<Value xsi:type="xs:string">Заказ клиента</Value>
		<Value xsi:type="xs:string">Реализация товаров и услуг</Value>
		<Value xsi:type="xs:string">Если КэшированныеЗначения = Неопределено Тогда
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
КонецЕсли;
// Получение общих для всех документов значений.
ПроводитьРеализацию			= Неопределено;
Если НЕ КэшированныеЗначения.Свойство("ПроводитьРеализацию", ПроводитьРеализацию) Тогда
	ПроводитьРеализацию		= Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументРеализация1СПроведенным");
	КэшированныеЗначения.Вставить("ПроводитьРеализацию", ПроводитьРеализацию);
КонецЕсли;
ЗагружатьДатойПоставки		= Неопределено;
Если НЕ КэшированныеЗначения.Свойство("ЗагружатьДатойПоставки", ЗагружатьДатойПоставки) Тогда
	ЗагружатьДатойПоставки	= Настройка_Параметр_Прочитать("ЭКОМ_РеализацииСоздаватьДатойПоставки");
	КэшированныеЗначения.Вставить("ЗагружатьДатойПоставки", ЗагружатьДатойПоставки);
КонецЕсли;
МассивЗаказыКлеинта     = Новый Массив;

// Получаем коллекцию источников-заказов клиента. Остальные - предположительно эком документы (иначе ошибка).

Если НЕ ТипЗнч(Источник) = Тип("Массив") Тогда
    ИсточникМассив = Новый Массив;
    ИсточникМассив.Добавить(Источник);
    Источник = ИсточникМассив;
КонецЕсли;

Для Каждого ДокументИсточник Из Источник Цикл
    Если ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
        МассивЗаказыКлеинта.Добавить(ДокументИсточник);
    КонецЕсли;
КонецЦикла;
// Находим Эком документы по ссылке на заказы.
Запрос = Новый Запрос;
Запрос.Текст = 
    "ВЫБРАТЬ
    |    ЭКОМ_Документы.Ссылка КАК ЭкомДокумент,
    |    ЭКОМ_Документы.Документ1С КАК ЗаказКлиента,
    |    ЭКОМ_Документы.ДатаПоставки КАК ДатаПоставки
    |ИЗ
    |    Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
    |ГДЕ
    |    ЭКОМ_Документы.Документ1С В(&amp;Источник)";
Запрос.УстановитьПараметр("Источник", Источник);
РезультатЗапроса = Запрос.Выполнить().Выгрузить();

// Создаем реализации на основании заказов клиентов и удаляем заказы из дальнейшей обработки.
Для Каждого ДокументИсточник Из МассивЗаказыКлеинта Цикл
    СтрокиИзЗапроса = РезультатЗапроса.НайтиСтроки(Новый Структура("ЗаказКлиента", ДокументИсточник));
    ДатаДокумента = ТекущаяДатаСеанса();
    Для Каждого СтрокаИзЗапроса Из СтрокиИзЗапроса Цикл
        Если ТипЗнч(СтрокаИзЗапроса.ДатаПоставки) = Тип("Дата") И
            ДатаДокумента &gt; СтрокаИзЗапроса.ДатаПоставки Тогда
            ДатаДокумента = СтрокаИзЗапроса.ДатаПоставки; // Для нескоьких документов выбираем наименьшую дату.
        КонецЕсли;
    КонецЦикла;

    ДатаДокумента = ?(ЗагружатьДатойПоставки = Истина, ДатаДокумента, ТекущаяДатаСеанса());

    ПараметрыОснования = Новый Структура();

    ПараметрыОснования.Вставить("ДокументОснование", ДокументИсточник);
    ПараметрыОснования.Вставить("СкладОтгрузки",     ДокументИсточник.Склад);
    ПараметрыОснования.Вставить("ДатаОтгрузки",      ДокументИсточник.ДатаОтгрузки);

    Приемник = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
    Приемник.Заполнить(ПараметрыОснования);
    Приемник.Дата = ДатаДокумента;
    Если НЕ ПустаяСтрока(ДокументИсточник.Комментарий) Тогда
        Приемник.Комментарий = ДокументИсточник.Комментарий;
    Иначе
        Приемник.Комментарий = ?(ЗначениеЗаполнено(ДокументИсточник.НомерПоДаннымКлиента), "Заказ № " + ДокументИсточник.НомерПоДаннымКлиента, "");
        Приемник.Комментарий = Приемник.Комментарий
            + ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(ДокументИсточник.ДатаПоДаннымКлиента), 
            " от " + Формат(ДокументИсточник.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"), "");
    КонецЕсли;
    Приемник.СкидкиРассчитаны = Истина;

    // Заполнение ТЧ Товары.
    Если Приемник.Товары.Количество() = 0 Тогда
        ДанныеОтбора = Новый Структура(
            "Дата,
            |Склад,
            |Партнер,
            |Сделка,
            |Контрагент,
            |Договор,
            |Организация,
            |ХозяйственнаяОперация,
            |Соглашение,
            |ВалютаВзаиморасчетов,
            |НалогообложениеНДС,
            |ЦенаВключаетНДС,
            |ПорядокРасчетов,
            |ВернутьМногооборотнуюТару,
            |ТребуетсяЗалогЗаТару,
            |Статус,
            |НаправлениеДеятельности,
            |Ссылка,
            |Валюта");

        ЗаполнитьЗначенияСвойств(ДанныеОтбора, Приемник);
        ДанныеОтбора.Вставить("ТоварыРеализации", Приемник.Товары);

        ПараметрыЗаполнения = Новый Структура;
        ПараметрыЗаполнения.Вставить("ОтображатьСообщение", Ложь);
        ПараметрыЗаполнения.Вставить("ПодборПоЗаказамОрдерам", Истина);
        ПараметрыЗаполнения.Вставить("Курс", Приемник.Курс);
        ПараметрыЗаполнения.Вставить("Кратность", Приемник.Кратность);

        ТаблицаСкидкиНаценки = Новый ТаблицаЗначений;
        ТаблицаСкидкиНаценки.Колонки.Добавить("Сумма");

        ТЧТовары = Приемник.Товары.Выгрузить();
        ТЧТовары.Колонки.Добавить("КоличествоВЗаказе");
        ТЧТовары.Колонки.Добавить("КоличествоУпаковокВЗаказе");
        ТЧТовары.Колонки.Добавить("КоличествоСобирается");
        ТЧТовары.Колонки.Добавить("КоличествоВОрдере");
        ТЧТовары.Колонки.Добавить("КоличествоУпаковокВОрдере");

		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ДокументИсточник);
        Документы.РеализацияТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
            ДанныеОтбора,
            ТЧТовары,
            ТаблицаСкидкиНаценки,
            Приемник.Склад,
            МассивЗаказов,
            ПараметрыЗаполнения);
        // Удаление строк, не относящихся к текущему заказу.
        КоличествоТоваров = ТЧТовары.Количество();
        Для НомерСтроки = 1 По КоличествоТоваров Цикл
            Индекс = КоличествоТоваров - НомерСтроки;
            Строка = ТЧТовары.Получить(Индекс);
            Если НЕ Строка.ЗаказКлиента = ДокументИсточник Тогда
                ТЧТовары.Удалить(Строка);
            КонецЕсли;
        КонецЦикла;

        Приемник.Товары.Загрузить(ТЧТовары);
    КонецЕсли;

    // Заполнение этапов графика оплаты.
    Приемник.ЗаполнитьЭтапыГрафикаОплаты();

    ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
    Если ОшибокНеОбнаружено Тогда
        НачатьТранзакцию();
        НоваяСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор);
        Приемник.УстановитьСсылкуНового(НоваяСсылка);
        // Запись ссылки в ЭКОМ документ.
        Попытка
            Для Каждого СтрокаИзЗапроса Из СтрокиИзЗапроса Цикл
                Если СтрокаИзЗапроса.ЭкомДокумент.ДокументыСвязанные.Найти(НоваяСсылка, "ДокументСвязанный") = Неопределено Тогда
                    ЭкомДокументОбъект = СтрокаИзЗапроса.ЭкомДокумент.ПолучитьОбъект();
					ЭкомДокументОбъект.НеВыполнятьКодПриЗаписи = Истина;
                    НоваяСтрокаДокументыСвязанные = ЭкомДокументОбъект.ДокументыСвязанные.Добавить();
                    НоваяСтрокаДокументыСвязанные.ДокументСвязанный = НоваяСсылка;
                    ЭкомДокументОбъект.Записать();
                КонецЕсли;
            КонецЦикла;
        Исключение
            ТекстОшибки = НСтр("ru = 'Ошибка записи ссылки на созданный документ в %Источник%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Источник%", Строка(ДокументИсточник));
            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
            ОтменитьТранзакцию();
            Продолжить;
        КонецПопытки;

        Попытка
            Приемник.Записать(?(ПроводитьРеализацию, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
        Исключение
            Ошибка = ОписаниеОшибки();
            ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьРеализацию, "проведения", "записи"));
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", ДокументИсточник.Номер);
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(ДокументИсточник.Дата, "ДФ=dd.MM.yyyy"));
            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
            ОтменитьТранзакцию();
            Продолжить;
        КонецПопытки;
        ЗафиксироватьТранзакцию();
    КонецЕсли;

    ИндексЭлемента = Источник.Найти(ДокументИсточник);
    Если НЕ ИндексЭлемента = Неопределено Тогда
        Источник.Удалить(ИндексЭлемента);
    КонецЕсли;
КонецЦикла;

КолонкиДокумента        = Новый Соответствие;
Для Каждого Колонка Из  Документы.РеализацияТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки().Колонки Цикл
    КолонкиДокумента.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение());
КонецЦикла;
// Получение функциональных опций.
ИспользоватьАвтоматическиеСкидкиВПродажах    = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
ИспользоватьСоглашенияСКлиентами            = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
ИспользоватьУправлениеДоставкой                = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");

УстановитьПривилегированныйРежим(Истина);
// Основной запрос для заполнения шапки документа.
Запрос = Новый Запрос;
Запрос.Текст = 
    "ВЫБРАТЬ
    |    ЭКОМ_Документы.Ссылка КАК Ссылка,
    |    ЭКОМ_Документы.Ссылка.Представление КАК ИсточникПредставление,
    |    ЭКОМ_Документы.Документ1С КАК Реализация,
    |    ЭКОМ_Документы.ТочкаДоставки КАК Партнер,
    |    ЭКОМ_Документы.ТочкаДоставки.Представление КАК ПартнерПредставление,
    |    ЭКОМ_Документы.Контрагент КАК Контрагент,
    |    ЭКОМ_Документы.Организация КАК Организация,
    |    ЭКОМ_Документы.ЗаказНомер КАК НомерПоДаннымКлиента,
    |    ЭКОМ_Документы.ЗаказДата КАК ДатаПоДаннымКлиента,
    |    ЭКОМ_Документы.ФайлНомер КАК ФайлНомер,
    |    ЭКОМ_Документы.ФайлДата КАК ФайлДата,
    |    ИСТИНА КАК СкидкиРассчитаны,
    |    ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг) КАК ВариантыОформленияПродажи,
    |    ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате) КАК Статус,
    |    ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
    |    ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз) КАК СпособДоставки,
    |    ЭКОМ_Документы.ДатаПоставки КАК ДатаПоставки
    |ИЗ
    |    Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
    |ГДЕ
    |    ЭКОМ_Документы.Ссылка В(&amp;Источник)";
Запрос.УстановитьПараметр("Источник", Источник);
РезультатЗапроса = Запрос.Выполнить().Выгрузить();

// Получение данных табличной части Товары.
Запрос = Новый Запрос;
Запрос.Текст = 
    "ВЫБРАТЬ
    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка КАК Ссылка,
    |	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
    |	ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое КАК КоличествоУпаковок,
    |	ЭКОМ_ДокументыТЧ_Товары.Цена КАК Цена,
    |	ЭКОМ_ДокументыТЧ_Товары.ЦенаСНДС КАК ЦенаСНДС,
    |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
    |	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
    |	ЛОЖЬ КАК Отменено
    |ИЗ
    |	Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
    |ГДЕ
    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка В (&amp;Источник)
    |	И ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое &gt; 0";
Запрос.УстановитьПараметр("Источник", Источник);
РезультатЗапросаТЧТовары = Запрос.Выполнить().Выгрузить();

Если ИспользоватьУправлениеДоставкой Тогда
    Запрос = Новый Запрос(
        "ВЫБРАТЬ
        |    КонтактнаяИнформация.Ссылка КАК Ссылка,
        |    КонтактнаяИнформация.Вид.Представление КАК Вид,
        |    КонтактнаяИнформация.Представление КАК АдресДоставки,
        |    КонтактнаяИнформация.ЗначенияПолей КАК АдресДоставкиЗначенияПолей
        |ИЗ
        |    Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
        |ГДЕ
        |    КонтактнаяИнформация.Ссылка В(&amp;Партнер)
        |    И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");

    Запрос.УстановитьПараметр("Партнер", РезультатЗапроса.ВыгрузитьКолонку("Партнер"));
    АдресаПолучателяИзКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
КонецЕсли;

УстановитьПривилегированныйРежим(Ложь);

Для Каждого Запись Из РезультатЗапроса Цикл
    // Берем ранее созданный документ, если он заполнен в Документ1С Эком документа.
    Приемник = ?(ЗначениеЗаполнено(Запись.Реализация), Запись.Реализация.ПолучитьОбъект(), Приемник);
    // Проверка корректности выбора настроек шаблона.
    Если ТипЗнч(Приемник) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
        ТекстОшибки = НСтр("ru = 'Ошибка создания документа на основании %Источник%. Возможно ошибка связана с некорректным заполнением значений ""Колонка источника"" и ""Источник"" в шаблоне.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Источник%", Строка(Запись.Ссылка));
        ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
        Продолжить;
    КонецЕсли;    // Очистка реквизитов документа перед заполнением.
    ЗаполнитьЗначенияСвойств(Приемник, Документы.РеализацияТоваровУслуг.СоздатьДокумент());
    // Автозаполнение документа.
    ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(Приемник, Неопределено);
    // Заполнение реквизитов из запроса.
    ЗаполнитьЗначенияСвойств(Приемник, Запись);
    // Заполнение соглашения и этапов графика оплаты.
    Если ИспользоватьСоглашенияСКлиентами Тогда
        Приемник.ЗаполнитьУсловияПродажПоУмолчанию();
        Если НЕ ЗначениеЗаполнено(Приемник.Соглашение) Тогда
            ТекстОшибки = НСтр("ru = 'Не найдено соглашение для Партнера &lt;%Партнер%&gt;. Докуент не создан'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Партнер%", Запись.ПартнерПредставление);
            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
            Продолжить;
        КонецЕсли;
    КонецЕсли;
    // Заполнение адреса доставки.
    Если ИспользоватьУправлениеДоставкой Тогда
        АдресПолучателя = АдресаПолучателяИзКонтактнойИнформации.НайтиСтроки(Новый Структура("Ссылка, Вид", Приемник.Партнер, "Адрес доставки"));
        ЗаполнитьЗначенияСвойств(Приемник, ?(АдресПолучателя.Количество() &gt; 0, АдресПолучателя.Получить(0), Новый Структура));
    КонецЕсли;
    // Корректировка реквизитов.
    Приемник.Дата = ?(ЗагружатьДатойПоставки = Истина, Запись.ДатаПоставки, ТекущаяДата());
    Приемник.ДатаРаспоряжения = ТекущаяДатаСеанса();
    Приемник.Менеджер = Пользователи.ТекущийПользователь();
    Приемник.Комментарий = ?(ЗначениеЗаполнено(Запись.НомерПоДаннымКлиента), "Заказ № " + Запись.НомерПоДаннымКлиента, "");
    Приемник.Комментарий = Приемник.Комментарий
        + ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(Запись.ДатаПоДаннымКлиента), 
        " от " + Формат(Запись.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"), "");
    // Заполнение ответственных лиц.
    ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Приемник.Организация, КонецДня(ТекущаяДата()));
    Приемник.Руководитель         = ОтветственныеЛица.РуководительСсылка;
    Приемник.ГлавныйБухгалтер     = ОтветственныеЛица.ГлавныйБухгалтерСсылка;
    // Заполнение Товаров.
    Приемник.Товары.Очистить();
    // Подготовка данных для заполнения ТЧ.
    СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Приемник);
    СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Приемник.Склад);
    ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Приемник, Документы.РеализацияТоваровУслуг));
    ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", ,,,Новый КвалификаторыСтроки(50));
    Строка50 = ОписаниеТиповСтрока.ПривестиЗначение("");

    Для Каждого Строка Из РезультатЗапросаТЧТовары.НайтиСтроки(Новый Структура("Ссылка", Запись.Ссылка)) Цикл

        ДанныеДляЗаполнения = Новый Структура;
        Для Каждого Колонка Из КолонкиДокумента Цикл
            ДанныеДляЗаполнения.Вставить(Колонка.Ключ, Колонка.Значение);
        КонецЦикла;
        // Добавление необходимых для выполнения кода значений.
        ДанныеДляЗаполнения.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПустаяСсылка"));
        ДанныеДляЗаполнения.Вставить("Артикул", Строка50);
        ДанныеДляЗаполнения.Вставить("ХарактеристикиИспользуются", Ложь);
        ДанныеДляЗаполнения.Вставить("СкладОбязателен", 0);

        ЗаполнитьЗначенияСвойств(ДанныеДляЗаполнения, Строка, "Номенклатура, КоличествоУпаковок");
        ДанныеДляЗаполнения.Склад = Приемник.Склад;
        // Заполнение реквизитов строки методами конфигурации (пока без цен и сумм).
        СтруктураДействий = Новый Структура;
        СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ДанныеДляЗаполнения.Характеристика);
        СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ДанныеДляЗаполнения.Упаковка);
        СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
        СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Приемник, СкладГруппа));

        Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Приемник.Соглашение) Тогда
            СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Приемник));
        Иначе
            СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Приемник));
        КонецЕсли;
        СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Приемник.НалогообложениеНДС, Приемник.Дата));
        СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Приемник.НалогообложениеНДС);
        СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Приемник.ВернутьМногооборотнуюТару);
        СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
        СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
        СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
        СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ДанныеДляЗаполнения.Склад, ПараметрыУказанияСерий));
        СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
            Приемник.РеализацияПоЗаказам, Приемник.ТребуетсяЗалогЗаТару));
        СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатуры",
            Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));

        СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка"));

        СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
            "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", "Товары"));

        ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеДляЗаполнения, СтруктураДействий, КэшированныеЗначения);

        Цена = 0;
        Если Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
            Цена = Строка.ЦенаСНДС;
        ИначеЕсли НЕ Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
            Цена = Строка.Цена;
        ИначеЕсли Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
            Цена  = Окр((Строка.Цена * (100 + СтавкаНДСЧислом(ДанныеДляЗаполнения.СтавкаНДС))) / 100 , 4);
        ИначеЕсли НЕ Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
            Цена = Окр((Строка.ЦенаСНДС * 100) / (100 + СтавкаНДСЧислом(ДанныеДляЗаполнения.СтавкаНДС)) , 4);
        КонецЕсли;
        ДанныеДляЗаполнения.Цена = Цена;
        // Заполнение сумм методами конфигурации.
        СтруктураДействий = Новый Структура;
        СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
        СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
        СтруктураДействий.Вставить("ПересчитатьСумму");
        СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
        СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));

        ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеДляЗаполнения, СтруктураДействий, КэшированныеЗначения);
        // Перенос данных в строку ТЧ Товары.
        ЗаполнитьЗначенияСвойств(Приемник.Товары.Добавить(), ДанныеДляЗаполнения);

    КонецЦикла;
    // Заполнение порядка оплаты.
    Если Не ЗначениеЗаполнено(Приемник.ПорядокОплаты) Тогда
        ВалютаОплаты            = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Приемник.ФормаОплаты, Приемник.БанковскийСчетОрганизации, Приемник.Касса);
        Приемник.ПорядокОплаты     = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Приемник.Валюта, Приемник.НалогообложениеНДС, ВалютаОплаты);
    КонецЕсли;
    // Заполнение этапов графика оплаты.
    Приемник.ЗаполнитьЭтапыГрафикаОплаты();
    // Проверка и запись документов.
    ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
    Если ОшибокНеОбнаружено Тогда
        НачатьТранзакцию();
        НоваяСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор);
        Приемник.УстановитьСсылкуНового(НоваяСсылка);
        // Запись ссылки в ЭКОМ документ.
        Попытка
            ИсточникОбъект = Запись.Ссылка.ПолучитьОбъект();
            ИсточникОбъект.Документ1С = НоваяСсылка;
            ИсточникОбъект.НеВыполнятьКодПриЗаписи = Истина;
            Если ИсточникОбъект.ДокументыСвязанные.Найти(НоваяСсылка, "ДокументСвязанный") = Неопределено Тогда
                НоваяСтрокаДокументыСвязанные = ИсточникОбъект.ДокументыСвязанные.Добавить();
                НоваяСтрокаДокументыСвязанные.ДокументСвязанный = НоваяСсылка;
            КонецЕсли;
            ИсточникОбъект.Записать();
        Исключение
            ТекстОшибки = НСтр("ru = 'Ошибка записи ссылки на созданный документ в %Источник%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Источник%", Запись.ИсточникПредставление);
            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
            ОтменитьТранзакцию();
            Продолжить;
        КонецПопытки;

        Попытка
            Приемник.Записать(?(ПроводитьРеализацию, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
        Исключение
            Ошибка = ОписаниеОшибки();
            ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьРеализацию, "проведения", "записи"));
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", Запись.ФайлНомер);
            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(Запись.ФайлДата, "ДФ=dd.MM.yyyy"));
            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
            ОтменитьТранзакцию();
            Продолжить;
        КонецПопытки;
        ЗафиксироватьТранзакцию();
    КонецЕсли;
КонецЦикла;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">ДокументЗаказа</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать реализацию товаров</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>