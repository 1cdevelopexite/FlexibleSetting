<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать заказ</Value>
		<Value xsi:type="xs:string">ЭКОМ_Документ_ORDER</Value>
		<Value xsi:type="xs:string">Docrobot Документ</Value>
		<Value xsi:type="xs:string">Заказ покупателя</Value>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ЭКОМ_Документы.Ссылка КАК Ссылка
               |ИЗ
               |	Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
               |ГДЕ
               |	ЭКОМ_Документы.Ссылка = &amp;Источник
               |	И НЕ ЭКОМ_Документы.ПометкаУдаления";
Запрос.УстановитьПараметр("Источник", Источник);
Результат = Запрос.Выполнить();
Если Не Результат.Пустой() Тогда

	// Получение общих для всех документов значений.
	Если КэшированныеЗначения 	= Неопределено Тогда
		КэшированныеЗначения 	= Новый Структура;
	КонецЕсли;

	ПроводитьЗаказ 				= Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("ПроводитьЗаказ", ПроводитьЗаказ) Тогда
		ПроводитьЗаказ 			= Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументЗаказ1СПроведенным");
		КэшированныеЗначения.Вставить("ПроводитьЗаказ", ПроводитьЗаказ);
	КонецЕсли;

	ЗагружатьТекущейДатой 		= Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой) Тогда
		ЗагружатьТекущейДатой 	= Настройка_Параметр_Прочитать("ЭКОМ_ЗаказыЗагружатьТекущейДатой");
		КэшированныеЗначения.Вставить("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой);
	КонецЕсли;

	глТекущийПользователь = Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("глТекущийПользователь", глТекущийПользователь) Тогда
		глТекущийПользователь 	= глЗначениеПеременной("глТекущийПользователь");
		КэшированныеЗначения.Вставить("глТекущийПользователь", глТекущийПользователь);
	КонецЕсли;

	мВалютаРегламентированногоУчета = Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета) Тогда
		мВалютаРегламентированногоУчета 	= глЗначениеПеременной("ВалютаРегламентированногоУчета");
		КэшированныеЗначения.Вставить("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	КонецЕсли;

	ОсновнойСклад = Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("ОсновнойСклад", ОсновнойСклад) Тогда
		ОсновнойСклад	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
		КэшированныеЗначения.Вставить("ОсновнойСклад", ОсновнойСклад);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	// Основной запрос для заполнения шапки документа.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER КАК Ссылка,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.Представление КАК ИсточникПредставление,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.Заказ,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.Дата КАК Дата,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.ТочкаДоставки КАК Грузополучатель,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.Контрагент,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.Контрагент.ОсновноеКонтактноеЛицо КАК ОсновноеКонтактноеЛицо,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.Организация,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.ЗаказНомер КАК НомерВходящегоДокументаЭлектронногоОбмена,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.ЗаказДата КАК ДатаВходящегоДокументаЭлектронногоОбмена,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.ДатаПоставки КАК ДатаОтгрузки,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.ФайлНомер КАК ФайлНомер,
		|	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER.ФайлДата КАК ФайлДата,
		|	ЕСТЬNULL(ЭКОМ_GLN.Контрагент_ЦеныИз1С, ЛОЖЬ) КАК ЦеныИз1С,
		|	КонтактнаяИнформация.Представление КАК АдресДоставки
		|ИЗ
		|	РегистрСведений.ЭКОМ_ЦепочкиДокументовПоставщика КАК ЭКОМ_ЦепочкиДокументовПоставщика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
		|		ПО ЭКОМ_ЦепочкиДокументовПоставщика.Контрагент = ЭКОМ_GLN.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ЭКОМ_ЦепочкиДокументовПоставщика.ТочкаДоставки = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента))
		|ГДЕ
		|	ЭКОМ_ЦепочкиДокументовПоставщика.ORDER В(&amp;Источник)";

	Запрос.УстановитьПараметр("Источник", Источник);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	// Получение данных табличной части Товары.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка КАК Ссылка,
	    |	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
	    |	ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое КАК Количество,
	    |	ЭКОМ_ДокументыТЧ_Товары.Цена КАК Цена,
	    |	ЭКОМ_ДокументыТЧ_Товары.ЦенаСНДС КАК ЦенаСНДС,
	    |	ЭКОМ_ДокументыТЧ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	    |	ЭКОМ_ДокументыТЧ_Товары.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
	    |ИЗ
	    |	Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
	    |ГДЕ
	    |	ЭКОМ_ДокументыТЧ_Товары.Ссылка В(&amp;Источник)
	    |	И ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое &gt; 0";
	Запрос.УстановитьПараметр("Источник", Источник);
	РезультатЗапросаТЧТовары = Запрос.Выполнить().Выгрузить();

	УстановитьПривилегированныйРежим(Ложь);

	Для Каждого Запись Из РезультатЗапроса Цикл
	    // Берем ранее созданный документ, если он заполнен в Документ1С Эком документа.
	    Приемник = ?(ЗначениеЗаполнено(Запись.Заказ), Запись.Заказ.ПолучитьОбъект(), Приемник);
	    // Очистка реквизитов документа перед заполнением.
	    ЗаполнитьЗначенияСвойств(Приемник, Документы.ЗаказПокупателя.СоздатьДокумент());
		// Заполнение шапки.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Приемник, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
	    // Заполнение реквизитов из запроса.
	    ЗаполнитьЗначенияСвойств(Приемник, Запись);
		// Выполняем общие действия для всех документов при изменении Контрагент.
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Приемник, Неопределено);

		Если НЕ ЗначениеЗаполнено(Приемник.КонтактноеЛицоКонтрагента) Тогда
			Приемник.КонтактноеЛицоКонтрагента = Запись.ОсновноеКонтактноеЛицо;
		ИначеЕсли Приемник.КонтактноеЛицоКонтрагента.Владелец &lt;&gt; Приемник.Контрагент Тогда
			Приемник.КонтактноеЛицоКонтрагента = Запись.ОсновноеКонтактноеЛицо;
		КонецЕсли;
		
		Приемник.Дата = ?(ЗагружатьТекущейДатой = Истина, ТекущаяДата(), Приемник.Дата);
		Приемник.ДатаОтгрузки = ?(ЗначениеЗаполнено(Приемник.ДатаОтгрузки) И Приемник.ДатаОтгрузки &lt; НачалоДня(Приемник.Дата),
	        НачалоДня(Приемник.Дата), Приемник.ДатаОтгрузки);
		Приемник.Ответственный = Пользователи.ТекущийПользователь();
	    Приемник.Комментарий = ?(ЗначениеЗаполнено(Запись.НомерВходящегоДокументаЭлектронногоОбмена), "Заказ № " + Запись.НомерВходящегоДокументаЭлектронногоОбмена, "");
	    Приемник.Комментарий = Приемник.Комментарий
	        + ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(Запись.ДатаВходящегоДокументаЭлектронногоОбмена), 
	        " от " + Формат(Запись.ДатаВходящегоДокументаЭлектронногоОбмена, "ДФ=dd.MM.yyyy"), "");
		Приемник.Товары.Очистить();
		Для Каждого Строка Из РезультатЗапросаТЧТовары.НайтиСтроки(Новый Структура("Ссылка", Запись.Ссылка)) Цикл
			СтрокаТабличнойЧасти = Приемник.Товары.Добавить();
			// Заполнение данных строки.
	        ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Строка, "Номенклатура, Количество, ЕдиницаИзмерения, Коэффициент");
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Приемник, "Реализация");
			СтрокаТабличнойЧасти.Размещение = ОсновнойСклад;
			
			Если Запись.ЦеныИз1С Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Приемник, мВалютаРегламентированногоУчета);
			Иначе
				Цена = 0;
		        Если Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
		            Цена = Строка.ЦенаСНДС;
		        ИначеЕсли НЕ Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
		            Цена = Строка.Цена;
		        ИначеЕсли Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
		            Цена  = Окр((Строка.Цена * (100 + СтавкаНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС))) / 100 , 4);
		        ИначеЕсли НЕ Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
		            Цена = Окр((Строка.ЦенаСНДС * 100) / (100 + СтавкаНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС)) , 4);
		        КонецЕсли;
		        СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Приемник);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Приемник);
			// Рассчитываем плановую себестоимость.
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, Приемник, мВалютаРегламентированногоУчета);
		КонецЦикла;
		
		// Проверка и запись документов.
	    ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
	    Если ОшибокНеОбнаружено Тогда
	        Попытка
	            Приемник.Записать(?(ПроводитьЗаказ, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	        Исключение
	            ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки());
	            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьЗаказ, "проведения", "записи"));
	            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", Запись.ФайлНомер);
	            ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(Запись.ФайлДата, "ДФ=dd.MM.yyyy"));
	            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
	            Продолжить;
	        КонецПопытки;
	    КонецЕсли;
	КонецЦикла;
	
Иначе
	ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога("Документ " + Источник + " помечен на удаление, заказ клиента не создан", Перечисления.ЭКОМ_УровниЛогирования.Ошибка, ИмяСобытия);
	МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
КонецЕсли; // проверка пометки удаления источника</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">7</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать заказ</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">5</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">6</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">7</id>
			</item>
		</Value>
	</row>
</ValueTree>
