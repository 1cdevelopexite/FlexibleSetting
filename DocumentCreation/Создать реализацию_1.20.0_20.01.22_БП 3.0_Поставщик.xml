<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать реализацию товаров</Value>
		<Value xsi:type="xs:string">Заказ клиента</Value>
		<Value xsi:type="xs:string">РеализацияТоваровУслуг</Value>
		<Value xsi:type="xs:string">РазделятьРеализации = Настройка_Параметр_Прочитать("ЭКОМ_РазделятьРеализации", Ложь);
	
ИмяДокументаПрименика = "Реализация 1С";

ЭКОМ_СоздаватьДокументРеализация1СПроведенным = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументРеализация1СПроведенным");
ЭКОМ_РеализацияЗагружатьТекущейДатой          = Настройка_Параметр_Прочитать("ЭКОМ_РеализацииСоздаватьДатойПоставки");

ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Приемник.Организация);
ЕстьОшибка = Ложь;

Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	СвязанныеДокументы.Ссылка КАК ЭкомДокумент,
|	СвязанныеДокументы.ДокументСвязанный КАК ЗаказКлиента,
|	СвязанныеДокументы.Ссылка.ДатаПоставки КАК ДатаПоставки,
|	СвязанныеДокументы.Ссылка.ЗаказДата КАК ЗаказДата,
|	СвязанныеДокументы.Ссылка.ЗаказНомер КАК ЗаказНомер
|ИЗ
|	Документ.ЭКОМ_Документы.ДокументыСвязанные КАК СвязанныеДокументы
|ГДЕ
|	СвязанныеДокументы.ДокументСвязанный = &amp;Источник";
Запрос.УстановитьПараметр("Источник", Источник);
ВыборкаЭком = Запрос.Выполнить().Выбрать();
ВыборкаЭком.Следующий();


Запрос.Текст = 
"ВЫБРАТЬ
|	РеализацияТоваровУслуг.Ссылка КАК Накладная,
|	РеализацияТоваровУслуг.Проведен КАК Проведен,
|	РеализацияТоваровУслуг.Представление КАК РеализацияПредставление
|ИЗ
|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
|ГДЕ
|	РеализацияТоваровУслуг.Ссылка = &amp;Ссылка";
Запрос.УстановитьПараметр("Ссылка", Цепочка.ДокументРеализации);
РезультатЗапроса = Запрос.Выполнить();
Выборка = РезультатЗапроса.Выбрать();
Выборка.Следующий();
НакладнаяПроведена		= Выборка.Проведен;  		
Накладная			    = Выборка.Накладная;
РеализацияПредставление = Выборка.РеализацияПредставление;

Если ЗначениеЗаполнено(Накладная) И Не РазделятьРеализации И Не НакладнаяПроведена Тогда   
	Приемник = Накладная.ПолучитьОбъект();
	Приемник.Товары.Очистить();
	
	ОперацияЗапись = Истина;
ИначеЕсли ЗначениеЗаполнено(Накладная) И Не РазделятьРеализации И НакладнаяПроведена Тогда
	НачатьТранзакцию();
	НайденнаяСтрока = ВыборкаЭком.ЭкомДокумент.ДокументыСвязанные.Найти(Накладная, "ДокументСвязанный");
	Если НайденнаяСтрока &lt;&gt; Неопределено И ЕстьОшибка = Ложь Тогда   	
		Попытка
			ЭкомДокументОбъект = ВыборкаЭком.ЭкомДокумент.ПолучитьОбъект();
			ЭкомДокументОбъект.НеВыполнятьКодПриЗаписи = Истина;
			ЭкомДокументОбъект.ДокументыСвязанные.Удалить(НайденнаяСтрока.НомерСтроки - 1);						
			ЭкомДокументОбъект.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = "Ошибка удаления связанного документа реализации: " + РеализацияПредставление + ", помеченного на удаление из " + Строка(ВыборкаЭком.ЭкомДокумент) + "." + 
			+ ОписаниеОшибки() + Символы.ПС;
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		НакладнаяОбъект = Накладная.ПолучитьОбъект();
		НакладнаяОбъект.ПометкаУдаления = Истина;
		НакладнаяОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ЗафиксироватьТранзакцию();
		
		ТекстЛогаСобытий = "Помечен на удаление существующий документ " + РеализацияПредставление + " по заказу № " + ВыборкаЭком.ЗаказНомер + " от " + ВыборкаЭком.ЗаказДата;
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
	Исключение
		ОтменитьТранзакцию();
		ТекстЛогаСобытий = "Не удалось пометить на удаление документ " + РеализацияПредставление + " по заказу № " + ВыборкаЭком.ЗаказНомер + " от " + ВыборкаЭком.ЗаказДата 
							+ Символы.ПС + "Создание нового документа отменено";
		ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий); 
		ЕстьОшибка = Истина;
	КонецПопытки;
КонецЕсли;


Если ЕстьОшибка = Ложь Тогда
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда	
		// Основной запрос для заполнения шапки документа.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуПокупателюДок.Ссылка КАК Заказ,
		|	ЭКОМ_ТочкиДоставки.Адрес КАК АдресТочкиДоставки,
		|	СгруппированнаяЦепочка.ORDERNUMBER КАК ORDERNUMBER,
		|	СгруппированнаяЦепочка.ORDERDATE КАК ORDERDATE,
		|	РеализацияТоваровУслуг.Ссылка КАК Накладная,
		|	СгруппированнаяЦепочка.ORDER.ДатаПоставки КАК ДатаПоставки
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателюДок
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDER КАК ORDER,
		|			МАКСИМУМ(ЭКОМ_ЦепочкиДокументовПоставщика.Заказ) КАК Заказ,
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDERNUMBER КАК ORDERNUMBER,
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDERDATE КАК ORDERDATE
		|		ИЗ
		|			РегистрСведений.ЭКОМ_ЦепочкиДокументовПоставщика КАК ЭКОМ_ЦепочкиДокументовПоставщика
		|		ГДЕ
		|			ЭКОМ_ЦепочкиДокументовПоставщика.Заказ = &amp;ИсточникДокумент
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDER,
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDERNUMBER,
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDERDATE) КАК СгруппированнаяЦепочка
		|		ПО СчетНаОплатуПокупателюДок.Ссылка = СгруппированнаяЦепочка.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ТочкиДоставки КАК ЭКОМ_ТочкиДоставки
		|		ПО СчетНаОплатуПокупателюДок.ДоговорКонтрагента = ЭКОМ_ТочкиДоставки.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО СчетНаОплатуПокупателюДок.Ссылка = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	СчетНаОплатуПокупателюДок.Ссылка = &amp;ИсточникДокумент";
		Запрос.УстановитьПараметр("ИсточникДокумент", Источник);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
	    
		ORDERNUMBER           = Выборка.ORDERNUMBER;
	    ORDERDATE             = Выборка.ORDERDATE;
	    Накладная = Выборка.Накладная;
	    
		// По заказу 1С
		Приемник.Заполнить(Источник.Ссылка);
	    
	Иначе
		// По документу ORDER
		
		// Основной запрос для заполнения шапки документа.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭКОМ_Документы.Ссылка КАК ORDER,
		|	ЕСТЬNULL(ЭКОМ_GLN.Контрагент_ЦеныИз1С, ЛОЖЬ) КАК ИспользоватьЦеныИз1С,
		|	ЭКОМ_ТочкиДоставки.Адрес КАК АдресТочкиДоставки,
		|	СгруппированнаяЦепочка.Накладная КАК Накладная,
		|	ЭКОМ_Документы.ТочкаДоставки КАК ТочкаДоставки,
		|	ЭКОМ_ИнфоПоля.СхемаПодсчета КАК СхемаПодсчета,
		|	СгруппированнаяЦепочка.ORDERDATE КАК ORDERDATE,
		|	СгруппированнаяЦепочка.ORDERNUMBER КАК ORDERNUMBER,
		|	ЭКОМ_Документы.ДатаПоставки КАК ДатаПоставки
		|ИЗ
		|	Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭКОМ_ИнфоПоля КАК ЭКОМ_ИнфоПоля
		|			ПО ЭКОМ_GLN.Контрагент_ФорматЭСФ = ЭКОМ_ИнфоПоля.ФорматУПД
		|		ПО ЭКОМ_Документы.Контрагент = ЭКОМ_GLN.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ТочкиДоставки КАК ЭКОМ_ТочкиДоставки
		|		ПО ЭКОМ_Документы.ТочкаДоставки = ЭКОМ_ТочкиДоставки.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDER КАК ORDER,
		|			МАКСИМУМ(ЭКОМ_ЦепочкиДокументовПоставщика.Накладная) КАК Накладная,
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDERDATE КАК ORDERDATE,
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDERNUMBER КАК ORDERNUMBER
		|		ИЗ
		|			РегистрСведений.ЭКОМ_ЦепочкиДокументовПоставщика КАК ЭКОМ_ЦепочкиДокументовПоставщика
		|		ГДЕ
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDER = &amp;ИсточникДокумент
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDER,
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDERDATE,
		|			ЭКОМ_ЦепочкиДокументовПоставщика.ORDERNUMBER) КАК СгруппированнаяЦепочка
		|		ПО ЭКОМ_Документы.Ссылка = СгруппированнаяЦепочка.ORDER
		|ГДЕ
		|	ЭКОМ_Документы.Ссылка = &amp;ИсточникДокумент";
		Запрос.УстановитьПараметр("ИсточникДокумент", Источник);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ИспользоватьЦеныИз1С  = Выборка.ИспользоватьЦеныИз1С;
		СхемаПодсчетаОбратная = Выборка.СхемаПодсчета;
		ТочкаДоставки         = Выборка.ТочкаДоставки;
		
		ORDERNUMBER           = Выборка.ORDERNUMBER;
	    ORDERDATE             = Выборка.ORDERDATE;
	    Накладная = Выборка.Накладная;

		ЗаполнитьЗначенияСвойств(Приемник, Источник);
		  
		Приемник.Номер                   = Неопределено; // Заполняется системно
		Приемник.ДоговорКонтрагента      = ТочкаДоставки;
		Приемник.ТипЦен                  = Приемник.ДоговорКонтрагента.ТипЦен;
		Приемник.СуммаВключаетНДС        = Приемник.ТипЦен.ЦенаВключаетНДС;
		Приемник.БанковскийСчетОрганизации = ОсновнойБанковскийСчетОрганизацииЗаполнен;
		Если НЕ ЗначениеЗаполнено(Приемник.БанковскийСчетОрганизации) Тогда
			Приемник.БанковскийСчетОрганизации  = Приемник.Организация.ОсновнойБанковскийСчет;	
		КонецЕсли;
		Приемник.Склад = Справочники.Склады.ПолучитьСкладПоУмолчанию();
		
		// Табличная часть
		ЗапросТЧ = Новый Запрос;
		ЗапросТЧ.Текст = 
		"ВЫБРАТЬ
		|	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаИз1С,
		|	ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое КАК КоличествоПоставляемое,
		|	ЭКОМ_ДокументыТЧ_Товары.ЦенаСНДС КАК ЦенаСНДС,
		|	ЭКОМ_ДокументыТЧ_Товары.СтавкаНДС КАК СтавкаНДС,
		|	ЭКОМ_ДокументыТЧ_Товары.Сумма_с_НДС КАК Сумма_с_НДС,
		|	ЭКОМ_ДокументыТЧ_Товары.Цена КАК Цена,
		|	ЭКОМ_ДокументыТЧ_Товары.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&amp;ДатаЗаказа, ТипЦен = &amp;ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО (ЭКОМ_ДокументыТЧ_Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)
		|ГДЕ
		|	ЭКОМ_ДокументыТЧ_Товары.Ссылка = &amp;Ссылка
		|	И НЕ ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое = 0";
		
		ЗапросТЧ.УстановитьПараметр("ТипЦен"    , Приемник.ДоговорКонтрагента.ТипЦен);
		ЗапросТЧ.УстановитьПараметр("ДатаЗаказа", Источник.ЗаказДата);
		ЗапросТЧ.УстановитьПараметр("Ссылка"    , Источник.Ссылка);
		РезультатЗапросаТЧ = ЗапросТЧ.Выполнить();
		ВыборкаТЧ = РезультатЗапросаТЧ.Выбрать();
		Пока ВыборкаТЧ.Следующий() Цикл
			НовСтр = Приемник.Товары.Добавить();        	    	   
			НовСтр.Количество   = ВыборкаТЧ.КоличествоПоставляемое;
			НовСтр.СтавкаНДС    = СтавкаНДССсылка(ВыборкаТЧ.СтавкаНДС);
			НовСтр.Номенклатура = ВыборкаТЧ.Номенклатура;
			
			// Цена из документа или из базы 1С
			Цена = 0;
			Если ИспользоватьЦеныИз1С = Истина 
				И НЕ ВыборкаТЧ.ЦенаИз1С = 0 Тогда
				Цена = ВыборкаТЧ.ЦенаИз1С;
			Иначе
				Если Приемник.СуммаВключаетНДС Тогда
					Цена = ВыборкаТЧ.ЦенаСНДС;
				Иначе
					Цена = ВыборкаТЧ.Цена;		
				КонецЕсли;		
			КонецЕсли;
			
			// Цена без НДС или с НДС
			Если Приемник.СуммаВключаетНДС Тогда
				ЦенаСНДС   = Цена;
				ЦенаБезНДС = Цена/((100 + ВыборкаТЧ.СтавкаНДС)/100);
			Иначе
				ЦенаСНДС   = Цена * ((100 + ВыборкаТЧ.СтавкаНДС)/100);
				ЦенаБезНДС = Цена;
			КонецЕсли;
			
			// Обратная (от цены с НДС)
			Если СхемаПодсчетаОбратная = Истина Тогда 
				СуммаСНДС   = ЦенаСНДС * НовСтр.Количество; 
				СуммаНДС    = Окр(СуммаСНДС / (100 + ВыборкаТЧ.СтавкаНДС) * ВыборкаТЧ.СтавкаНДС, 4);
				СуммаБезНДС = СуммаСНДС - СуммаНДС;
				
				// Прямая (от цены без НДС)
			Иначе	
				СуммаБезНДС = ЦенаБезНДС * НовСтр.Количество;
				СуммаСНДС   = СуммаБезНДС * (100 + ВыборкаТЧ.СтавкаНДС)/100;
				СуммаНДС    = Окр(СуммаСНДС - СуммаБезНДС, 4);
				
			КонецЕсли;
			
			НовСтр.СуммаНДС     = СуммаНДС;
			НовСтр.Цена         = Цена;
			НовСтр.Сумма        = Цена * НовСтр.Количество;			
		КонецЦикла;
	КонецЕсли;

	ДатаПоставки          = Выборка.ДатаПоставки;
	АдресТочкиДоставки    = Выборка.АдресТочкиДоставки;

	ДатаРеализации = ТекущаяДата();
	Если ЭКОМ_РеализацияЗагружатьТекущейДатой = Ложь Тогда
		   Если ЗначениеЗаполнено(ДатаПоставки) Тогда
			ДатаРеализации = ДатаПоставки;
		   КонецЕсли;
	КонецЕсли;

	Приемник.Дата                    = ДатаРеализации;
	Приемник.АдресДоставки           = АдресТочкиДоставки;
	Приемник.Комментарий             = "Заказ №" + ORDERNUMBER + " от " + Формат(ORDERDATE, "ДЛФ=Д");
	Приемник.Ответственный           = ПользователиКлиентСервер.ТекущийПользователь();
	Приемник.КурсВзаиморасчетов      = 1;
	Приемник.КратностьВзаиморасчетов = 1;
	Приемник.ВидОперации             = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
	Приемник.ВалютаДокумента         = Приемник.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Приемник.СпособЗачетаАвансов     = Перечисления.СпособыЗачетаАвансов.Автоматически;

	// Для заполнения счетов
	СтруктураДанныеФормы = "";
	Для Каждого ТекущийРеквизит Из Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты Цикл
		СтруктураДанныеФормы = СтруктураДанныеФормы + ?(ЗначениеЗаполнено(СтруктураДанныеФормы),",","") + ТекущийРеквизит.Имя ;
	КонецЦикла;

	СтруктураПриемник = Новый Структура(СтруктураДанныеФормы);
	ЗаполнитьЗначенияСвойств(СтруктураПриемник, Приемник); 
	СтруктураПриемник.Вставить("Дата", Приемник.Дата);

	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("Объект", СтруктураПриемник);

	КЗаполнению = Новый Соответствие;
	КЗаполнению.Вставить("СчетУчетаРасчетовПоАвансам"    , Истина);
	КЗаполнению.Вставить("СчетУчетаРасчетовСКонтрагентом", Истина);
	КЗаполнению.Вставить("СчетУчетаРасчетовПоТаре"       , Истина);

	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Контрагент");

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДанныеФормы", ДанныеФормы);
	ПараметрыЗаполнения.Вставить("Заполнять", Истина);
	ПараметрыЗаполнения.Вставить("ИмяДокумента", "РеализацияТоваровУслуг");
	ПараметрыЗаполнения.Вставить("КЗаполнению", КЗаполнению);
	ПараметрыЗаполнения.Вставить("НакапливатьИзмененияВФорме", Ложь);
	ПараметрыЗаполнения.Вставить("ПричиныИзменения", ПричиныИзменения); 

	// Шапка документа
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураПриемник);

	// Табличная часть
	СчетаУчетаВДокументах.ЗаполнитьСтроки(Приемник.Товары, "Товары", СтруктураПриемник, Документы.РеализацияТоваровУслуг, Истина);

	Если Приемник.Товары.Количество() = 0 Тогда
		ТекстЛогаСобытий = "Документ Реализация по документу " + Строка(Источник) +
		" не создан, т.к. не заполнены товары, возможно документ был сформирован вручную или весь товар по заказу уже реализован.";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
	Иначе
		НачатьТранзакцию();  	
		ДокументЗаписан = Ложь;
		Попытка
		    Приемник.ПометкаУдаления = Ложь; 
		    Приемник.Записать(?(ЭКОМ_СоздаватьДокументРеализация1СПроведенным, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		    ДокументЗаписан = Истина;	
		Исключение
		    Приемник.Записать(РежимЗаписиДокумента.Запись);
		    ТекстЛогаСобытий = ИмяДокументаПрименика + " по документу " + Строка(Источник.Ссылка) + " не создано!!! " + СокрЛП(ОписаниеОшибки());
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);
			ДокументЗаписан = Истина;
			ОтменитьТранзакцию();
		КонецПопытки;
		
		Если ДокументЗаписан Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("ДокументСвязанный", Приемник.Ссылка);
			НайденныеСтроки = ВыборкаЭком.ЭкомДокумент.ДокументыСвязанные.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Попытка
					ИсточникОбъект = ВыборкаЭком.ЭкомДокумент.ПолучитьОбъект();
					НовСтр = ИсточникОбъект.ДокументыСвязанные.Добавить();
					НовСтр.ДокументСвязанный = Приемник.Ссылка;
					ИсточникОбъект.НеВыполнятьКодПриЗаписи = Истина;
					ИсточникОбъект.Записать();
					
					Приемник.Записать(); // повторно выполняется запись реализации, что бы запустить выполнение подписки ПОСЛЕ привязки РТУ к ЭКОМ документу
				Исключение
					ТекстЛогаСобытий = "Не удалось добавить документ в список связанных к входящему ордеру: " + РеализацияПредставление + " по заказу № " + ВыборкаЭком.ЗаказНомер + " от " + ВыборкаЭком.ЗаказДата + "."
									+ Символы.ПС + "Создание документа ""Реализация товаров и услуг"" отменено.";
					ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий); 
					ОтменитьТранзакцию();
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
		
		Если ЗначениеЗаполнено(Цепочка.ДокументРеализации) И Не РазделятьРеализации И Не НакладнаяПроведена Тогда   
			ТекстЛогаСобытий = "Перезаписан уже существующий документ " + РеализацияПредставление + " по заказу № " + ВыборкаЭком.ЗаказНомер + " от " + ВыборкаЭком.ЗаказДата;
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Успешно, ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		ИначеЕсли РазделятьРеализации И ЗначениеЗаполнено(Цепочка.ДокументРеализации) Тогда
			ТекстЛогаСобытий = "Разделена цепочка по документу " + Строка(Источник) + ". Создан документ " + Строка(Приемник.Ссылка) + ".";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Успешно, ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		КонецЕсли;   		

		
	КонецЕсли;
КонецЕсли; // проверка наличия ошибок	</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">ДокументЗаказа</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать реализацию товаров</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>