<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать реализацию товаров</Value>
		<Value xsi:type="xs:string">Заказ клиента</Value>
		<Value xsi:type="xs:string">Реализация товаров и услуг</Value>
		<Value xsi:type="xs:string">РазделятьРеализации = Настройка_Параметр_Прочитать("ЭКОМ_РазделятьРеализации", Ложь);

Если КэшированныеЗначения = Неопределено Тогда
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
КонецЕсли;
// Получение общих для всех документов значений.
ПроводитьРеализацию			= Неопределено;
Если НЕ КэшированныеЗначения.Свойство("ПроводитьРеализацию", ПроводитьРеализацию) Тогда
	ПроводитьРеализацию		= Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументРеализация1СПроведенным");
	КэшированныеЗначения.Вставить("ПроводитьРеализацию", ПроводитьРеализацию);
КонецЕсли;
ЗагружатьДатойПоставки		= Неопределено;
Если НЕ КэшированныеЗначения.Свойство("ЗагружатьДатойПоставки", ЗагружатьДатойПоставки) Тогда
	ЗагружатьДатойПоставки	= Настройка_Параметр_Прочитать("ЭКОМ_РеализацииСоздаватьДатойПоставки");
	КэшированныеЗначения.Вставить("ЗагружатьДатойПоставки", ЗагружатьДатойПоставки);
КонецЕсли;

// Находим Эком документы по ссылке на заказы.
Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	ЭКОМ_ДокументыДокументыСвязанные.Ссылка КАК ЭкомДокумент,
|	ЭКОМ_ДокументыДокументыСвязанные.ДокументСвязанный КАК ЗаказКлиента,
|	ЭКОМ_ДокументыДокументыСвязанные.Ссылка.ДатаПоставки КАК ДатаПоставки,
|	ЭКОМ_ДокументыДокументыСвязанные.Ссылка.ЗаказДата КАК ЗаказДата,
|	ЭКОМ_ДокументыДокументыСвязанные.Ссылка.ЗаказНомер КАК ЗаказНомер
|ИЗ
|	Документ.ЭКОМ_Документы.ДокументыСвязанные КАК ЭКОМ_ДокументыДокументыСвязанные
|ГДЕ
|	ЭКОМ_ДокументыДокументыСвязанные.ДокументСвязанный = &amp;Источник";

Запрос.УстановитьПараметр("Источник", Источник);

РезультатЗапроса = Запрос.Выполнить().Выгрузить();

// Создаем реализации на основании заказов клиентов и удаляем заказы из дальнейшей обработки.
Для Каждого СтрокаЗапроса Из РезультатЗапроса Цикл
	
	ЗаказДата  = СтрокаЗапроса.ЗаказДата;
	ЗаказНомер = СтрокаЗапроса.ЗаказНомер;
	
	ДатаДокумента = СтрокаЗапроса.ДатаПоставки;
	Если ДатаДокумента &lt; Источник.Дата Тогда
		ДатаДокумента = Источник.Дата + 1; // дата РТУ должна быть больше даты заказа: такое возможно, если в настройках дата заказа = текущая дата и дата РТУ = дата поставки
	КонецЕсли;
	
	ДатаДокумента = ?(ЗагружатьДатойПоставки, ДатаДокумента, ТекущаяДатаСеанса());
	
	ПараметрыОснования = Новый Структура();
	
	ПараметрыОснования.Вставить("ДокументОснование", Источник);
	ПараметрыОснования.Вставить("СкладОтгрузки", Источник.Склад);
	ПараметрыОснования.Вставить("ДатаОтгрузки", Источник.ДатаОтгрузки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Накладная,
	|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	|	РеализацияТоваровУслуг.Представление КАК РеализацияПредставление
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &amp;Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Цепочка.ДокументРеализации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	НакладнаяПроведена		= Выборка.Проведен;  		
	Накладная			    = Выборка.Накладная;
	РеализацияПредставление = Выборка.РеализацияПредставление;
	
	Если ЗначениеЗаполнено(Накладная) И НЕ РазделятьРеализации И НЕ НакладнаяПроведена Тогда   
		ОперацияЗапись = Истина;
		
		Приемник = Накладная.ПолучитьОбъект();
		Приемник.Товары.Очистить();
	ИначеЕсли ЗначениеЗаполнено(Накладная) И НЕ РазделятьРеализации И НакладнаяПроведена Тогда
		НачатьТранзакцию();
		НайденнаяСтрока = СтрокаЗапроса.ЭкомДокумент.ДокументыСвязанные.Найти(Накладная, "ДокументСвязанный");
		Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
			Попытка
				ЭкомДокументОбъект = СтрокаЗапроса.ЭкомДокумент.ПолучитьОбъект();
				ЭкомДокументОбъект.НеВыполнятьКодПриЗаписи = Истина;
				ЭкомДокументОбъект.ДокументыСвязанные.Удалить(НайденнаяСтрока.НомерСтроки - 1);						
				ЭкомДокументОбъект.Записать();
			Исключение
				ОтменитьТранзакцию();
				ТекстОшибки = "Ошибка удаления связанного документа реализации: " + РеализацияПредставление + ", помеченного на удаление из " + Строка(СтрокаЗапроса.ЭкомДокумент) + "." + 
					+ ОписаниеОшибки() + Символы.ПС;
				ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			НакладнаяОбъект = Накладная.ПолучитьОбъект();
			НакладнаяОбъект.ПометкаУдаления = Истина;
			НакладнаяОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			
			ТекстЛогаСобытий = "Помечен на удаление существующий документ " + РеализацияПредставление + " по заказу № " + ЗаказНомер + " от " + ЗаказДата;
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		Исключение
			ОтменитьТранзакцию();
			ТекстЛогаСобытий = "Не удалось пометить на удаление документ " + РеализацияПредставление + " по заказу № " + ЗаказНомер + " от " + ЗаказДата 
								+ Символы.ПС + "Создание нового документа отменено";
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий); 
			Продолжить;
		КонецПопытки;
	КонецЕсли;
	
	Приемник.Заполнить(ПараметрыОснования);
	Приемник.Дата = ДатаДокумента;
	Если НЕ ПустаяСтрока(Источник.Комментарий) Тогда
		Приемник.Комментарий = Источник.Комментарий;
	Иначе
		Приемник.Комментарий = ?(ЗначениеЗаполнено(Источник.НомерПоДаннымКлиента), "Заказ № " + Источник.НомерПоДаннымКлиента, "");
		Приемник.Комментарий = Приемник.Комментарий
		+ ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(Источник.ДатаПоДаннымКлиента), 
		" от " + Формат(Источник.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"), "");
	КонецЕсли;
	
	Приемник.СкидкиРассчитаны = Истина;
	
	// Заполнение ТЧ Товары.
	Если Приемник.Товары.Количество() = 0 Тогда
		ДанныеОтбора = Новый Структура(
		"Дата,
		|Склад,
		|Партнер,
		|Сделка,
		|Контрагент,
		|Договор,
		|Организация,
		|ХозяйственнаяОперация,
		|Соглашение,
		|ВалютаВзаиморасчетов,
		|НалогообложениеНДС,
		|ЦенаВключаетНДС,
		|ПорядокРасчетов,
		|ВернутьМногооборотнуюТару,
		|ТребуетсяЗалогЗаТару,
		|Статус,
		|НаправлениеДеятельности,
		|Ссылка,
		|Валюта");
		
		ЗаполнитьЗначенияСвойств(ДанныеОтбора, Приемник);
		ДанныеОтбора.Вставить("ТоварыРеализации", Приемник.Товары);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ОтображатьСообщение", Ложь);
		ПараметрыЗаполнения.Вставить("ПодборПоЗаказамОрдерам", Истина);
		ПараметрыЗаполнения.Вставить("Курс", Приемник.Курс);
		ПараметрыЗаполнения.Вставить("Кратность", Приемник.Кратность);
		
		ТаблицаСкидкиНаценки = Новый ТаблицаЗначений;
		ТаблицаСкидкиНаценки.Колонки.Добавить("Сумма");
		
		ТЧТовары = Приемник.Товары.Выгрузить();
		ТЧТовары.Колонки.Добавить("КоличествоВЗаказе");
		ТЧТовары.Колонки.Добавить("КоличествоУпаковокВЗаказе");
		ТЧТовары.Колонки.Добавить("КоличествоСобирается");
		ТЧТовары.Колонки.Добавить("КоличествоВОрдере");
		ТЧТовары.Колонки.Добавить("КоличествоУпаковокВОрдере");
		
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(Источник);
		Документы.РеализацияТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
			ДанныеОтбора,
			ТЧТовары,
			ТаблицаСкидкиНаценки,
			Приемник.Склад,
			МассивЗаказов,
			ПараметрыЗаполнения);
		
		Приемник.Товары.Загрузить(ТЧТовары);
	КонецЕсли;
	
	Если Приемник.Товары.Количество() = 0 Тогда
		ТекстЛогаСобытий = "Документ Реализация товаров и услуг по документу " + Строка(Источник) +
			" не создан, т.к. не заполнены товары, возможно документ был сформирован вручную или весь товар по заказу уже реализован.";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		Продолжить;
	КонецЕсли;
	
	// Заполнение этапов графика оплаты.
	Приемник.ЗаполнитьЭтапыГрафикаОплаты();
	
	ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
	Если ОшибокНеОбнаружено Тогда
		НачатьТранзакцию();
		Если ЗначениеЗаполнено(Накладная) И Не НакладнаяПроведена И Не РазделятьРеализации Тогда
			НоваяСсылка = Накладная; 
		Иначе   				
			НоваяСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор);
			Приемник.УстановитьСсылкуНового(НоваяСсылка);
		КонецЕсли;
		// Запись ссылки в ЭКОМ документ.
		Попытка
			Если СтрокаЗапроса.ЭкомДокумент.ДокументыСвязанные.Найти(НоваяСсылка, "ДокументСвязанный") = Неопределено Тогда
				ЭкомДокументОбъект = СтрокаЗапроса.ЭкомДокумент.ПолучитьОбъект();
				ЭкомДокументОбъект.НеВыполнятьКодПриЗаписи = Истина;
				НоваяСтрокаДокументыСвязанные = ЭкомДокументОбъект.ДокументыСвязанные.Добавить();
				НоваяСтрокаДокументыСвязанные.ДокументСвязанный = НоваяСсылка;
				ЭкомДокументОбъект.Записать();
			КонецЕсли;
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка записи ссылки на созданный документ в %Источник%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Источник%", Строка(Источник));
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			Приемник.Записать(?(ПроводитьРеализацию, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Исключение
			Ошибка = ОписаниеОшибки();
			ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьРеализацию, "проведения", "записи"));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", Источник.Номер);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(Источник.Дата, "ДФ=dd.MM.yyyy"));
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
		Если ЗначениеЗаполнено(Накладная) И Не РазделятьРеализации И Не НакладнаяПроведена Тогда   
			ТекстЛогаСобытий = "Перезаписан уже существующий документ " + РеализацияПредставление + " по заказу № " + ЗаказНомер + " от " + ЗаказДата;
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Успешно, ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		ИначеЕсли РазделятьРеализации И ЗначениеЗаполнено(Цепочка.ДокументРеализации) Тогда
			ТекстЛогаСобытий = "Разделена цепочка по заказу " + Строка(Источник) + ". Создан документ " + Строка(Приемник.Ссылка) + ".";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Успешно, ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		КонецЕсли;
		
	КонецЕсли;
	
КонецЦикла;

КолонкиДокумента = Новый Соответствие;
Для Каждого Колонка Из Документы.РеализацияТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки().Колонки Цикл
	КолонкиДокумента.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение());
КонецЦикла;

// Получение функциональных опций.
ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
ИспользоватьУправлениеДоставкой = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");

УстановитьПривилегированныйРежим(Истина);
// Основной запрос для заполнения шапки документа.
Запрос = Новый Запрос;
Запрос.Текст = 
	"ВЫБРАТЬ
	|    ЭКОМ_Документы.Ссылка КАК Ссылка,
	|    ЭКОМ_Документы.Ссылка.Представление КАК ИсточникПредставление,
	|    ЭКОМ_Документы.Документ1С КАК Реализация,
	|    ЭКОМ_Документы.ТочкаДоставки КАК Партнер,
	|    ЭКОМ_Документы.ТочкаДоставки.Представление КАК ПартнерПредставление,
	|    ЭКОМ_Документы.Контрагент КАК Контрагент,
	|    ЭКОМ_Документы.Организация КАК Организация,
	|    ЭКОМ_Документы.ЗаказНомер КАК НомерПоДаннымКлиента,
	|    ЭКОМ_Документы.ЗаказДата КАК ДатаПоДаннымКлиента,
	|    ЭКОМ_Документы.ФайлНомер КАК ФайлНомер,
	|    ЭКОМ_Документы.ФайлДата КАК ФайлДата,
	|    ИСТИНА КАК СкидкиРассчитаны,
	|    ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг) КАК ВариантыОформленияПродажи,
	|    ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате) КАК Статус,
	|    ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
	|    ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз) КАК СпособДоставки,
	|    ЭКОМ_Документы.ДатаПоставки КАК ДатаПоставки
	|ИЗ
	|    Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
	|ГДЕ
	|    ЭКОМ_Документы.Ссылка = &amp;Источник";
	
Запрос.УстановитьПараметр("Источник", Источник);

РезультатЗапроса = Запрос.Выполнить().Выгрузить();

// Получение данных табличной части Товары.
Запрос = Новый Запрос;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭКОМ_ДокументыТЧ_Товары.Ссылка КАК Ссылка,
	|	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
	|	ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое КАК КоличествоУпаковок,
	|	ЭКОМ_ДокументыТЧ_Товары.Цена КАК Цена,
	|	ЭКОМ_ДокументыТЧ_Товары.ЦенаСНДС КАК ЦенаСНДС,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	ЛОЖЬ КАК Отменено
	|ИЗ
	|	Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
	|ГДЕ
	|	ЭКОМ_ДокументыТЧ_Товары.Ссылка = &amp;Источник
	|	И ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое &gt; 0";
	
Запрос.УстановитьПараметр("Источник", Источник);

РезультатЗапросаТЧТовары = Запрос.Выполнить().Выгрузить();

Если ИспользоватьУправлениеДоставкой Тогда
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|    КонтактнаяИнформация.Ссылка КАК Ссылка,
		|    КонтактнаяИнформация.Вид.Представление КАК Вид,
		|    КонтактнаяИнформация.Представление КАК АдресДоставки,
		|    КонтактнаяИнформация.ЗначенияПолей КАК АдресДоставкиЗначенияПолей
		|ИЗ
		|    Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|    КонтактнаяИнформация.Ссылка В(&amp;Партнер)
		|    И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");
	
	Запрос.УстановитьПараметр("Партнер", РезультатЗапроса.ВыгрузитьКолонку("Партнер"));
	
	АдресаПолучателяИзКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
КонецЕсли;

УстановитьПривилегированныйРежим(Ложь);

Для Каждого Запись Из РезультатЗапроса Цикл
	// Берем ранее созданный документ, если он заполнен в Документ1С Эком документа.
	Приемник = ?(ЗначениеЗаполнено(Запись.Реализация), Запись.Реализация.ПолучитьОбъект(), Приемник);
	// Проверка корректности выбора настроек шаблона.
	Если ТипЗнч(Приемник) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка создания документа на основании %Источник%. Возможно ошибка связана с некорректным заполнением значений ""Колонка источника"" и ""Источник"" в шаблоне.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Источник%", Строка(Запись.Ссылка));
		ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
		Продолжить;
	КонецЕсли;    // Очистка реквизитов документа перед заполнением.
	ЗаполнитьЗначенияСвойств(Приемник, Документы.РеализацияТоваровУслуг.СоздатьДокумент());
	// Автозаполнение документа.
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(Приемник, Неопределено);
	// Заполнение реквизитов из запроса.
	ЗаполнитьЗначенияСвойств(Приемник, Запись);
	// Заполнение соглашения и этапов графика оплаты.
	Если ИспользоватьСоглашенияСКлиентами Тогда
		Приемник.ЗаполнитьУсловияПродажПоУмолчанию();
		Если НЕ ЗначениеЗаполнено(Приемник.Соглашение) Тогда
			ТекстОшибки = НСтр("ru = 'Не найдено соглашение для Партнера &lt;%Партнер%&gt;. Докуент не создан'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Партнер%", Запись.ПартнерПредставление);
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
			Продолжить;
		КонецЕсли;
	КонецЕсли;
	// Заполнение адреса доставки.
	Если ИспользоватьУправлениеДоставкой Тогда
		АдресПолучателя = АдресаПолучателяИзКонтактнойИнформации.НайтиСтроки(Новый Структура("Ссылка, Вид", Приемник.Партнер, "Адрес доставки"));
		ЗаполнитьЗначенияСвойств(Приемник, ?(АдресПолучателя.Количество() &gt; 0, АдресПолучателя.Получить(0), Новый Структура));
	КонецЕсли;
	// Корректировка реквизитов.
	Приемник.Дата = ?(ЗагружатьДатойПоставки, Запись.ДатаПоставки, ТекущаяДата());
	Приемник.ДатаРаспоряжения = ТекущаяДатаСеанса();
	Приемник.Менеджер = Пользователи.ТекущийПользователь();
	Приемник.Комментарий = ?(ЗначениеЗаполнено(Запись.НомерПоДаннымКлиента), "Заказ № " + Запись.НомерПоДаннымКлиента, "");
	Приемник.Комментарий = Приемник.Комментарий
	+ ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(Запись.ДатаПоДаннымКлиента), 
	" от " + Формат(Запись.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"), "");
	// Заполнение ответственных лиц.
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Приемник.Организация, КонецДня(ТекущаяДата()));
	Приемник.Руководитель         = ОтветственныеЛица.РуководительСсылка;
	Приемник.ГлавныйБухгалтер     = ОтветственныеЛица.ГлавныйБухгалтерСсылка;
	// Заполнение Товаров.
	Приемник.Товары.Очистить();
	// Подготовка данных для заполнения ТЧ.
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Приемник);
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Приемник.Склад);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Приемник, Документы.РеализацияТоваровУслуг));
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", ,,,Новый КвалификаторыСтроки(50));
	Строка50 = ОписаниеТиповСтрока.ПривестиЗначение("");
	
	Для Каждого Строка Из РезультатЗапросаТЧТовары.НайтиСтроки(Новый Структура("Ссылка", Запись.Ссылка)) Цикл
		
		ДанныеДляЗаполнения = Новый Структура;
		Для Каждого Колонка Из КолонкиДокумента Цикл
			ДанныеДляЗаполнения.Вставить(Колонка.Ключ, Колонка.Значение);
		КонецЦикла;
		// Добавление необходимых для выполнения кода значений.
		ДанныеДляЗаполнения.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПустаяСсылка"));
		ДанныеДляЗаполнения.Вставить("Артикул", Строка50);
		ДанныеДляЗаполнения.Вставить("ХарактеристикиИспользуются", Ложь);
		ДанныеДляЗаполнения.Вставить("СкладОбязателен", 0);
		
		ЗаполнитьЗначенияСвойств(ДанныеДляЗаполнения, Строка, "Номенклатура, КоличествоУпаковок");
		ДанныеДляЗаполнения.Склад = Приемник.Склад;
		// Заполнение реквизитов строки методами конфигурации (пока без цен и сумм).
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ДанныеДляЗаполнения.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ДанныеДляЗаполнения.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Приемник, СкладГруппа));
		
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Приемник.Соглашение) Тогда
			СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Приемник));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Приемник));
		КонецЕсли;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Приемник.НалогообложениеНДС, Приемник.Дата));
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Приемник.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Приемник.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ДанныеДляЗаполнения.Склад, ПараметрыУказанияСерий));
		СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Приемник.РеализацияПоЗаказам, Приемник.ТребуетсяЗалогЗаТару));
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатуры",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
		
		СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение", ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка"));
		
		СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		"Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", "Товары"));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеДляЗаполнения, СтруктураДействий, КэшированныеЗначения);
		
		Цена = 0;
		Если Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
			Цена = Строка.ЦенаСНДС;
		ИначеЕсли НЕ Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
			Цена = Строка.Цена;
		ИначеЕсли Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
			Цена  = Окр((Строка.Цена * (100 + СтавкаНДСЧислом(ДанныеДляЗаполнения.СтавкаНДС))) / 100 , 4);
		ИначеЕсли НЕ Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
			Цена = Окр((Строка.ЦенаСНДС * 100) / (100 + СтавкаНДСЧислом(ДанныеДляЗаполнения.СтавкаНДС)) , 4);
		КонецЕсли;
		ДанныеДляЗаполнения.Цена = Цена;
		// Заполнение сумм методами конфигурации.
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеДляЗаполнения, СтруктураДействий, КэшированныеЗначения);
		// Перенос данных в строку ТЧ Товары.
		ЗаполнитьЗначенияСвойств(Приемник.Товары.Добавить(), ДанныеДляЗаполнения);
		
	КонецЦикла;
	// Заполнение порядка оплаты.
	Если Не ЗначениеЗаполнено(Приемник.ПорядокОплаты) Тогда
		ВалютаОплаты            = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Приемник.ФормаОплаты, Приемник.БанковскийСчет, Приемник.Касса);
		Приемник.ПорядокОплаты     = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Приемник.Валюта, Приемник.НалогообложениеНДС, ВалютаОплаты);
	КонецЕсли;
	// Заполнение этапов графика оплаты.
	Приемник.ЗаполнитьЭтапыГрафикаОплаты();
	// Проверка и запись документов.
	ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
	Если ОшибокНеОбнаружено Тогда
		НачатьТранзакцию();
		НоваяСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Приемник.УстановитьСсылкуНового(НоваяСсылка);
		// Запись ссылки в ЭКОМ документ.
		Попытка
			ИсточникОбъект = Запись.Ссылка.ПолучитьОбъект();
			ИсточникОбъект.Документ1С = НоваяСсылка;
			ИсточникОбъект.НеВыполнятьКодПриЗаписи = Истина;
			Если ИсточникОбъект.ДокументыСвязанные.Найти(НоваяСсылка, "ДокументСвязанный") = Неопределено Тогда
				НоваяСтрокаДокументыСвязанные = ИсточникОбъект.ДокументыСвязанные.Добавить();
				НоваяСтрокаДокументыСвязанные.ДокументСвязанный = НоваяСсылка;
			КонецЕсли;
			ИсточникОбъект.Записать();
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка записи ссылки на созданный документ в %Источник%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Источник%", Запись.ИсточникПредставление);
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			Приемник.Записать(?(ПроводитьРеализацию, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Исключение
			Ошибка = ОписаниеОшибки();
			ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьРеализацию, "проведения", "записи"));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", Запись.ФайлНомер);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(Запись.ФайлДата, "ДФ=dd.MM.yyyy"));
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецЦикла;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">ДокументЗаказа</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать реализацию товаров</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>