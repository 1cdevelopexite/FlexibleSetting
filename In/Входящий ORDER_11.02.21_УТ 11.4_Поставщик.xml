<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Входящий ORDER</Value>
		<Value xsi:type="xs:string">//ВыполнитьГибкиеНастройки(Приемник,,, ЛогСобытий); 

// Новый вариант для использования при создании ЭКОМ_Документа
Если Приемник.xmlВалюта = "UAH" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(980);
ИначеЕсли Приемник.xmlВалюта = "RUB" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(643);
ИначеЕсли Приемник.xmlВалюта = "USD" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(840);
ИначеЕсли Приемник.xmlВалюта = "EUR" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(978);
ИначеЕсли Приемник.xmlВалюта = "MDL" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(498);
ИначеЕсли Приемник.xmlВалюта = "BYR" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(974);
ИначеЕсли Приемник.xmlВалюта = "KZT" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(398);
Иначе
    Валюта = Справочники.Валюты.НайтиПоКоду(643);
КонецЕсли;

Приемник.Валюта = Валюта;

// Поиск правильных единиц измерения, привязанных к этой номенклатуре.
СписокШтрихкодов = Приемник.ТЧ_Товары.ВыгрузитьКолонку("НомерПродукта");

Если КэшированныеЗначения = Неопределено Тогда
    КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
КонецЕсли;

РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, СписокШтрихкодов);

Для Каждого СтрокаТовара Из Приемник.ТЧ_Товары Цикл
    // Получение единицы измерения из РС ШтрихкодыНоменклатуры.
    ЗаписьШтрихкод = КэшированныеЗначения.Штрихкоды.Получить(СтрокаТовара.НомерПродукта);
    Если ЗаписьШтрихкод = Неопределено Тогда
        Продолжить;
    КонецЕсли;

    ЗначениеЕдиницы = Неопределено;
    Если ЗаписьШтрихкод.Номенклатура = СтрокаТовара.Номенклатура Тогда

        СоответствиеЕдиницМеждународныхСокращений = Новый Соответствие;
        // Добавление единицы измерения.
        Если ЗначениеЗаполнено(ЗаписьШтрихкод.ЕдиницаИзмерения)
            И ЗначениеЗаполнено(ЗаписьШтрихкод.ЕдиницаИзмерения.МеждународноеСокращение) Тогда

            СоответствиеЕдиницМеждународныхСокращений.Вставить(ЗаписьШтрихкод.ЕдиницаИзмерения.МеждународноеСокращение, ЗаписьШтрихкод.ЕдиницаИзмерения);
        КонецЕсли;
        // Добавление упаковки.
        ЕдиницаУпаковки = Новый Структура("Ключ, Значение", "", ЗаписьШтрихкод.Упаковка);
        Если ЗначениеЗаполнено(ЗаписьШтрихкод.Упаковка) Тогда
            Упаковка = ЗаписьШтрихкод.Упаковка;
            Пока ЗначениеЗаполнено(Упаковка.ЕдиницаИзмерения) Цикл
                ЕдиницаУпаковки.Ключ = Упаковка.ЕдиницаИзмерения.МеждународноеСокращение;
                Упаковка = Упаковка.ЕдиницаИзмерения;
            КонецЦикла;
        КонецЕсли;
        Если ЗначениеЗаполнено(ЕдиницаУпаковки.Значение)
            И ЗначениеЗаполнено(ЕдиницаУпаковки.Ключ) Тогда
            СоответствиеЕдиницМеждународныхСокращений.Вставить(ЕдиницаУпаковки.Ключ, ЕдиницаУпаковки.Значение);
        КонецЕсли;

        ЗначениеЕдиницы = СоответствиеЕдиницМеждународныхСокращений.Получить(СтрокаТовара.xmlЕдиницаИзмерения);

    КонецЕсли;

    ЕдиницаНайдена = Ложь;
    Если ЗначениеЕдиницы = Неопределено Тогда
        // Поиск единицы измерений по сопоставлению имени.
        СоответствиеЕдиницМеждународныхСокращений = Новый Соответствие;
        ПараметрыВыбораУпаковки = Новый Структура();
        ПараметрыВыбораУпаковки.Вставить("Номенклатура", СтрокаТовара.Номенклатура);

        ДанныеВыбораУпаковок = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьДанныеВыбора(ПараметрыВыбораУпаковки);

        Для Каждого ЭлементСпискаЗначений из ДанныеВыбораУпаковок Цикл
            // Если ЭлементСпискаЗначений.Значение.Значение.ЕдиницаИзмерения.МеждународноеСокращение = СтрокаТовара.xmlЕдиницаИзмерения
            Если ТипЗнч(ЭлементСпискаЗначений.Значение) = Тип("Структура") Тогда
                ЕдиницаУпаковки = Новый Структура("Ключ, Значение", "", ЭлементСпискаЗначений.Значение.Значение);

                Если ЗначениеЗаполнено(ЭлементСпискаЗначений.Значение.Значение) Тогда
                    Упаковка = ЭлементСпискаЗначений.Значение.Значение;
                    Пока ЗначениеЗаполнено(Упаковка.ЕдиницаИзмерения) Цикл
                        ЕдиницаУпаковки.Ключ = Упаковка.ЕдиницаИзмерения.МеждународноеСокращение;
                        Упаковка = Упаковка.ЕдиницаИзмерения;
                    КонецЦикла;
                КонецЕсли;

                Если ЗначениеЗаполнено(ЕдиницаУпаковки.Значение)
                    И ЗначениеЗаполнено(ЕдиницаУпаковки.Ключ) Тогда
                    СоответствиеЕдиницМеждународныхСокращений.Вставить(ЕдиницаУпаковки.Ключ, ЕдиницаУпаковки.Значение);
                КонецЕсли;
            ИначеЕсли НЕ ЗначениеЗаполнено(ЭлементСпискаЗначений.Значение) // Это базовая единица измерения
                И ЭлементСпискаЗначений.Представление = Строка(СтрокаТовара.ЕдиницаИзмерения)
                И СтрокаТовара.xmlЕдиницаИзмерения = СтрокаТовара.ЕдиницаИзмерения.МеждународноеСокращение Тогда
                СоответствиеЕдиницМеждународныхСокращений.Вставить(СтрокаТовара.xmlЕдиницаИзмерения, СтрокаТовара.ЕдиницаИзмерения);
            КонецЕсли;

            ЗначениеЕдиницы = СоответствиеЕдиницМеждународныхСокращений.Получить(СтрокаТовара.xmlЕдиницаИзмерения);
            Если НЕ ЗначениеЕдиницы = Неопределено Тогда
                СтрокаТовара.ЕдиницаИзмерения = ЗначениеЕдиницы;
                ЕдиницаНайдена = Истина;
            КонецЕсли;

        КонецЦикла;
    Иначе
        СтрокаТовара.ЕдиницаИзмерения = ЗначениеЕдиницы;
        ЕдиницаНайдена = Истина;
    КонецЕсли;

    Если НЕ ЕдиницаНайдена Тогда
        // Сообщить об ошибке.
        ТекстОшибки = "В строке № %НомерСтроки% не сопоставлена единица измерения либо указанная единица измерения не принадлежит данной номенклатуре";
        ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаТовара.НомерСтроки);
        Приемник.ТекстОшибки = Приемник.ТекстОшибки + ?(ПустаяСтрока(Приемник.ТекстОшибки), "", ";" + Символы.ПС) + ТекстОшибки;
    КонецЕсли;

КонецЦикла;

Если ВРег(Приемник.ТипДокумента) = "D" Тогда

    Если ЗначениеЗаполнено(Приемник.Документ1С) И ТипЗнч(Приемник.Документ1С) = Тип("ДокументСсылка.ЗаказКлиента")
        И НЕ Приемник.Документ1С.Проведен Тогда

        ЗаказОбъект = Приемник.Документ1С.ПолучитьОбъект();
        ЗаказОбъект.УстановитьПометкуУдаления(Истина);
    КонецЕсли;

ИначеЕсли  ВРег(Приемник.ТипДокумента) = "R" Тогда

    Если ЗначениеЗаполнено(Приемник.Документ1С) И ТипЗнч(Приемник.Документ1С) = Тип("ДокументСсылка.ЗаказКлиента")
        И НЕ Приемник.Документ1С.Проведен Тогда

        ЗаказОбъект = Приемник.Документ1С.ПолучитьОбъект();

        ЗаказОбъект.Товары.Очистить();
        Для Каждого СтрокаТЧ Из Приемник.ТЧ_Товары Цикл
            ТекущаяСтрока = ЗаказОбъект.Товары.Добавить();

            ТекущаяСтрока.КоличествоУпаковок    = СтрокаТЧ.КоличествоЗаказанное;
            ТекущаяСтрока.Количество            = СтрокаТЧ.КоличествоЗаказанное;
            Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда

                ТекущаяСтрока.Номенклатура            = СтрокаТЧ.Номенклатура;

                //Получение цены
                //Получим значение настройки ЦеныИз1С для контрагента 
                ЗапросЦеныИз1С = РегистрыСведений.ЭКОМ_GLN.СоздатьМенеджерЗаписи();
                ЗапросЦеныИз1С.Объект = ЗаказОбъект.Контрагент;
                ЗапросЦеныИз1С.Прочитать();
                ЦеныИз1С = ЗапросЦеныИз1С.Контрагент_ЦеныИз1С;

                Цена = 0;
                Если ЦеныИз1С Тогда 
                    ЗапросЦены = Новый Запрос;
                    ЗапросЦены.Текст = 
                    "ВЫБРАТЬ
                    |    ЕСТЬNULL(СоглашенияСКлиентом.Номенклатура, ЦеныНоменклатуры.Номенклатура) КАК Номенклатура,
                    |    ЕСТЬNULL(СоглашенияСКлиентом.Цена, ЦеныНоменклатуры.Цена) КАК Цена
                    |ИЗ
                    |    (ВЫБРАТЬ
                    |        ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
                    |        ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
                    |        ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
                    |        ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
                    |    ИЗ
                    |        РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&amp;ДатаЗаказа, ВидЦены = &amp;ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
                    |    ГДЕ
                    |        ЦеныНоменклатурыСрезПоследних.Номенклатура = &amp;Номенклатура) КАК ЦеныНоменклатуры
                    |        ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                    |            СоглашенияСКлиентамиТовары.Номенклатура КАК Номенклатура,
                    |            СоглашенияСКлиентамиТовары.Характеристика КАК Характеристика,
                    |            СоглашенияСКлиентамиТовары.Упаковка КАК Упаковка,
                    |            СоглашенияСКлиентамиТовары.Цена КАК Цена
                    |        ИЗ
                    |            Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
                    |        ГДЕ
                    |            СоглашенияСКлиентамиТовары.Ссылка = &amp;СоглашенияСКлиентами
                    |            И СоглашенияСКлиентамиТовары.Номенклатура = &amp;Номенклатура) КАК СоглашенияСКлиентом
                    |        ПО (СоглашенияСКлиентом.Номенклатура = ЦеныНоменклатуры.Номенклатура)
                    |            И (ЦеныНоменклатуры.Характеристика = СоглашенияСКлиентом.Характеристика)
                    |            И (ЦеныНоменклатуры.Упаковка = СоглашенияСКлиентом.Упаковка)";

                    ЗапросЦены.УстановитьПараметр("СоглашенияСКлиентами", ЗаказОбъект.Соглашение);
                    ЗапросЦены.УстановитьПараметр("ВидЦены"                , ЗаказОбъект.Соглашение.ВидЦен);
                    ЗапросЦены.УстановитьПараметр("ДатаЗаказа"            , Приемник.ЗаказДата);
                    ЗапросЦены.УстановитьПараметр("Номенклатура"        , СтрокаТЧ.Номенклатура);

                    РезультатЗапроса = ЗапросЦены.Выполнить();

                    ВыборкаЦены = РезультатЗапроса.Выбрать();

                    Пока ВыборкаЦены.Следующий() Цикл
                        Цена = ВыборкаЦены.Цена;
                    КонецЦикла;

                    Если Цена = 0 ИЛИ Цена = NULL Тогда
                        Цена = СтрокаТЧ.ЦенаСНДС;
                    КонецЕсли;
                Иначе
                    Цена = СтрокаТЧ.ЦенаСНДС;
                КонецЕсли;

                ТекущаяСтрока.Цена    = Цена;

                Если НЕ СтрокаТЧ.СтавкаНДС = 0 Тогда
                    СтавкаНДС = СтавкаНДССсылка(СтрокаТЧ.СтавкаНДС);
                Иначе
                    СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
                КонецЕсли;

                ТекущаяСтрока.СтавкаНДС    = СтавкаНДС; 


                ТекущаяСтрока.ДатаОтгрузки = ЗаказОбъект.ЖелаемаяДатаОтгрузки;
                ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
                ТекущаяСтрока.Склад = ЗаказОбъект.Склад;

                //Пока ставим вид цены Произвольный
                ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();

                СтавкаНДС = СтавкаНДСЧислом(ТекущаяСтрока.СтавкаНДС)/100;

                Если ЗаказОбъект.ЦенаВключаетНДС Тогда
                    СуммаСНДС = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
                    СуммаБезНДС = СуммаСНДС/ (1 + СтавкаНДС);
                    ТекущаяСтрока.СуммаНДС = СуммаБезНДС * СтавкаНДС;    
                    ТекущаяСтрока.Сумма = СуммаСНДС;
                    ТекущаяСтрока.СуммаСНДС = СуммаСНДС;
                Иначе
                    ТекущаяСтрока.СуммаНДС = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок * СтавкаНДС;
                    ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
                    ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаНДС;
                КонецЕсли;
            КонецЕсли;    
        КонецЦикла;    

        ЗаказОбъект.Записать(?(ЗаказОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));

        //ЛогСобытий = ЛогСобытий + Символы.ПС + "Документ ORDER содержит тег DOCTYPE=R, документ " + Строка(Заказ) + " перезаполнен!!!";

    КонецЕсли;    

КонецЕсли;

Если Приемник.НеЗагружатьДокумент = Ложь Тогда
    Попытка
        ЗаписатьДокумент(Приемник, РежимЗаписиДокумента.Проведение, Новый Структура("ПометкаУдаления", Ложь));
    Исключение
        ЗаписатьЛогСобытий(ЛогСобытий, ОписаниеОшибки());
    КонецПопытки;
КонецЕсли;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Заказы покупателей (ORDER)</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Заказы покупателей (ORDER)</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>