<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Входящий ORDER</Value>
		<Value xsi:type="xs:string">//ВыполнитьГибкиеНастройки(Приемник,,, ЛогСобытий); 

// Новый вариант для использования при создании ЭКОМ_Документа
Если Приемник.xmlВалюта = "UAH" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(980);
ИначеЕсли Приемник.xmlВалюта = "RUB" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(643);
ИначеЕсли Приемник.xmlВалюта = "USD" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(840);
ИначеЕсли Приемник.xmlВалюта = "EUR" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(978);
ИначеЕсли Приемник.xmlВалюта = "MDL" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(498);
ИначеЕсли Приемник.xmlВалюта = "BYR" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(974);
ИначеЕсли Приемник.xmlВалюта = "KZT" Тогда
    Валюта = Справочники.Валюты.НайтиПоКоду(398);
Иначе
    Валюта = Справочники.Валюты.НайтиПоКоду(643);
КонецЕсли;

Приемник.Валюта = Валюта;

Если Приемник.ТипДокумента = "D" Тогда
    ЗапросЦепочки = Новый Запрос;
    ЗапросЦепочки.Текст = "ВЫБРАТЬ
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.ORDERDATE КАК ORDERDATE,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.xmlОрганизация КАК xmlОрганизация,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.xmlКонтрагент КАК xmlКонтрагент,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.xmlТочкаДоставки КАК xmlТочкаДоставки,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.ORDERNUMBER КАК ORDERNUMBER,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.ORDER КАК ORDER,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.Заказ КАК Заказ,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.Накладная КАК Накладная
                          |ИЗ
                          |    РегистрСведений.ЭКОМ_ЦепочкиДокументовПоставщика КАК ЭКОМ_ЦепочкиДокументовПоставщика
                          |ГДЕ
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.ORDERDATE = &amp;ORDERDATE
                          |    И ЭКОМ_ЦепочкиДокументовПоставщика.xmlОрганизация = &amp;xmlОрганизация
                          |    И ЭКОМ_ЦепочкиДокументовПоставщика.xmlКонтрагент = &amp;xmlКонтрагент
                          |    И ЭКОМ_ЦепочкиДокументовПоставщика.xmlТочкаДоставки = &amp;xmlТочкаДоставки
                          |    И ЭКОМ_ЦепочкиДокументовПоставщика.ORDERNUMBER = &amp;ORDERNUMBER";
    ЗапросЦепочки.УстановитьПараметр("ORDERDATE", Приемник.ЗаказДата);
    ЗапросЦепочки.УстановитьПараметр("xmlОрганизация", Приемник.xmlОрганизация);
    ЗапросЦепочки.УстановитьПараметр("xmlКонтрагент", Приемник.xmlКонтрагент);
    ЗапросЦепочки.УстановитьПараметр("xmlТочкаДоставки", Приемник.xmlТочкаДоставки);
    ЗапросЦепочки.УстановитьПараметр("ORDERNUMBER", Приемник.ЗаказНомер);

    РезультатЗапрос = ЗапросЦепочки.Выполнить().Выгрузить();

    Если РезультатЗапрос.Количество() > 0 Тогда
        ORDER        = РезультатЗапрос[0].ORDER;
        Заказ        = РезультатЗапрос[0].Заказ;
        Накладная    = РезультатЗапрос[0].Накладная;

        Если ЗначениеЗаполнено(Накладная) Тогда
            ЛогСобытий = ЛогСобытий + Символы.ПС + "Документ ORDER содержит тег DOCTYPE=D, но в цепочке уже создана Реализация, отмена ORDER не возможна!!!";
        ИначеЕсли ЗначениеЗаполнено(Заказ) Тогда
            ЗаказОбъект = Заказ.ПолучитьОбъект();
            ЗаказОбъект.УстановитьПометкуУдаления(Истина);

            Приемник.ПометкаУдаления = Истина;

            НаборыЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
            НаборыЗаписей.Отбор.ORDERDATE.Установить(Приемник.ЗаказДата);
            НаборыЗаписей.Отбор.xmlОрганизация.Установить(Приемник.xmlОрганизация);
            НаборыЗаписей.Отбор.xmlКонтрагент.Установить(Приемник.xmlКонтрагент);
            НаборыЗаписей.Отбор.xmlТочкаДоставки.Установить(Приемник.xmlТочкаДоставки);
            НаборыЗаписей.Отбор.ORDERNUMBER.Установить(Приемник.ЗаказНомер);
            НаборыЗаписей.Отбор.ORDER.Установить(ORDER);
            НаборыЗаписей.Прочитать();

            Если НаборыЗаписей.Количество() > 0 Тогда
                НаборЗаписей = НаборыЗаписей[0];
                НаборЗаписей.Заказ = Неопределено;
                НаборыЗаписей.Записать();
            КонецЕсли;    

            ЛогСобытий = ЛогСобытий + Символы.ПС + "Документ ORDER содержит тег DOCTYPE=D, документ Заказ помечен на удаление.";
        КонецЕсли;    

    КонецЕсли;    

ИначеЕсли  Приемник.ТипДокумента = "R" Тогда
    ЗапросЦепочки = Новый Запрос;
    ЗапросЦепочки.Текст = "ВЫБРАТЬ
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.ORDERDATE КАК ORDERDATE,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.xmlОрганизация КАК xmlОрганизация,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.xmlКонтрагент КАК xmlКонтрагент,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.xmlТочкаДоставки КАК xmlТочкаДоставки,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.ORDERNUMBER КАК ORDERNUMBER,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.ORDER КАК ORDER,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.Заказ КАК Заказ,
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.Накладная КАК Накладная
                          |ИЗ
                          |    РегистрСведений.ЭКОМ_ЦепочкиДокументовПоставщика КАК ЭКОМ_ЦепочкиДокументовПоставщика
                          |ГДЕ
                          |    ЭКОМ_ЦепочкиДокументовПоставщика.ORDERDATE = &amp;ORDERDATE
                          |    И ЭКОМ_ЦепочкиДокументовПоставщика.xmlОрганизация = &amp;xmlОрганизация
                          |    И ЭКОМ_ЦепочкиДокументовПоставщика.xmlКонтрагент = &amp;xmlКонтрагент
                          |    И ЭКОМ_ЦепочкиДокументовПоставщика.xmlТочкаДоставки = &amp;xmlТочкаДоставки
                          |    И ЭКОМ_ЦепочкиДокументовПоставщика.ORDERNUMBER = &amp;ORDERNUMBER";
    ЗапросЦепочки.УстановитьПараметр("ORDERDATE", Приемник.ЗаказДата);
    ЗапросЦепочки.УстановитьПараметр("xmlОрганизация", Приемник.xmlОрганизация);
    ЗапросЦепочки.УстановитьПараметр("xmlКонтрагент", Приемник.xmlКонтрагент);
    ЗапросЦепочки.УстановитьПараметр("xmlТочкаДоставки", Приемник.xmlТочкаДоставки);
    ЗапросЦепочки.УстановитьПараметр("ORDERNUMBER", Приемник.ЗаказНомер);

    РезультатЗапрос = ЗапросЦепочки.Выполнить().Выгрузить();

    Если РезультатЗапрос.Количество() > 0 Тогда
        ORDER        = РезультатЗапрос[0].ORDER;
        Заказ        = РезультатЗапрос[0].Заказ;
        Накладная    = РезультатЗапрос[0].Накладная;

        Если ЗначениеЗаполнено(Накладная) Тогда
            ЛогСобытий = ЛогСобытий + Символы.ПС + "Документ ORDER содержит тег DOCTYPE=R, но в цепочке уже создана Реализация, корректировка " + Строка(Заказ) + " не возможна!!!";
        ИначеЕсли ЗначениеЗаполнено(Заказ) Тогда
            ЗаказОбъект = Заказ.ПолучитьОбъект();

            ЗаказОбъект.Товары.Очистить();
            Для Каждого СтрокаТЧ Из Приемник.ТЧ_Товары Цикл
                ТекущаяСтрока = ЗаказОбъект.Товары.Добавить();

                ТекущаяСтрока.КоличествоУпаковок    = СтрокаТЧ.КоличествоЗаказанное;
                ТекущаяСтрока.Количество            = СтрокаТЧ.КоличествоЗаказанное;
                Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда

                    ТекущаяСтрока.Номенклатура            = СтрокаТЧ.Номенклатура;

                    //Получение цены
                    //Получим значение настройки ЦеныИз1С для контрагента 
                    ЗапросЦеныИз1С = РегистрыСведений.ЭКОМ_GLN.СоздатьМенеджерЗаписи();
                    ЗапросЦеныИз1С.Объект = ЗаказОбъект.Контрагент;
                    ЗапросЦеныИз1С.Прочитать();
                    ЦеныИз1С = ЗапросЦеныИз1С.Контрагент_ЦеныИз1С;

                    Цена = 0;
                    Если ЦеныИз1С Тогда 
                        ЗапросЦены = Новый Запрос;
                        ЗапросЦены.Текст = 
                        "ВЫБРАТЬ
                        |    ЕСТЬNULL(СоглашенияСКлиентом.Номенклатура, ЦеныНоменклатуры.Номенклатура) КАК Номенклатура,
                        |    ЕСТЬNULL(СоглашенияСКлиентом.Цена, ЦеныНоменклатуры.Цена) КАК Цена
                        |ИЗ
                        |    (ВЫБРАТЬ
                        |        ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
                        |        ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
                        |        ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
                        |        ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
                        |    ИЗ
                        |        РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&amp;ДатаЗаказа, ВидЦены = &amp;ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
                        |    ГДЕ
                        |        ЦеныНоменклатурыСрезПоследних.Номенклатура = &amp;Номенклатура) КАК ЦеныНоменклатуры
                        |        ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                        |            СоглашенияСКлиентамиТовары.Номенклатура КАК Номенклатура,
                        |            СоглашенияСКлиентамиТовары.Характеристика КАК Характеристика,
                        |            СоглашенияСКлиентамиТовары.Упаковка КАК Упаковка,
                        |            СоглашенияСКлиентамиТовары.Цена КАК Цена
                        |        ИЗ
                        |            Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
                        |        ГДЕ
                        |            СоглашенияСКлиентамиТовары.Ссылка = &amp;СоглашенияСКлиентами
                        |            И СоглашенияСКлиентамиТовары.Номенклатура = &amp;Номенклатура) КАК СоглашенияСКлиентом
                        |        ПО (СоглашенияСКлиентом.Номенклатура = ЦеныНоменклатуры.Номенклатура)
                        |            И (ЦеныНоменклатуры.Характеристика = СоглашенияСКлиентом.Характеристика)
                        |            И (ЦеныНоменклатуры.Упаковка = СоглашенияСКлиентом.Упаковка)";

                        ЗапросЦены.УстановитьПараметр("СоглашенияСКлиентами", ЗаказОбъект.Соглашение);
                        ЗапросЦены.УстановитьПараметр("ВидЦены"                , ЗаказОбъект.Соглашение.ВидЦен);
                        ЗапросЦены.УстановитьПараметр("ДатаЗаказа"            , Приемник.ЗаказДата);
                        ЗапросЦены.УстановитьПараметр("Номенклатура"        , СтрокаТЧ.Номенклатура);

                        РезультатЗапроса = ЗапросЦены.Выполнить();

                        ВыборкаЦены = РезультатЗапроса.Выбрать();

                        Пока ВыборкаЦены.Следующий() Цикл
                            Цена = ВыборкаЦены.Цена;
                        КонецЦикла;

                        Если Цена = 0 ИЛИ Цена = NULL Тогда
                            Цена = СтрокаТЧ.ЦенаСНДС;
                        КонецЕсли;
                    Иначе
                        Цена = СтрокаТЧ.ЦенаСНДС;
                    КонецЕсли;

                    ТекущаяСтрока.Цена    = Цена;

                    Если НЕ СтрокаТЧ.СтавкаНДС = 0 Тогда
                        СтавкаНДС = СтавкаНДССсылка(СтрокаТЧ.СтавкаНДС);
                    Иначе
                        СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
                    КонецЕсли;

                    ТекущаяСтрока.СтавкаНДС    = СтавкаНДС; 


                    ТекущаяСтрока.ДатаОтгрузки = ЗаказОбъект.ЖелаемаяДатаОтгрузки;
                    ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
                    ТекущаяСтрока.Склад = ЗаказОбъект.Склад;

                    //Пока ставим вид цены Произвольный
                    ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();

                    СтавкаНДС = СтавкаНДСЧислом(ТекущаяСтрока.СтавкаНДС)/100;

                    Если ЗаказОбъект.ЦенаВключаетНДС Тогда
                        СуммаСНДС = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
                        СуммаБезНДС = СуммаСНДС/ (1 + СтавкаНДС);
                        ТекущаяСтрока.СуммаНДС = СуммаБезНДС * СтавкаНДС;    
                        ТекущаяСтрока.Сумма = СуммаСНДС;
                        ТекущаяСтрока.СуммаСНДС = СуммаСНДС;
                    Иначе
                        ТекущаяСтрока.СуммаНДС = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок * СтавкаНДС;
                        ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
                        ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаНДС;
                    КонецЕсли;
                КонецЕсли;    
            КонецЦикла;    

            ЗаказОбъект.Записать(?(ЗаказОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));

            ЛогСобытий = ЛогСобытий + Символы.ПС + "Документ ORDER содержит тег DOCTYPE=R, документ " + Строка(Заказ) + " перезаполнен!!!";

        КонецЕсли;    

    КонецЕсли;    
КонецЕсли;

Если Приемник.НеЗагружатьДокумент = Ложь Тогда
    Попытка
        ЗаписатьДокумент(Приемник, РежимЗаписиДокумента.Проведение, Новый Структура("ПометкаУдаления", Ложь));
    Исключение
        ЗаписатьЛогСобытий(ЛогСобытий, ОписаниеОшибки());
    КонецПопытки;
КонецЕсли;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Заказы покупателей (ORDER)</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Заказы покупателей (ORDER)</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>