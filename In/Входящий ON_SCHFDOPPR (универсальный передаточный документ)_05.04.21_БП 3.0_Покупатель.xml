<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Входящий ON_SCHFDOPPR (универсальный передаточный документ)</Value>
		<Value xsi:type="xs:string"> // Для тестирования
 //ВыполнитьГибкиеНастройки(Приемник, , СтруктураДокумента, ЛогСобытий);
 
 Приемник.Валюта = Справочники.Валюты.НайтиПоКоду(Приемник.xmlВалюта);

 // Для получения ссылки документа и цепочки
 Приемник.Записать();
 
 Если НЕ ЗначениеЗаполнено(Приемник.ЗаказДата)
	 ИЛИ НЕ ЗначениеЗаполнено(Приемник.ЗаказНомер)
	 ИЛИ НЕ ЗначениеЗаполнено(Приемник.ТочкаДоставки)
	 ИЛИ НЕ ЗначениеЗаполнено(Приемник.ДатаПоставки) Тогда
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ЭКОМ_ЦепочкиДокументовПокупателя.ORDERDATE КАК ORDERDATE,
	 |	ЭКОМ_ЦепочкиДокументовПокупателя.ORDERNUMBER КАК ORDERNUMBER,
	 |	ЭКОМ_ЦепочкиДокументовПокупателя.ТочкаДоставки КАК ТочкаДоставки,
	 |	ЭКОМ_ЦепочкиДокументовПокупателя.ДатаПоставки КАК ДатаПоставки
	 |ИЗ
	 |	РегистрСведений.ЭКОМ_ЦепочкиДокументовПокупателя КАК ЭКОМ_ЦепочкиДокументовПокупателя
	 |ГДЕ
	 |	ЭКОМ_ЦепочкиДокументовПокупателя.ЮЗД = &amp;ЮЗД";
	 
	 Запрос.УстановитьПараметр("ЮЗД", Приемник.Ссылка);	 
	 РезультатЗапроса = Запрос.Выполнить();	 
	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 Если НЕ ЗначениеЗаполнено(Приемник.ЗаказДата) Тогда
			 Приемник.ЗаказДата = ВыборкаДетальныеЗаписи.ORDERDATE;
		 КонецЕсли;
		 Если НЕ ЗначениеЗаполнено(Приемник.ЗаказНомер) Тогда
			 Приемник.ЗаказНомер = ВыборкаДетальныеЗаписи.ORDERNUMBER;
		 КонецЕсли;		 
	 КонецЦикла;
 КонецЕсли;
 
 // Поиск контрагента
 Если НЕ ЗначениеЗаполнено(Приемник.Контрагент) Тогда
	 
	 НайденныйКонтрагент = Неопределено;
	 
	 ИНН = "";
	 КПП = "";
	 Идентификатор = "";  
	 СтруктураДокумента.Свойство("ИдОтпр"     , Идентификатор);      
	 СтруктураДокумента.Свойство("ПродавецИНН", ИНН);
	 СтруктураДокумента.Свойство("ПродавецКПП", КПП);      
	 Если ЗначениеЗаполнено(ИНН) Тогда
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |    Контрагенты.Ссылка КАК Ссылка
		 |ИЗ
		 |    Справочник.Контрагенты КАК Контрагенты
		 |ГДЕ
		 |    Контрагенты.ИНН = &amp;ИНН
		 |    И ВЫБОР
		 |            КОГДА &amp;КПП = НЕОПРЕДЕЛЕНО
		 |                    ИЛИ &amp;КПП = """"
		 |                    ИЛИ &amp;КПП ЕСТЬ NULL
		 |                ТОГДА ИСТИНА
		 |            ИНАЧЕ Контрагенты.КПП = &amp;КПП
		 |        КОНЕЦ";                    
		 Запрос.УстановитьПараметр("ИНН", ИНН);
		 Запрос.УстановитьПараметр("КПП", КПП);
		 
		 РезультатЗапроса = Запрос.Выполнить();
		 Если НЕ РезультатЗапроса.Пустой() Тогда
			 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			 Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
				 ВыборкаДетальныеЗаписи.Следующий();
				 НайденныйКонтрагент = ВыборкаДетальныеЗаписи.Ссылка;
			 КонецЕсли;
		 КонецЕсли;                                                    
	 КонецЕсли;
	 
	 Если ЗначениеЗаполнено(НайденныйКонтрагент)  Тогда          
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |    ЭКОМ_ОператорыЭДО.Ссылка КАК Ссылка
		 |ИЗ
		 |    Справочник.ЭКОМ_ОператорыЭДО КАК ЭКОМ_ОператорыЭДО
		 |ГДЕ
		 |    ЭКОМ_ОператорыЭДО.Идентификатор = &amp;Идентификатор";      
		 Запрос.УстановитьПараметр("Идентификатор", Лев(Идентификатор, 3));
		 
		 Оператор = Неопределено;
		 РезультатЗапроса = Запрос.Выполнить();
		 Если НЕ РезультатЗапроса.Пустой() Тогда
			 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			 ВыборкаДетальныеЗаписи.Следующий();
			 Оператор = ВыборкаДетальныеЗаписи.Ссылка;
		 КонецЕсли;      
		 Если ЗначениеЗаполнено(Оператор) Тогда              
			 Приемник.Контрагент = НайденныйКонтрагент;              
			 // Запишем в регистр GLN
			 МенеджерЗаписи = РегистрыСведений.ЭКОМ_GLN.СоздатьМенеджерЗаписи();
			 МенеджерЗаписи.Объект = НайденныйКонтрагент;    
			 МенеджерЗаписи.Прочитать();  
			 Если НЕ МенеджерЗаписи.Выбран() Тогда // Если запись не существует то записать    
				 МенеджерЗаписи.Объект  = НайденныйКонтрагент;
				 МенеджерЗаписи.Ид_ОЭД  = Сред(Идентификатор, 4);
				 МенеджерЗаписи.Партнер = Оператор;
				 МенеджерЗаписи.Записать();
			 КонецЕсли;              
		 КонецЕсли;      
	 КонецЕсли;      
 КонецЕсли;
 
 ТекстУточнения = "";       
 НайденоПоступление = Ложь;
 НайденаСчетФактура = Ложь;
 ДокПН      = Неопределено;
 ДокСчФ     = Неопределено;
 КоррПН     = Неопределено;
 КоррСЧФ    = Неопределено;
 
 ПредставлениеДокКоррПоступления1С = "";
 ПредставлениеДокКоррСчФ1С = "";
 ПредставлениеДокПоступления1С = "";
 ПредставлениеДокСчФ1С = "";
 ПредставлениеПН  = "Поступление из ЮЗД № " + СокрЛП(Приемник.НакладнаяНомер) + " от " + Формат(Приемник.НакладнаяДата, "ДФ=dd.MM.yyyy");
 ПредставлениеСЧФ = "Счет-фактура из ЮЗД № " + СокрЛП(Приемник.СЧФНомер) + " от " + Формат(Приемник.СЧФДата, "ДФ=dd.MM.yyyy");
 
 ЭКОМДокОснование = Неопределено;
 СтруктураДокумента.Свойство("ЭКОМДокОснование", ЭКОМДокОснование);
 
 Если Приемник.ВидДокумента = Перечисления.ЭКОМ_ВидыДокументов.ON_NSCHFDOPPR_01
	 ИЛИ Приемник.ВидДокумента = Перечисления.ЭКОМ_ВидыДокументов.ON_NSCHFDOPPRMARK_01 
	 ИЛИ Приемник.ВидДокумента = Перечисления.ЭКОМ_ВидыДокументов.ON_NSCHFDOPPRPROS_01 Тогда
	 
	 // Ищем поступление
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ВЫБОР
	 |		КОГДА НЕ ЭКОМ_ЦепочкиДокументовПокупателя.Накладная ЕСТЬ NULL
	 |			ТОГДА ЭКОМ_ЦепочкиДокументовПокупателя.Накладная
	 |		КОГДА НЕ ПоступлениеПоНомеруДатеНакладной.Ссылка ЕСТЬ NULL
	 |			ТОГДА ПоступлениеПоНомеруДатеНакладной.Ссылка
	 |		КОГДА НЕ ПоступлениеПоЗаказу.Ссылка ЕСТЬ NULL
	 |			ТОГДА ПоступлениеПоЗаказу.Ссылка
	 |		КОГДА НЕ ПоступлениеПоНомеруДатеДокумента.Ссылка ЕСТЬ NULL
	 |			ТОГДА ПоступлениеПоНомеруДатеДокумента.Ссылка
	 |		КОГДА НЕ ПоступлениеПоНомеруДатеСЧФ.Ссылка ЕСТЬ NULL
	 |			ТОГДА ПоступлениеПоНомеруДатеСЧФ.Ссылка
	 |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	 |	КОНЕЦ КАК ПН,
	 |	СчетФактураПоНомеруСЧФ.Ссылка КАК СЧФ
	 |ПОМЕСТИТЬ ВТ
	 |ИЗ
	 |	Документ.ЭКОМ_Документы КАК ЭКОМ_ДокументыЮЗД
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеПоНомеруДатеНакладной
	 |		ПО (НЕ ПоступлениеПоНомеруДатеНакладной.ПометкаУдаления)
	 |			И (ПоступлениеПоНомеруДатеНакладной.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(ЭКОМ_ДокументыЮЗД.НакладнаяДата, ДЕНЬ, -3) И ДОБАВИТЬКДАТЕ(ЭКОМ_ДокументыЮЗД.НакладнаяДата, ДЕНЬ, 3))
	 |			И ЭКОМ_ДокументыЮЗД.Контрагент = ПоступлениеПоНомеруДатеНакладной.Контрагент
	 |			И (ПоступлениеПоНомеруДатеНакладной.Организация = ЭКОМ_ДокументыЮЗД.Организация)
	 |			И (ПоступлениеПоНомеруДатеНакладной.Проведен)
	 |			И (ПОДСТРОКА(ПоступлениеПоНомеруДатеНакладной.НомерВходящегоДокумента, 1, 100) = ЭКОМ_ДокументыЮЗД.НакладнаяНомер)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеПоНомеруДатеДокумента
	 |		ПО (НЕ ПоступлениеПоНомеруДатеДокумента.ПометкаУдаления)
	 |			И (ПоступлениеПоНомеруДатеДокумента.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(ЭКОМ_ДокументыЮЗД.НакладнаяДата, ДЕНЬ, -3) И ДОБАВИТЬКДАТЕ(ЭКОМ_ДокументыЮЗД.НакладнаяДата, ДЕНЬ, 3))
	 |			И ЭКОМ_ДокументыЮЗД.Контрагент = ПоступлениеПоНомеруДатеДокумента.Контрагент
	 |			И (ПоступлениеПоНомеруДатеДокумента.Организация = ЭКОМ_ДокументыЮЗД.Организация)
	 |			И (ПОДСТРОКА(ПоступлениеПоНомеруДатеДокумента.Номер, 1, 100) = ЭКОМ_ДокументыЮЗД.НакладнаяНомер)
	 |			И (ПоступлениеПоНомеруДатеДокумента.Проведен)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеПоНомеруДатеСЧФ
	 |		ПО (НЕ ПоступлениеПоНомеруДатеСЧФ.ПометкаУдаления)
	 |			И (ПоступлениеПоНомеруДатеСЧФ.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(ЭКОМ_ДокументыЮЗД.СЧФДата, ДЕНЬ, -3) И ДОБАВИТЬКДАТЕ(ЭКОМ_ДокументыЮЗД.СЧФДата, ДЕНЬ, 3))
	 |			И ЭКОМ_ДокументыЮЗД.Контрагент = ПоступлениеПоНомеруДатеСЧФ.Контрагент
	 |			И (ПоступлениеПоНомеруДатеСЧФ.Организация = ЭКОМ_ДокументыЮЗД.Организация)
	 |			И (ПоступлениеПоНомеруДатеСЧФ.Проведен)
	 |			И (ПОДСТРОКА(ПоступлениеПоНомеруДатеСЧФ.НомерВходящегоДокумента, 1, 100) = ЭКОМ_ДокументыЮЗД.СЧФНомер)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПоНомеруСЧФ
	 |		ПО (ЭКОМ_ДокументыЮЗД.СЧФНомер = ПОДСТРОКА(СчетФактураПоНомеруСЧФ.Номер, 1, 100))
	 |			И (СчетФактураПоНомеруСЧФ.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(ЭКОМ_ДокументыЮЗД.СЧФДата, ДЕНЬ, -3) И ДОБАВИТЬКДАТЕ(ЭКОМ_ДокументыЮЗД.СЧФДата, ДЕНЬ, 3))
	 |			И ЭКОМ_ДокументыЮЗД.Контрагент = СчетФактураПоНомеруСЧФ.Контрагент
	 |			И ЭКОМ_ДокументыЮЗД.Организация = СчетФактураПоНомеруСЧФ.Организация
	 |			И (НЕ СчетФактураПоНомеруСЧФ.ПометкаУдаления)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПоставщика КАК ЗаказПоставщикаПоНомеруДатеЗаказа
	 |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеПоЗаказу
	 |			ПО ЗаказПоставщикаПоНомеруДатеЗаказа.Ссылка = ПоступлениеПоЗаказу.СчетНаОплатуПоставщика
	 |				И (НЕ ПоступлениеПоЗаказу.ПометкаУдаления)
	 |				И (ПоступлениеПоЗаказу.Проведен)
	 |		ПО &amp;ЗаказНомер = ЗаказПоставщикаПоНомеруДатеЗаказа.Номер
	 |			И (ЗаказПоставщикаПоНомеруДатеЗаказа.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(ЭКОМ_ДокументыЮЗД.СЧФДата, ДЕНЬ, -5) И ДОБАВИТЬКДАТЕ(ЭКОМ_ДокументыЮЗД.СЧФДата, ДЕНЬ, 5))
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ЦепочкиДокументовПокупателя КАК ЭКОМ_ЦепочкиДокументовПокупателя
	 |		ПО ЭКОМ_ДокументыЮЗД.Ссылка = ЭКОМ_ЦепочкиДокументовПокупателя.ЮЗД
	 |ГДЕ
	 |	ЭКОМ_ДокументыЮЗД.Ссылка = &amp;Приемник
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ВТ.ПН КАК ПН,
	 |	ЕСТЬNULL(СчетФактураПолученныйДокументыОснования.Ссылка, ВТ.СЧФ) КАК СЧФ
	 |ИЗ
	 |	ВТ КАК ВТ
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	 |		ПО ВТ.ПН = СчетФактураПолученныйДокументыОснования.ДокументОснование";
	 Запрос.УстановитьПараметр("Приемник"  , Приемник.Ссылка);
	 Запрос.УстановитьПараметр("ЗаказНомер", Приемник.ЗаказНомер);

	 Результат = Запрос.Выполнить();                  
	 Если НЕ Результат.Пустой() Тогда
		 Выборка = Результат.Выбрать();    
		 Выборка.Следующий();
		 
		 Если ЗначениеЗаполнено(Выборка.ПН) Тогда
			 НайденоПоступление = Истина;
			 ДокПН  = Выборка.ПН;
			 ПредставлениеДокПоступления1С = "Поступления 1С № " + СокрЛП(ДокПН.Номер) + " от " + Формат(ДокПН.Дата, "ДФ=dd.MM.yyyy");
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(Выборка.СЧФ) Тогда
			 НайденаСчетФактура = Истина;
			 ДокСчФ = Выборка.СЧФ;
			 ПредставлениеДокСчФ1С = "Счет-фактура 1С № " + СокрЛП(ДокСчФ.Номер) + " от " + Формат(ДокСчФ.Дата, "ДФ=dd.MM.yyyy");
		 КонецЕсли;
		 
	 КонецЕсли;
	 
	 // Сравниваем данные
	 Если НайденоПоступление = Истина Тогда 
		 // Сравниваем суммы из XML(ЭКОМ док) и документа поступления 1С      
		 РасхождениеПоСумме_с_НДС = (ДокПН.СуммаДокумента - Приемник.СуммаДокументаВсего);
		 РасхождениеПоСумме_с_НДС = ?(РасхождениеПоСумме_с_НДС &gt; 0   , РасхождениеПоСумме_с_НДС, - РасхождениеПоСумме_с_НДС);
		 ЕстьРасхождениеПоСумме_с_НДС = ?(РасхождениеПоСумме_с_НДС &gt; 0.05, Истина, Ложь);
		 
		 ЭКОМСуммаБезНДС = 0;
		 ЭКОМСуммаНДС    = 0;
		 Для каждого Стр Из Приемник.ТЧ_Товары Цикл
			 ЭКОМСуммаБезНДС = ЭКОМСуммаБезНДС + Стр.Сумма;
			 ЭКОМСуммаНДС    = ЭКОМСуммаНДС    + Стр.СуммаНДС;
		 КонецЦикла;
		 
		 СуммаНДСДокумента = 0;
		 Для каждого Стр Из ДокПН.Товары Цикл
			 СуммаНДСДокумента = СуммаНДСДокумента + Стр.СуммаНДС;
		 КонецЦикла;
		 
		 РасхождениеПоСуммеНДС = (СуммаНДСДокумента - ЭКОМСуммаНДС);
		 РасхождениеПоСуммеНДС = ?(РасхождениеПоСуммеНДС &gt; 0   , РасхождениеПоСуммеНДС, - РасхождениеПоСуммеНДС);
		 ЕстьРасхождениеПоСуммеНДС = ?(РасхождениеПоСуммеНДС &gt; 0.05, Истина, Ложь);
		 
		 СуммаБезНДС = ДокПН.СуммаДокумента - СуммаНДСДокумента;
		 РасхождениеПоСуммеБезНДС = (СуммаБезНДС - ЭКОМСуммаБезНДС);
		 РасхождениеПоСуммеБезНДС = ?(РасхождениеПоСуммеБезНДС &gt; 0, РасхождениеПоСуммеБезНДС, - РасхождениеПоСуммеБезНДС);
		 ЕстьРасхождениеПоСуммеБезНДС = ?(РасхождениеПоСуммеБезНДС &gt; 0.05, Истина, Ложь);
		 
		 Если ЕстьРасхождениеПоСумме_с_НДС 
			 ИЛИ ЕстьРасхождениеПоСуммеНДС 
			 ИЛИ ЕстьРасхождениеПоСуммеБезНДС Тогда  
			 ТекстУточнения = "Проверьте суммы документов: " + 
			 "Сумма Всего 1С " + ПредставлениеДокПоступления1С + " = " + ДокПН.СуммаДокумента + "; "
			 "Сумма Всего УПД = " + Приемник.СуммаДокументаВсего + "; " +
			 "Сумма без НДС 1С = " + СуммаБезНДС + "; " +
			 "Сумма без НДС УПД =  " + ЭКОМСуммаБезНДС + "; " + 
			 "Сумма НДС 1С = " + СуммаНДСДокумента + "; " +
			 "Сумма НДС УПД =  " + ЭКОМСуммаНДС;
			 ЛогСобытий = ЛогСобытий + Символы.ПС + ТекстУточнения;
		 КонецЕсли;
		 
	 Иначе
		 ТекстЛогаСобытий = ПредставлениеПН + " по " + ПредставлениеСЧФ + " не найдено";
		 ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);	
	 КонецЕсли;	
	 
 Иначе
	 Если ЗначениеЗаполнено(ЭКОМДокОснование) Тогда
		 Если ЭКОМДокОснование.ДокументыСвязанные.Количество() &gt; 0 Тогда
			 ДокПН = ЭКОМДокОснование.ДокументыСвязанные[0].ДокументСвязанный;
			 НайденоПоступление = Истина;
		 КонецЕсли;		 
		 ДокСчФ = ЭКОМДокОснование.Документ1С;
		 НайденаСчетФактура = Истина;
	 КонецЕсли; 
	 
	 Если ЗначениеЗаполнено(ДокПН) Тогда
		 // Поиск корректировки постпуления
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	КорректировкаПриобретения.Ссылка КАК КоррПН,
		 |	СчетФактураПолученныйДокументыОснования.Ссылка КАК КоррСЧФ
		 |ИЗ
		 |	Документ.КорректировкаПоступления КАК КорректировкаПриобретения
		 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		 |		ПО КорректировкаПриобретения.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
		 |ГДЕ
		 |	КорректировкаПриобретения.ДокументПоступления = &amp;ДокументОснование";
		 Запрос.УстановитьПараметр("ДокументОснование", ДокПН);
		 
		 Результат = Запрос.Выполнить();                  
		 Если НЕ Результат.Пустой() Тогда
			 Выборка = Результат.Выбрать();    
			 Выборка.Следующий();
			 
			 Если ЗначениеЗаполнено(Выборка.КоррПН) Тогда
				 НайденоПоступление = Истина;
				 КоррПН  = Выборка.КоррПН;
				 ПредставлениеДокКоррПоступления1С = "Корректировка поступления 1С № " + СокрЛП(КоррПН.Номер) + " от " + Формат(КоррПН.Дата, "ДФ=dd.MM.yyyy");
			 КонецЕсли;
			 
			 Если ЗначениеЗаполнено(Выборка.КоррСЧФ) Тогда
				 НайденаСчетФактура = Истина;
				 КоррСЧФ = Выборка.КоррСЧФ;
				 ПредставлениеДокКоррСчФ1С = "Корректировочный счет-фактура 1С № " + СокрЛП(КоррСЧФ.Номер) + " от " + Формат(КоррСЧФ.Дата, "ДФ=dd.MM.yyyy");
			 КонецЕсли;
			 
		 КонецЕсли;
	 КонецЕсли; 
 КонецЕсли;
 
 Если ЗначениеЗаполнено(ТекстУточнения) Тогда
	 Приемник.Комментарий = ТекстУточнения;
 КонецЕсли;
 
 ДокументДляЗаписиПН = ДокПН;
 // Для корректировки
 Если ЗначениеЗаполнено(КоррПН) Тогда      
	 ДокументДляЗаписиПН = КоррПН;
 КонецЕсли;
 
 Если НайденоПоступление = Истина Тогда      
	 // Если повторная обработка документа необходимо проверить
	 Если ТипЗнч(Приемник) = Тип("ДокументСсылка.ЭКОМ_Документы")  Тогда
		 Приемник = Приемник.ПолучитьОбъект();
	 КонецЕсли;
	 Приемник.ДокументыСвязанные.Очистить();
	 Если ЗначениеЗаполнено(ЭКОМДокОснование) Тогда
		 НовСтр = Приемник.ДокументыСвязанные.Добавить();
		 НовСтр.ДокументСвязанный = ЭКОМДокОснование;
	 КонецЕсли;
	 НовСтр = Приемник.ДокументыСвязанные.Добавить(); 
	 НовСтр.ДокументСвязанный = ДокументДляЗаписиПН.Ссылка;
	 
	 // Создаем счет-фактуру
	 Если НайденаСчетФактура = Ложь Тогда
		 ПараметрыРегистрации = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреПолученном(ДокументДляЗаписиПН.Ссылка);
		 Если НЕ ПараметрыРегистрации = Неопределено 
			 И ЗначениеЗаполнено(ПараметрыРегистрации.Ссылка) Тогда
			 ДокСчФ = ПараметрыРегистрации.Ссылка;
			 НайденаСчетФактура = Истина;
		 КонецЕсли;
		 
		 Если НайденаСчетФактура = Ложь Тогда     
			 ТаблицаЗначений = Новый ТаблицаЗначений;    
			 ТаблицаЗначений.Колонки.Добавить("ЭКОМ_Документ_DESADV", Новый ОписаниеТипов("ДокументСсылка.ЭКОМ_Документы"));
			 ТаблицаЗначений.Колонки.Добавить("ЭКОМ_Документ_ORDRSP", Новый ОписаниеТипов("ДокументСсылка.ЭКОМ_Документы"));
			 ТаблицаЗначений.Колонки.Добавить("ДокументПоступления" , Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг"));
			 ТаблицаЗначений.Колонки.Добавить("ДокументЗаказа"      , Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика"));
			 ТаблицаЗначений.Колонки.Добавить("Документ"            , Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг")); // Источник         
			 
			 НовСтр = ТаблицаЗначений.Добавить();
			 НовСтр.ДокументПоступления = ДокументДляЗаписиПН.Ссылка;
			 НовСтр.Документ            = ДокументДляЗаписиПН.Ссылка;
			 
			 ТекстЛогаСобытий = "";
			 СоздатьДокументПоДинамическойКнопке(ТаблицаЗначений, "Создать счет-фактуру полученный", "Покупатель", ТекстЛогаСобытий);
			 
			 ПараметрыРегистрации = УчетНДСВызовСервера.РеквизитыДляНадписиОСчетеФактуреПолученном(ДокументДляЗаписиПН.Ссылка);        
			 Если НЕ ПараметрыРегистрации = Неопределено 
				 И ЗначениеЗаполнено(ПараметрыРегистрации.Ссылка) Тогда
				 ДокСчФ = ПараметрыРегистрации.Ссылка;
				 НайденаСчетФактура = Истина;
			 КонецЕсли;  
		 КонецЕсли;           
	 КонецЕсли;
 КонецЕсли;
 
 ДокументДляЗаписиСЧФ = ДокСчФ;
 // Для корректировки
 Если ЗначениеЗаполнено(КоррСЧФ) Тогда      
	 ДокументДляЗаписиСЧФ = КоррСЧФ;
 КонецЕсли;
 
 Если НайденаСчетФактура = Истина Тогда
	 ДокСчФОбъект = ДокументДляЗаписиСЧФ.Ссылка.ПолучитьОбъект();
	 ДокСчФОбъект.ДатаВходящегоДокумента  = Приемник.СЧФДата;
	 ДокСчФОбъект.НомерВходящегоДокумента = Приемник.СЧФНомер;
	 ДокСчФОбъект.КодСпособаПолучения = 2;
	 ДокСчФОбъект.Записать();      
	 // Если повторная обработка документа необходимо проверить
	 Если ТипЗнч(Приемник) = Тип("ДокументСсылка.ЭКОМ_Документы")  Тогда
		 Приемник = Приемник.ПолучитьОбъект();
	 КонецЕсли;
	 Приемник.Документ1С = ДокументДляЗаписиСЧФ.Ссылка;
 Иначе
	 ТекстЛогаСобытий = "Счет-фактура 1С не создана по поступлению - " + ПредставлениеПН;
	 ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);	
 КонецЕсли;
 
 // Если документы не найдены, значит документ не обработан
 Если НайденаСчетФактура = Ложь 
	 И НайденоПоступление = Ложь Тогда      
	 Приемник.СтатусОбработкиДокумента = Перечисления.ЭКОМ_Статусы.НеОбработан;	 		
 КонецЕсли;
</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">ЮЗД (УПД / УКД / иУПД)</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>ЮЗД (УПД / УКД / иУПД)</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>