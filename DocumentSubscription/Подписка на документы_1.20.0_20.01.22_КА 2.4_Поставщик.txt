ТипДокументаЗаказа                  = "ДокументСсылка.ЗаказКлиента";
ТипДокументаРеализации              = "ДокументСсылка.РеализацияТоваровУслуг"; 
ТипДокументаКорректировкиРеализации = "ДокументСсылка.КорректировкаРеализации";
ТипДокументаСчетФактуры 			= "ДокументСсылка.СчетФактураВыданный";
ДокументВозвратТоваровОтКлиента     = "ДокументСсылка.ВозвратТоваровОтКлиента";

ИмяОрганизации           = "Организация";
ИмяКонтрагента           = "Контрагент";
ИмяТочкиДоставки         = "Партнер";
ИмяДатаОтгрузки          = "ЖелаемаяДатаОтгрузки";
ДатаЗаказа1С             = "ДатаПоДаннымКлиента";
НомерЗаказа1С            = "НомерПоДаннымКлиента";
НомерВходящегоДокумента  = "НомерВходящегоДокумента";
ДатаВходящегоДокумента   = "ДатаВходящегоДокумента";
ИмяЗаказа1С              = "ЗаказКлиента";
ДокументОснованиеСЧФ     = "ДокументОснование";
ОснованиеВозвратаКлиента = "ДокументРеализации";

// Заказ клиента.
Если ТипЗнч(Источник.Ссылка) = Тип(ТипДокументаЗаказа) Тогда
	РазделятьЗаказы = ЭКОМ_ОбщегоНазначения.Настройка_Параметр_Прочитать("ЭКОМ_РазделятьЗаказы", Ложь);   
			
	ВыборкаУчастниковВЭДО = КонтрагентУчаствуетВЭДО(Источник[ИмяОрганизации], Источник[ИмяКонтрагента]);
	Если НЕ ВыборкаУчастниковВЭДО.Количество() = 0 Тогда
		
		НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ORDERDATE.Установить(Источник.ДатаПоДаннымКлиента);
		НаборЗаписей.Отбор.Организация.Установить(Источник.Организация);
		НаборЗаписей.Отбор.Контрагент.Установить(Источник.Контрагент);
		НаборЗаписей.Отбор.ТочкаДоставки.Установить(Источник.Партнер);
		НаборЗаписей.Отбор.ORDERNUMBER.Установить(Источник.НомерПоДаннымКлиента);
		
		ДанныеИзмерений = Новый Структура;
		ДанныеИзмерений.Вставить("Заказ",            Источник.Ссылка);
		ДанныеИзмерений.Вставить("Организация",        Источник[ИмяОрганизации]);
		ДанныеИзмерений.Вставить("Контрагент",        Источник[ИмяКонтрагента]);
		ДанныеИзмерений.Вставить("ТочкаДоставки",    Источник[ИмяТочкиДоставки]);
		
		ДанныеРесурсов = Новый Структура;
		ДанныеРесурсов.Вставить("ДатаПоставки",     Источник[ИмяДатаОтгрузки]);
		ДанныеРесурсов.Вставить("КоличествоЗаказ",    Источник.Товары.Итог("Количество"));
		ДанныеРесурсов.Вставить("СуммаЗаказ",        Источник.Товары.Итог("Сумма"));
		
		// Выполним блокировку данных.
		ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");
		
		ЗаписатьВНезаполненнуюСтроку = Ложь;
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			// поиск записи с незаполненным Заказом
			ИзменяемаяЗапись = НаборЗаписей[0];
			МассивЗаказов = НаборЗаписей.ВыгрузитьКолонку("Заказ");
			ИсточникНеЗаписанВЦепочку = МассивЗаказов.Найти(Источник.Ссылка) = Неопределено;		 
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(Запись.Заказ) И ИсточникНеЗаписанВЦепочку Тогда
					ЗаписатьВНезаполненнуюСтроку = Истина;
					ИзменяемаяЗапись	 	= Запись;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НаборЗаписей.Количество() = 0 Тогда
		// Записываем документ в первый раз.
			ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НаборЗаписей.Добавить(), ДанныеИзмерений, ДанныеРесурсов); 
		ИначеЕсли ЗаписатьВНезаполненнуюСтроку Тогда
		// существует запись с незаполненным заказом - запись будет выполнена в неё
			ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(ИзменяемаяЗапись, ДанныеИзмерений, ДанныеРесурсов);  			
		ИначеЕсли РазделятьЗаказы Тогда
		// разделение заказа по одному ORDER на разные записи			
			НаборЗаписей.Отбор.Заказ.Установить(Источник.Ссылка);
			
			ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				ДанныеИзмерений.Вставить("ORDERDATE"  , ИзменяемаяЗапись.ORDERDATE);
				ДанныеИзмерений.Вставить("ORDERNUMBER", ИзменяемаяЗапись.ORDERNUMBER);
				ДанныеИзмерений.Вставить("ORDER"      , ИзменяемаяЗапись.ORDER);
				
				ДанныеРесурсов.Вставить("xmlТочкаДоставки", ИзменяемаяЗапись.xmlТочкаДоставки);
				ДанныеРесурсов.Вставить("xmlОрганизация"  , ИзменяемаяЗапись.xmlОрганизация);
				ДанныеРесурсов.Вставить("xmlКонтрагент"   , ИзменяемаяЗапись.xmlКонтрагент);
				ДанныеРесурсов.Вставить("ДатаПоставки"    , ИзменяемаяЗапись.ДатаПоставки);
				ДанныеРесурсов.Вставить("КоличествоORDER" , ИзменяемаяЗапись.КоличествоORDER);
				ДанныеРесурсов.Вставить("СуммаORDER"      , ИзменяемаяЗапись.СуммаORDER);
				ДанныеРесурсов.Вставить("ТекстОшибки"     , ИзменяемаяЗапись.ТекстОшибки);
				ДанныеРесурсов.Вставить("Статус_ORDER"    , ИзменяемаяЗапись.Статус_ORDER);

				// Запись документа в первый раз
				ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НаборЗаписей.Добавить(), ДанныеИзмерений, ДанныеРесурсов);
			Иначе
				// Если существует документ в регистре.
				Для Каждого НоваяЗапись Из НаборЗаписей Цикл
					ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов); // записываем данные в регистр если они заполнены
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			НаборЗаписей.Отбор.Заказ.Установить(Источник.Ссылка);
			НаборЗаписей.Прочитать();
			Для Каждого НоваяЗапись Из НаборЗаписей Цикл
				ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов); // записываем данные в регистр если они заполнены
			КонецЦикла;
        КонецЕсли;
		
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли; 		
КонецЕсли;

// Реализация.
Если ТипЗнч(Источник.Ссылка) = Тип(ТипДокументаРеализации) Тогда
	РазделятьРеализации = ЭКОМ_ОбщегоНазначения.Настройка_Параметр_Прочитать("ЭКОМ_РазделятьРеализации", Ложь);
	ВыборкаУчастниковВЭДО = КонтрагентУчаствуетВЭДО(Источник[ИмяОрганизации], Источник[ИмяКонтрагента]);
	Если НЕ ВыборкаУчастниковВЭДО.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЭКОМ_ДокументыДокументыСвязанные.ДокументСвязанный КАК ДокументСвязанный
		|ИЗ
		|	Документ.ЭКОМ_Документы.ДокументыСвязанные КАК ЭКОМ_ДокументыДокументыСвязанные
		|ГДЕ
		|	ЭКОМ_ДокументыДокументыСвязанные.ДокументСвязанный = &ДокументСвязанный";
		Запрос.УстановитьПараметр("ДокументСвязанный", Источник);
		Результат = Запрос.Выполнить();
		СвязанСИсточником = Истина;
		Если Результат.Пустой() Тогда
			СвязанСИсточником = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник[ИмяЗаказа1С]) Тогда // Реализация была создана на основании заказа
			ДокументЗаказа = Источник[ИмяЗаказа1С];
		Иначе // Реализация создавалась на основании ORDER
			ДокументЗаказа = Источник.Ссылка;
		КонецЕсли;
		
		// Поиск ЭКОМ документа.		
		Запрос.Текст =     "ВЫБРАТЬ
           |	ЭКОМ_ДокументыДокументыСвязанные.Ссылка КАК ORDER,
           |	ЭКОМ_ДокументыДокументыСвязанные.Ссылка.ЗаказДата КАК ЗаказДата,
           |	ЭКОМ_ДокументыДокументыСвязанные.Ссылка.ЗаказНомер КАК ЗаказНомер
           |ИЗ
           |	Документ.ЭКОМ_Документы.ДокументыСвязанные КАК ЭКОМ_ДокументыДокументыСвязанные
           |ГДЕ
           |	ЭКОМ_ДокументыДокументыСвязанные.ДокументСвязанный = &Источник
           |	И ЭКОМ_ДокументыДокументыСвязанные.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.ORDER_Входящий)
           |
           |ОБЪЕДИНИТЬ ВСЕ
           |
           |ВЫБРАТЬ
           |	ЭКОМ_Документы.Ссылка,
           |	ЭКОМ_Документы.Ссылка.ЗаказДата,
           |	ЭКОМ_Документы.Ссылка.ЗаказНомер
           |ИЗ
           |	Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
           |ГДЕ
           |	ЭКОМ_Документы.Документ1С = &Источник
           |	И ЭКОМ_Документы.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.ORDER_Входящий)";		
		Запрос.УстановитьПараметр("Источник", ДокументЗаказа);		
		РезультатЗапроса 	   = Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если Не (Источник.ПометкаУдаления И Не СвязанСИсточником) И ВыборкаДетальныеЗаписи.Следующий() Тогда
			ORDER		= ВыборкаДетальныеЗаписи.ORDER;
			ORDERDATE   = ВыборкаДетальныеЗаписи.ЗаказДата;
			ORDERNUMBER = ВыборкаДетальныеЗаписи.ЗаказНомер;
			
			НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ORDER.Установить(ORDER);
			Если ЗначениеЗаполнено(Источник.ЗаказКлиента) Тогда
				НаборЗаписей.Отбор.Заказ.Установить(Источник.ЗаказКлиента);
			КонецЕсли;
			
			// Выполним блокировку данных.
			ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");
			
			НаборЗаписей.Прочитать();			
			Если НЕ НаборЗаписей.Количество() = 0 Тогда
				
				ДанныеИзмерений = Новый Структура;
				ДанныеИзмерений.Вставить("Накладная",        Источник.Ссылка);
				Если ЗначениеЗаполнено(Источник.ЗаказКлиента) Тогда
					ДанныеИзмерений.Вставить("Заказ", Источник.ЗаказКлиента);
				КонецЕсли;
				ДанныеИзмерений.Вставить("Организация",     Источник[ИмяОрганизации]);
				ДанныеИзмерений.Вставить("Контрагент",        Источник[ИмяКонтрагента]);
				ДанныеИзмерений.Вставить("ТочкаДоставки",    Источник[ИмяТочкиДоставки]);
				
				ДанныеРесурсов = Новый Структура;
				ДанныеРесурсов.Вставить("КоличествоНакладная",     Источник.Товары.Итог("Количество"));
				ДанныеРесурсов.Вставить("СуммаНакладная",        Источник.Товары.Итог("Сумма"));
				ДанныеРесурсов.Вставить("СуммаНДСНакладная",    Источник.Товары.Итог("СуммаНДС"));
				
				// поиск записи с незаполненной Накладной
				ИзменяемаяЗапись = НаборЗаписей[0];
				МассивНакладных  = НаборЗаписей.ВыгрузитьКолонку("Накладная");
			    ИсточникНеЗаписанВЦепочку = МассивНакладных.Найти(Источник.Ссылка) = Неопределено;
				ЗаписатьВНезаполненнуюСтроку = Ложь;    
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Не ЗначениеЗаполнено(Запись.Накладная) И ИсточникНеЗаписанВЦепочку Тогда
						ЗаписатьВНезаполненнуюСтроку = Истина;
						ИзменяемаяЗапись	 		= Запись;
					КонецЕсли;
				КонецЦикла;
				
				// стандартный алгоритм без разделения или накладная в цепочке пока незаполнена 
				Если ЗаписатьВНезаполненнуюСтроку Тогда
					ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(ИзменяемаяЗапись, ДанныеИзмерений, ДанныеРесурсов); // записываем документ первый раз
				ИначеЕсли РазделятьРеализации Тогда
					// разделение реализаций по одному ORDER на разные записи
					
					КоличествоОбязательныхОтборов = 2;
					ОбязательныеДанныеОтбораЗаполнены = Новый Массив;  
					Если ЗначениеЗаполнено(Источник[ИмяОрганизации]) Тогда
						ОбязательныеДанныеОтбораЗаполнены.Добавить("Организация");
					КонецЕсли;
					Если ЗначениеЗаполнено(Источник[ИмяКонтрагента]) Тогда
						ОбязательныеДанныеОтбораЗаполнены.Добавить("Контрагент");
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("ORDERDATE"    , ORDERDATE);
					СтруктураОтбора.Вставить("ORDERNUMBER"  , ORDERNUMBER);
					СтруктураОтбора.Вставить("Организация"  , Источник[ИмяОрганизации]);
					СтруктураОтбора.Вставить("Контрагент"   , Источник[ИмяКонтрагента]);
					СтруктураОтбора.Вставить("ТочкаДоставки", Источник[ИмяТочкиДоставки]);
					СтруктураОтбора.Вставить("ORDER"        , ORDER);
					СтруктураОтбора.Вставить("Накладная"    , Источник.Ссылка);
					Если ЗначениеЗаполнено(Источник.ЗаказКлиента) Тогда
						СтруктураОтбора.Вставить("Заказ"    , Источник.ЗаказКлиента);
					КонецЕсли;
					
					Если ОбязательныеДанныеОтбораЗаполнены.Количество() = КоличествоОбязательныхОтборов Тогда
						НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
						Для каждого Данные Из СтруктураОтбора Цикл
							Если ЗначениеЗаполнено(Данные.Значение) Тогда
								НаборЗаписей.Отбор[Данные.Ключ].Установить(Данные.Значение);
							КонецЕсли;
						КонецЦикла;
						
						ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");
						НаборЗаписей.Прочитать();
						Если НаборЗаписей.Количество() = 0 Тогда
													
							ДанныеИзмерений.Вставить("ORDERDATE"  , ИзменяемаяЗапись.ORDERDATE);
							ДанныеИзмерений.Вставить("ORDERNUMBER", ИзменяемаяЗапись.ORDERNUMBER);
							ДанныеИзмерений.Вставить("ORDER"      , ИзменяемаяЗапись.ORDER);
							
							ДанныеРесурсов.Вставить("xmlТочкаДоставки", ИзменяемаяЗапись.xmlТочкаДоставки);
							ДанныеРесурсов.Вставить("xmlОрганизация"  , ИзменяемаяЗапись.xmlОрганизация);
							ДанныеРесурсов.Вставить("xmlКонтрагент"   , ИзменяемаяЗапись.xmlКонтрагент);
							ДанныеРесурсов.Вставить("Статус_ORDER"    , ИзменяемаяЗапись.Статус_ORDER);
							ДанныеРесурсов.Вставить("ДатаПоставки"    , ИзменяемаяЗапись.ДатаПоставки);
							ДанныеРесурсов.Вставить("КоличествоORDER" , ИзменяемаяЗапись.КоличествоORDER);
							ДанныеРесурсов.Вставить("СуммаORDER"      , ИзменяемаяЗапись.СуммаORDER);
							ДанныеРесурсов.Вставить("ТекстОшибки"     , ИзменяемаяЗапись.ТекстОшибки);
							ДанныеРесурсов.Вставить("КоличествоЗаказ" , ИзменяемаяЗапись.КоличествоЗаказ);
							ДанныеРесурсов.Вставить("СуммаЗаказ"	  , ИзменяемаяЗапись.СуммаЗаказ);

							// Запись документа в первый раз
							ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НаборЗаписей.Добавить(), ДанныеИзмерений, ДанныеРесурсов);
						Иначе
							// Если существует документ в регистре.
							Для Каждого НоваяЗапись Из НаборЗаписей Цикл
								ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов); // записываем данные в регистр если они заполнены
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли; // проверка данных обязательных для отбора
				Иначе
					НаборЗаписей.Отбор.Накладная.Установить(Источник.Ссылка);
					ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика"); 
					НаборЗаписей.Прочитать();
					Для Каждого НоваяЗапись Из НаборЗаписей Цикл
						ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов); // записываем данные в регистр если они заполнены
					КонецЦикла;								
				КонецЕсли; // наличие незаполненных записей, потребности разделять реализации
				
				Если НаборЗаписей.Модифицированность() Тогда
					НаборЗаписей.Записать();
				КонецЕсли;

			КонецЕсли; // найдены записи по ORDER
		
		ИначеЕсли Источник.ПометкаУдаления И Не СвязанСИсточником Тогда 
			НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
			Если ЗначениеЗаполнено(Источник.ЗаказКлиента) Тогда
				НаборЗаписей.Отбор.Заказ.Установить(Источник.ЗаказКлиента);
				ВыборкаОрдер = Запрос.Выполнить().Выбрать();
				Если ВыборкаОрдер.Следующий() Тогда
					НаборЗаписей.Отбор.ORDER.Установить(ВыборкаОрдер.ORDER);          
				КонецЕсли;
				ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");
				НаборЗаписей.Прочитать();
				Для Каждого ИзменяемаяЗапись Из НаборЗаписей Цикл
					Если ИзменяемаяЗапись.Накладная <> Источник Тогда
						Продолжить;
					КонецЕсли;				
					ИзменяемаяЗапись.Накладная 			 = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
					ИзменяемаяЗапись.КоличествоНакладная = 0;
					ИзменяемаяЗапись.СуммаНакладная      = 0;
					ИзменяемаяЗапись.СуммаНДСНакладная   = 0;
				КонецЦикла;
			КонецЕсли;
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать();
			КонецЕсли;		
		КонецЕсли; // найден ЭКОМ документ
		
	КонецЕсли;   // контрагент участвует в ЭДО
	
КонецЕсли; // тип источника - реализация

// Корректировка реализации.
Если ТипЗнч(Источник.Ссылка) = Тип(ТипДокументаКорректировкиРеализации) Тогда
	
	ВыборкаУчастниковВЭДО = КонтрагентУчаствуетВЭДО(Источник[ИмяОрганизации], Источник[ИмяКонтрагента]);
	Если НЕ ВыборкаУчастниковВЭДО.Количество() = 0
		И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Накладная.Установить(Источник.ДокументОснование);
		
		// Выполним блокировку данных.
		ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");
		
		НаборЗаписей.Прочитать();
		
		Если НЕ НаборЗаписей.Количество() = 0 Тогда
			
			ДанныеИзмерений = Новый Структура;
			ДанныеИзмерений.Вставить("Накладная_Кор", Источник.Ссылка);
			
			ДанныеРесурсов = Новый Структура;
			ДанныеРесурсов.Вставить("КоличествоНакладная_Кор",    Источник.Товары.Итог("Количество"));
			ДанныеРесурсов.Вставить("СуммаНакладная_Кор",        Источник.Товары.Итог("Сумма"));
			ДанныеРесурсов.Вставить("СуммаНДСНакладная_Кор",    Источник.Товары.Итог("СуммаНДС"));
			
			// Если существует документ в регистре.
			Для Каждого НоваяЗапись Из НаборЗаписей Цикл
				ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов);
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецЕсли;

////////////////////////////////////////////////////////////////////////////////
// СчетФактураВыданный
//
Если ТипЗнч(Источник.Ссылка) = Тип(ТипДокументаСчетФактуры) Тогда
	
	НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
	коррРТУ      = Неопределено;
	РТУ          = Неопределено;
	ЗаказКлиента = Неопределено;
	ДокументОснование = Источник[ДокументОснованиеСЧФ];
	Если ТипЗнч(ДокументОснование) = Тип(ТипДокументаРеализации) Тогда
		РТУ = ДокументОснование;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип(ТипДокументаКорректировкиРеализации) Тогда
		коррРТУ = ДокументОснование;
		РТУ     = ПолучитьИсправляемыйДокументРеализации(коррРТУ,,"ДокументОснование");
		
	КонецЕсли;
	
	ЭтоКорректировка = Источник.Корректировочный;
	ЭтоИсправление   = Источник.Исправление;
	
	Организация   = Неопределено;
	Контрагент    = Неопределено;
	ТочкаДоставки = Неопределено;
	Если ЗначениеЗаполнено(РТУ) Тогда
		Организация   = РТУ[ИмяОрганизации];
		Контрагент    = РТУ[ИмяКонтрагента];
		ТочкаДоставки = РТУ[ИмяТочкиДоставки];
		ЗаказКлиента  = РТУ[ИмяЗаказа1С];
	КонецЕсли;
	
	ORDERDATE = Дата(0001, 01, 01);
	ORDERNUMBER = "";
	Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
		ORDERDATE   = ЗаказКлиента[ДатаЗаказа1С];
		ORDERNUMBER = ЗаказКлиента[НомерЗаказа1С];
	КонецЕсли;
	
	ДанныеОтбораЗаполнены = Ложь;
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ORDERDATE"    , ORDERDATE);
	СтруктураОтборов.Вставить("ORDERNUMBER"  , ORDERNUMBER);
	СтруктураОтборов.Вставить("Заказ"        , ЗаказКлиента);
	СтруктураОтборов.Вставить("Организация"  , Организация);
	СтруктураОтборов.Вставить("Контрагент"   , Контрагент);
	СтруктураОтборов.Вставить("ТочкаДоставки", ТочкаДоставки);
	СтруктураОтборов.Вставить("Накладная"    , РТУ);
	СтруктураОтборов.Вставить("Накладная_Кор", коррРТУ);
	Для каждого Данные Из СтруктураОтборов Цикл
		Если ЗначениеЗаполнено(Данные.Значение) Тогда
			НаборЗаписей.Отбор[Данные.Ключ].Установить(Данные.Значение);
			ДанныеОтбораЗаполнены = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеОтбораЗаполнены = Истина Тогда
		
		//Выполним блокировку данных
		ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");
		НаборЗаписей.Прочитать();
		
		// Если существует запись в регистре
		Для Каждого НоваяЗапись Из НаборЗаписей Цикл
			
			Если ЭтоКорректировка
				ИЛИ ЭтоИсправление Тогда // Значит текущая счет-фактура корректировочная/исправительная
				ПерезаписатьНаНовуюСЧФ_Корр = НЕ Источник.Ссылка = НоваяЗапись.СЧФ_Кор;
				ЭтоНоваяСЧФ_Корр            = НЕ ЗначениеЗаполнено(НоваяЗапись.СЧФ_Кор);
				
				Если ПерезаписатьНаНовуюСЧФ_Корр
					ИЛИ ЭтоНоваяСЧФ_Корр Тогда
					
					// Если это создание новой СЧФ корр, перезапишем ссылку и сбросим статусы
					НоваяЗапись.СЧФ_Кор          = Источник.Ссылка;
					НоваяЗапись.СуммаСЧФ_Кор     = коррРТУ.Товары.Итог("Сумма");
					НоваяЗапись.НомерИсправления = Источник["НомерИсправления"];
					
					Если ПерезаписатьНаНовуюСЧФ_Корр Тогда
						
						НоваяЗапись.Статус_DP_IZVPOL_04            = Ложь;
						НоваяЗапись.Статус_DP_IZVPOL_06            = Ложь;
						НоваяЗапись.Статус_DP_IZVPOL_10            = Ложь;
						НоваяЗапись.Статус_DP_PDPOL_02             = Ложь;
						НоваяЗапись.Статус_DP_UVUTOCH_09           = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPOK_11     = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPR_01      = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPR_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOK_11       = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPR_01        = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPR_01_Испр   = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRMARK_01      = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRMARK_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOKMARK_11     = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRPROS_01      = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRPROS_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOKPROS_11     = Ложь;
						
						НоваяЗапись.СтатусНаправление_DP_PRANNUL_22 = Перечисления.ЭКОМ_НаправлениеОбмена.ПустаяСсылка();
						НоваяЗапись.Статус_DP_IZVPOL_23            = Ложь;
						НоваяЗапись.Статус_DP_UVUTOCH_24           = Ложь;
						НоваяЗапись.СтатусЮЗД                       = ПредопределенноеЗначение("Перечисление.ЭКОМ_Статусы.ПустаяСсылка");
						НоваяЗапись.КоличествоКвитанций             = 0;
						
					КонецЕсли;
					
					НаборЗаписей.Записать();
					
				ИначеЕсли Источник.Ссылка = НоваяЗапись.СЧФ_Кор Тогда
					// Если это перезапись уже существующей СЧФ корр, обновим
					НоваяЗапись.СуммаСЧФ_Кор     = коррРТУ.Товары.Итог("Сумма");
					НоваяЗапись.НомерИсправления = Источник["НомерИсправления"];
					
					НаборЗаписей.Записать();
					
				КонецЕсли;
				
			Иначе
				ПерезаписатьНаНовуюСЧФ = НЕ Источник.Ссылка = НоваяЗапись.СЧФ;
				ЭтоНоваяСЧФ            = НЕ ЗначениеЗаполнено(НоваяЗапись.СЧФ);
				
				Если ПерезаписатьНаНовуюСЧФ
					ИЛИ ЭтоНоваяСЧФ Тогда
					
					// Если это создание новой СЧФ, перезапишем ссылку и сбросим статусы
					НоваяЗапись.СЧФ      = Источник.Ссылка;
					НоваяЗапись.СуммаСЧФ = РТУ.Товары.Итог("Сумма");
					
					Если ПерезаписатьНаНовуюСЧФ Тогда
						
						НоваяЗапись.Статус_DP_IZVPOL_04            = Ложь;
						НоваяЗапись.Статус_DP_IZVPOL_06            = Ложь;
						НоваяЗапись.Статус_DP_IZVPOL_10            = Ложь;
						НоваяЗапись.Статус_DP_PDPOL_02             = Ложь;
						НоваяЗапись.Статус_DP_UVUTOCH_09           = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPOK_11     = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPR_01      = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPR_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOK_11       = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPR_01        = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPR_01_Испр   = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRMARK_01      = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRMARK_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOKMARK_11     = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRPROS_01      = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRPROS_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOKPROS_11     = Ложь;
						
						НоваяЗапись.СтатусНаправление_DP_PRANNUL_22 = Перечисления.ЭКОМ_НаправлениеОбмена.ПустаяСсылка();
						НоваяЗапись.Статус_DP_IZVPOL_23            = Ложь;
						НоваяЗапись.Статус_DP_UVUTOCH_24           = Ложь;
						НоваяЗапись.СтатусЮЗД                       = ПредопределенноеЗначение("Перечисление.ЭКОМ_Статусы.ПустаяСсылка");
						НоваяЗапись.КоличествоКвитанций             = 0;
						
					КонецЕсли;
					
					НаборЗаписей.Записать();
					
				ИначеЕсли Источник.Ссылка = НоваяЗапись.СЧФ Тогда
					// Если это перезапись уже существующей СЧФ, обновим
					НоваяЗапись.СуммаСЧФ = РТУ.Товары.Итог("Сумма");
					НаборЗаписей.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецЕсли;

// ВозвратТоваровОтКлиента
Если ТипЗнч(Источник.Ссылка) = Тип(ДокументВозвратТоваровОтКлиента) Тогда
	
	//проверка документа основания и наличия соответствующего реквизита у ВозвратТоваровОтКлиента
	РеквизитОснованиеСуществует = Метаданные.Документы.ВозвратТоваровОтКлиента.Реквизиты.Найти(ОснованиеВозвратаКлиента) <> Неопределено;
	Если РеквизитОснованиеСуществует И ЗначениеЗаполнено(Источник[ОснованиеВозвратаКлиента]) Тогда
		
		//поиск скуществующих записей по документу основания	
		НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Накладная.Установить(Источник[ОснованиеВозвратаКлиента]);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			
			ДанныеИзмерений   = Новый Структура;
			ДанныеИзмерений.Вставить("ВозвратнаяНакладная", Источник.Ссылка);
			
			ДанныеРесурсов = Новый Структура;
			Если Источник.Проведен Тогда
				ДанныеРесурсов.Вставить("КоличествоВозврат", Источник.Товары.Итог("Количество"));
				ДанныеРесурсов.Вставить("СуммаВозврат", Источник.Товары.Итог("Сумма"));
			КонецЕсли;   	
			
			ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика"); 
			Для Каждого Запись Из НаборЗаписей Цикл
				ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(Запись, ДанныеИзмерений, ДанныеРесурсов);
			КонецЦикла;
			НаборЗаписей.Записать();
			
		КонецЕсли;//проверка наличия записей  		
	КонецЕсли;//проверка наличия реквизита и его заполненности
КонецЕсли;//проверка типа