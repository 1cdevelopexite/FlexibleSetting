ИмяЦепочки = "ЭКОМ_ЦепочкиДокументовПоставщика";

ТипДокументаЗаказа                  = "ДокументСсылка.СчетНаОплатуПокупателю";
ТипДокументаРеализации              = "ДокументСсылка.РеализацияТоваровУслуг";
ТипДокументаКорректировкиРеализации = "ДокументСсылка.КорректировкаРеализации";
ТипДокументаСчетФактуры             = "ДокументСсылка.СчетФактураВыданный";
ДокументВозвратаОтПокупателя	 	= "ДокументСсылка.ВозвратТоваровОтПокупателя";
ИмяДокументаВозвратаПокупателя 		= "ВозвратТоваровОтПокупателя";

ИмяОрганизации           = "Организация";
ИмяКонтрагента           = "Контрагент";
ИмяТочкиДоставки         = "ДоговорКонтрагента";
ИмяДатаОтгрузки          = "Дата";
ДатаЗаказа1С             = "ДатаПоДаннымКлиента";
НомерЗаказа1С            = "НомерПоДаннымКлиента";
НомерВходящегоДокумента  = "НомерВходящегоДокумента";
ДатаВходящегоДокумента   = "ДатаВходящегоДокумента";
ИмяЗаказа1С              = "СчетНаОплатуПокупателю";
ДокументОснованиеСЧФ     = "ДокументОснование";
ОснованиеВозвратаКлиента = "Сделка";

// Заказ клиента.
Если ТипЗнч(Источник.Ссылка) = Тип(ТипДокументаЗаказа) Тогда
	РазделятьЗаказы = ЭКОМ_ОбщегоНазначения.Настройка_Параметр_Прочитать("ЭКОМ_РазделятьЗаказы", Ложь);   

	ВыборкаУчастниковВЭДО = КонтрагентУчаствуетВЭДО(Источник[ИмяОрганизации], Источник[ИмяКонтрагента]);
	Если НЕ ВыборкаУчастниковВЭДО.Количество() = 0 Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязанныеДокументы.Ссылка КАК ЭкомДокумент,
		|	СвязанныеДокументы.ДокументСвязанный КАК ЗаказКлиента,
		|	СвязанныеДокументы.Ссылка.ЗаказДата КАК ЗаказДата,
		|	СвязанныеДокументы.Ссылка.ЗаказНомер КАК ЗаказНомер
		|ИЗ
		|	Документ.ЭКОМ_Документы.ДокументыСвязанные КАК СвязанныеДокументы
		|ГДЕ
		|	СвязанныеДокументы.ДокументСвязанный = &Источник";
		Запрос.УстановитьПараметр("Источник", Источник.Ссылка);
		ВыборкаЭком = Запрос.Выполнить().Выбрать();
		Если ВыборкаЭком.Следующий() Тогда

			НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ORDERDATE.Установить(ВыборкаЭком.ЗаказДата);
			НаборЗаписей.Отбор.ORDERNUMBER.Установить(ВыборкаЭком.ЗаказНомер);
			НаборЗаписей.Отбор.Организация.Установить(Источник[ИмяОрганизации]);
			НаборЗаписей.Отбор.Контрагент.Установить(Источник[ИмяКонтрагента]);
			НаборЗаписей.Отбор.ТочкаДоставки.Установить(Источник[ИмяТочкиДоставки]);
			
			ДанныеИзмерений = Новый Структура;
			ДанныеИзмерений.Вставить("Заказ",         Источник.Ссылка);
			ДанныеИзмерений.Вставить("Организация",   Источник[ИмяОрганизации]);
			ДанныеИзмерений.Вставить("Контрагент",    Источник[ИмяКонтрагента]);
			ДанныеИзмерений.Вставить("ТочкаДоставки", Источник[ИмяТочкиДоставки]);

			ДанныеРесурсов = Новый Структура;
			ДанныеРесурсов.Вставить("ДатаПоставки",     Источник[ИмяДатаОтгрузки]);
			ДанныеРесурсов.Вставить("КоличествоЗаказ",  Источник.Товары.Итог("Количество"));
			ДанныеРесурсов.Вставить("СуммаЗаказ",       Источник.Товары.Итог("Сумма"));
			
			// Выполним блокировку данных.
			ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");

			ЗаписатьВНезаполненнуюСтроку = Ложь;  			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() Тогда
				// поиск записи с незаполненным Заказом
				ИзменяемаяЗапись = НаборЗаписей[0];
				МассивЗаказов = НаборЗаписей.ВыгрузитьКолонку("Заказ");
				ИсточникНеЗаписанВЦепочку = МассивЗаказов.Найти(Источник.Ссылка) = Неопределено;			  
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Не ЗначениеЗаполнено(Запись.Заказ) И ИсточникНеЗаписанВЦепочку Тогда
						ЗаписатьВНезаполненнуюСтроку = Истина;
						ИзменяемаяЗапись	 	= Запись;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НаборЗаписей.Количество() = 0 Тогда
			// Записываем документ в первый раз.
				ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НаборЗаписей.Добавить(), ДанныеИзмерений, ДанныеРесурсов); // записываем данные в регистр если они заполнены
			ИначеЕсли ЗаписатьВНезаполненнуюСтроку Тогда
			// существует запись с незаполненным заказом - запись будет выполнена в неё
				ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(ИзменяемаяЗапись, ДанныеИзмерений, ДанныеРесурсов);  			
			ИначеЕсли РазделятьЗаказы Тогда
				// разделение заказа по одному ORDER на разные записи
				ДанныеИзмерений.Вставить("ORDERDATE"  , ИзменяемаяЗапись.ORDERDATE);
				ДанныеИзмерений.Вставить("ORDERNUMBER", ИзменяемаяЗапись.ORDERNUMBER);
				ДанныеИзмерений.Вставить("ORDER"      , ИзменяемаяЗапись.ORDER);
				
				ДанныеРесурсов.Вставить("xmlТочкаДоставки", ИзменяемаяЗапись.xmlТочкаДоставки);
				ДанныеРесурсов.Вставить("xmlОрганизация"  , ИзменяемаяЗапись.xmlОрганизация);
				ДанныеРесурсов.Вставить("xmlКонтрагент"   , ИзменяемаяЗапись.xmlКонтрагент);
				ДанныеРесурсов.Вставить("Статус_ORDER"    , ИзменяемаяЗапись.Статус_ORDER);
				
				НаборЗаписей.Отбор.Заказ.Установить(Источник.Ссылка);
				
				ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 0 Тогда
					// Запись документа в первый раз
					ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НаборЗаписей.Добавить(), ДанныеИзмерений, ДанныеРесурсов);
				Иначе
					// Если существует документ в регистре.
					Для Каждого НоваяЗапись Из НаборЗаписей Цикл
						ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов); // записываем данные в регистр если они заполнены
					КонецЦикла;
				КонецЕсли;
				
			Иначе
				НаборЗаписей.Отбор.Заказ.Установить(Источник.Ссылка);
				НаборЗаписей.Прочитать();
				Для Каждого НоваяЗапись Из НаборЗаписей Цикл
					ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов); // записываем данные в регистр если они заполнены
				КонецЦикла;
			КонецЕсли; // количество записей в полученном наборе
			
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЕсли; // найден документ ЭКОМ - основание
	КонецЕсли; // контрагент участвует в ЭДО
КонецЕсли;   // тип документа заказ

// Реализация.
Если ТипЗнч(Источник.Ссылка) = Тип(ТипДокументаРеализации) Тогда
	РазделятьРеализации = ЭКОМ_ОбщегоНазначения.Настройка_Параметр_Прочитать("ЭКОМ_РазделятьРеализации", Ложь);
	ВыборкаУчастниковВЭДО = КонтрагентУчаствуетВЭДО(Источник[ИмяОрганизации], Источник[ИмяКонтрагента]);
	Если НЕ ВыборкаУчастниковВЭДО.Количество() = 0 Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЭКОМ_ДокументыДокументыСвязанные.ДокументСвязанный КАК ДокументСвязанный
		|ИЗ
		|	Документ.ЭКОМ_Документы.ДокументыСвязанные КАК ЭКОМ_ДокументыДокументыСвязанные
		|ГДЕ
		|	ЭКОМ_ДокументыДокументыСвязанные.ДокументСвязанный = &ДокументСвязанный";
		Запрос.УстановитьПараметр("ДокументСвязанный", Источник);
		Результат = Запрос.Выполнить();
		СвязанСИсточником = Истина;
		Если Результат.Пустой() Тогда
			СвязанСИсточником = Ложь;
		КонецЕсли;

		ЗаписьНайдена = Ложь;
		// 1. Поиск по заказу
		Если ЗначениеЗаполнено(Источник[ИмяЗаказа1С]) Тогда // Реализация была создана на основании заказа
			НаборЗаписей = РегистрыСведений[ИмяЦепочки].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заказ.Установить(Источник[ИмяЗаказа1С]); // поле проиндексировано

			// Выполним блокировку данных
			ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, ИмяЦепочки);

			НаборЗаписей.Прочитать();
			Если НЕ НаборЗаписей.Количество() = 0 Тогда
				ЗаписьНайдена = Истина;
			КонецЕсли;

		КонецЕсли;

		// 2. Поиск по номере и дате заказа
		Если ЗаписьНайдена = Ложь Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СвязанныеДокументы.Ссылка КАК ЭкомДокумент,
			|	СвязанныеДокументы.ДокументСвязанный КАК ЗаказКлиента,
			|	СвязанныеДокументы.Ссылка.ЗаказДата КАК ЗаказДата,
			|	СвязанныеДокументы.Ссылка.ЗаказНомер КАК ЗаказНомер
			|ИЗ
			|	Документ.ЭКОМ_Документы.ДокументыСвязанные КАК СвязанныеДокументы
			|ГДЕ
			|	СвязанныеДокументы.ДокументСвязанный = &Источник";
			Запрос.УстановитьПараметр("Источник", Источник.Ссылка);
			ВыборкаЭком = Запрос.Выполнить().Выбрать();
			Если ВыборкаЭком.Следующий() Тогда  

				КоличествоОбязательныхОтборов = 2;
				ОбязательныеДанныеОтбораЗаполнены = Новый Массив;
				Если ЗначениеЗаполнено(Источник[ИмяОрганизации]) Тогда
					ОбязательныеДанныеОтбораЗаполнены.Добавить("Организация");
				КонецЕсли;
				Если ЗначениеЗаполнено(Источник[ИмяКонтрагента]) Тогда
					ОбязательныеДанныеОтбораЗаполнены.Добавить("Контрагент");
				КонецЕсли;

				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ORDERDATE"    , ВыборкаЭком.ЗаказДата);
				СтруктураОтбора.Вставить("ORDERNUMBER"  , ВыборкаЭком.ЗаказНомер);
				СтруктураОтбора.Вставить("Организация"  , Источник[ИмяОрганизации]);
				СтруктураОтбора.Вставить("Контрагент"   , Источник[ИмяКонтрагента]);
				СтруктураОтбора.Вставить("ТочкаДоставки", Источник[ИмяТочкиДоставки]);
				Если ОбязательныеДанныеОтбораЗаполнены.Количество() = КоличествоОбязательныхОтборов Тогда
					НаборЗаписей = РегистрыСведений[ИмяЦепочки].СоздатьНаборЗаписей();
					Для каждого Данные Из СтруктураОтбора Цикл
						Если ЗначениеЗаполнено(Данные.Значение) Тогда
							НаборЗаписей.Отбор[Данные.Ключ].Установить(Данные.Значение);
						КонецЕсли;
					КонецЦикла;

					// Выполним блокировку данных
					ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, ИмяЦепочки);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() > 0 Тогда
						ЗаписьНайдена = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Не (Источник.ПометкаУдаления И Не СвязанСИсточником) И ЗаписьНайдена = Истина Тогда

			ДанныеИзмерений = Новый Структура;
			ДанныеИзмерений.Вставить("Накладная"    , Источник.Ссылка);
			Если ЗначениеЗаполнено(Источник[ИмяЗаказа1С]) Тогда
						ДанныеИзмерений.Вставить("Заказ", Источник[ИмяЗаказа1С]);
			КонецЕсли;
			ДанныеИзмерений.Вставить("Организация"  , Источник[ИмяОрганизации]);
			ДанныеИзмерений.Вставить("Контрагент"   , Источник[ИмяКонтрагента]);
			ДанныеИзмерений.Вставить("ТочкаДоставки", Источник[ИмяТочкиДоставки]);

			ДанныеРесурсов = Новый Структура;
			ДанныеРесурсов.Вставить("КоличествоНакладная", Источник.Товары.Итог("Количество"));
			ДанныеРесурсов.Вставить("СуммаНакладная"     , Источник.Товары.Итог("Сумма"));
			ДанныеРесурсов.Вставить("СуммаНДСНакладная"  , Источник.Товары.Итог("СуммаНДС"));


			// поиск записи с незаполненной Накладной
			ИзменяемаяЗапись = НаборЗаписей[0];
			МассивНакладных  = НаборЗаписей.ВыгрузитьКолонку("Накладная");
		    ИсточникНеЗаписанВЦепочку = МассивНакладных.Найти(Источник.Ссылка) = Неопределено;
			ЗаписатьВНезаполненнуюСтроку = Ложь;    
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(Запись.Накладная) И ИсточникНеЗаписанВЦепочку Тогда
					ЗаписатьВНезаполненнуюСтроку = Истина;
					ИзменяемаяЗапись	 		= Запись;
				КонецЕсли;
			КонецЦикла;

			// стандартный алгоритм без разделения или накладная в цепочке пока незаполнена 
			Если ЗаписатьВНезаполненнуюСтроку Тогда
				ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(ИзменяемаяЗапись, ДанныеИзмерений, ДанныеРесурсов); // записываем документ первый раз
			ИначеЕсли РазделятьРеализации Тогда
			// разделение реализаций по одному ORDER на разные записи

				ДанныеИзмерений.Вставить("ORDERDATE"  , ИзменяемаяЗапись.ORDERDATE);
				ДанныеИзмерений.Вставить("ORDERNUMBER", ИзменяемаяЗапись.ORDERNUMBER);
				ДанныеИзмерений.Вставить("ORDER"      , ИзменяемаяЗапись.ORDER);

				ДанныеРесурсов.Вставить("xmlТочкаДоставки", ИзменяемаяЗапись.xmlТочкаДоставки);
				ДанныеРесурсов.Вставить("xmlОрганизация"  , ИзменяемаяЗапись.xmlОрганизация);
				ДанныеРесурсов.Вставить("xmlКонтрагент"   , ИзменяемаяЗапись.xmlКонтрагент);
				ДанныеРесурсов.Вставить("Статус_ORDER"    , ИзменяемаяЗапись.Статус_ORDER);

				КоличествоОбязательныхОтборов = 2;
				ОбязательныеДанныеОтбораЗаполнены = Новый Массив;
				Если ЗначениеЗаполнено(Источник[ИмяОрганизации]) Тогда
					ОбязательныеДанныеОтбораЗаполнены.Добавить("Организация");
				КонецЕсли;
				Если ЗначениеЗаполнено(Источник[ИмяКонтрагента]) Тогда
					ОбязательныеДанныеОтбораЗаполнены.Добавить("Контрагент");
				КонецЕсли;

				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ORDERDATE"    , ИзменяемаяЗапись.ORDERDATE);
				СтруктураОтбора.Вставить("ORDERNUMBER"  , ИзменяемаяЗапись.ORDERNUMBER);
				СтруктураОтбора.Вставить("Организация"  , Источник[ИмяОрганизации]);
				СтруктураОтбора.Вставить("Контрагент"   , Источник[ИмяКонтрагента]);
				СтруктураОтбора.Вставить("ТочкаДоставки", Источник[ИмяТочкиДоставки]);
				СтруктураОтбора.Вставить("ORDER"        , ИзменяемаяЗапись.ORDER);
				СтруктураОтбора.Вставить("Накладная"    , Источник.Ссылка);

				Если ОбязательныеДанныеОтбораЗаполнены.Количество() = КоличествоОбязательныхОтборов Тогда
					НаборЗаписей = РегистрыСведений[ИмяЦепочки].СоздатьНаборЗаписей();
					Для каждого Данные Из СтруктураОтбора Цикл
						Если ЗначениеЗаполнено(Данные.Значение) Тогда
							НаборЗаписей.Отбор[Данные.Ключ].Установить(Данные.Значение);
						КонецЕсли;
					КонецЦикла;

					// Выполним блокировку данных
					ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, ИмяЦепочки);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() = 0 Тогда
						// Записываем документ первый раз
						ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НаборЗаписей.Добавить(), ДанныеИзмерений, ДанныеРесурсов);
					Иначе
						// Если существует документ в регистре.
						Для Каждого НоваяЗапись Из НаборЗаписей Цикл
							ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов); // записываем данные в регистр если они заполнены
						КонецЦикла;
					КонецЕсли;

				КонецЕсли;  // проверка данных обязательных для отбора
			
			Иначе
				НаборЗаписей.Отбор.Накладная.Установить(Источник.Ссылка);
				ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика"); 
				НаборЗаписей.Прочитать();
				Для Каждого НоваяЗапись Из НаборЗаписей Цикл
					ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов); // записываем данные в регистр если они заполнены
				КонецЦикла;	
			КонецЕсли; // наличие незаполненных записей, потребности разделять реализации
			
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
		
 		ИначеЕсли Источник.ПометкаУдаления И Не СвязанСИсточником Тогда 
			НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
			Если ЗначениеЗаполнено(Источник[ИмяЗаказа1С]) Тогда
				НаборЗаписей.Отбор.Заказ.Установить(Источник[ИмяЗаказа1С]);
				ВыборкаОрдер = Запрос.Выполнить().Выбрать();
				Если ВыборкаОрдер.Следующий() Тогда
					НаборЗаписей.Отбор.ORDER.Установить(ВыборкаОрдер.ORDER);          
				КонецЕсли;
				ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");
				НаборЗаписей.Прочитать();
				Для Каждого ИзменяемаяЗапись Из НаборЗаписей Цикл
					ИзменяемаяЗапись.Накладная 			 = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
					ИзменяемаяЗапись.КоличествоНакладная = 0;
					ИзменяемаяЗапись.СуммаНакладная      = 0;
					ИзменяемаяЗапись.СуммаНДСНакладная   = 0;
				КонецЦикла;
			КонецЕсли;
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли; // найдены записи по ORDER 
	КонецЕсли;  // контрагент участвует в ЭДО
КонецЕсли;  // тип источника - реализация


// Корректировка реализации.
Если ТипЗнч(Источник.Ссылка) = Тип(ТипДокументаКорректировкиРеализации) Тогда

	ВыборкаУчастниковВЭДО = КонтрагентУчаствуетВЭДО(Источник[ИмяОрганизации], Источник[ИмяКонтрагента]);
	Если НЕ ВыборкаУчастниковВЭДО.Количество() = 0
		И ТипЗнч(Источник.ДокументРеализации) = Тип(ТипДокументаРеализации) Тогда

		НаборЗаписей = РегистрыСведений[ИмяЦепочки].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Накладная.Установить(Источник.ДокументРеализации);

		// Выполним блокировку данных.
		ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, ИмяЦепочки);

		НаборЗаписей.Прочитать();

		Если НЕ НаборЗаписей.Количество() = 0 Тогда

			ДанныеИзмерений = Новый Структура;
			ДанныеИзмерений.Вставить("Накладная_Кор", Источник.Ссылка);

			ДанныеРесурсов = Новый Структура;
			ДанныеРесурсов.Вставить("КоличествоНакладная_Кор", Источник.Товары.Итог("Количество"));
			ДанныеРесурсов.Вставить("СуммаНакладная_Кор"     , Источник.Товары.Итог("Сумма"));
			ДанныеРесурсов.Вставить("СуммаНДСНакладная_Кор"  , Источник.Товары.Итог("СуммаНДС"));

			// Если существует документ в регистре.
			Для Каждого НоваяЗапись Из НаборЗаписей Цикл
				ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов);
			КонецЦикла;

			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецЕсли;

////////////////////////////////////////////////////////////////////////////////
// СчетФактураВыданный
//
Если ТипЗнч(Источник.Ссылка) = Тип(ТипДокументаСчетФактуры) Тогда

	НаборЗаписей = РегистрыСведений[ИмяЦепочки].СоздатьНаборЗаписей();
	коррРТУ      = Неопределено;
	РТУ          = Неопределено;
	ЗаказКлиента = Неопределено;
	ДокументОснование = Источник[ДокументОснованиеСЧФ];
	Если ТипЗнч(ДокументОснование) = Тип(ТипДокументаРеализации) Тогда
		РТУ = ДокументОснование;
		ЭтоКорректировка = Ложь;
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип(ТипДокументаКорректировкиРеализации) Тогда
		коррРТУ = ДокументОснование;
		РТУ     = ПолучитьИсправляемыйДокументРеализации(коррРТУ,,"ДокументРеализации");
		ЭтоКорректировка = Истина;
	КонецЕсли;

	ЭтоИсправление   = Источник.Исправление;

	Организация   = Неопределено;
	Контрагент    = Неопределено;
	Если ЗначениеЗаполнено(РТУ) Тогда
		Организация   = РТУ[ИмяОрганизации];
		Контрагент    = РТУ[ИмяКонтрагента];
		ЗаказКлиента  = РТУ[ИмяЗаказа1С];
	КонецЕсли;

	ORDERDATE = Дата(0001, 01, 01);
	ORDERNUMBER = "";
	Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
		ВидНомерЗаказа = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("НомерЗаказа", Истина);
		ВидДатаЗаказа = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ДатаЗаказа", Истина);

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ДополнительныеСведенияНомерЗаказа.Значение, """") КАК НомерЗаказа,
		|	ЕСТЬNULL(ДополнительныеСведенияДатаЗаказа.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗаказа
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведенияНомерЗаказа
		|		ПО СчетНаОплатуПокупателю.Ссылка = ДополнительныеСведенияНомерЗаказа.Объект
		|			И (ДополнительныеСведенияНомерЗаказа.Свойство = &ВидНомерЗаказа)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведенияДатаЗаказа
		|		ПО СчетНаОплатуПокупателю.Ссылка = ДополнительныеСведенияДатаЗаказа.Объект
		|			И (ДополнительныеСведенияДатаЗаказа.Свойство = &ВидДатаЗаказа)
		|ГДЕ
		|	СчетНаОплатуПокупателю.Ссылка = &Источник";

		Запрос.УстановитьПараметр("Источник"      , ЗаказКлиента);
		Запрос.УстановитьПараметр("ВидНомерЗаказа", ВидНомерЗаказа);
		Запрос.УстановитьПараметр("ВидДатаЗаказа" , ВидДатаЗаказа);
		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ORDERNUMBER = ВыборкаДетальныеЗаписи.НомерЗаказа;
		ORDERDATE   = ВыборкаДетальныеЗаписи.ДатаЗаказа;
	КонецЕсли;

	ДанныеОтбораЗаполнены = Ложь;
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ORDERDATE"    , ORDERDATE);
	СтруктураОтборов.Вставить("ORDERNUMBER"  , ORDERNUMBER);
	СтруктураОтборов.Вставить("Заказ"        , ЗаказКлиента);
	СтруктураОтборов.Вставить("Организация"  , Организация);
	СтруктураОтборов.Вставить("Контрагент"   , Контрагент);
	СтруктураОтборов.Вставить("Накладная"    , РТУ);
	СтруктураОтборов.Вставить("Накладная_Кор", коррРТУ);
	Для каждого Данные Из СтруктураОтборов Цикл
		Если ЗначениеЗаполнено(Данные.Значение) Тогда
			НаборЗаписей.Отбор[Данные.Ключ].Установить(Данные.Значение);
			ДанныеОтбораЗаполнены = Истина;
		КонецЕсли;
	КонецЦикла;

	Если ДанныеОтбораЗаполнены = Истина Тогда

		//Выполним блокировку данных
		ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, ИмяЦепочки);
		НаборЗаписей.Прочитать();

		// Если существует запись в регистре
		Для Каждого НоваяЗапись Из НаборЗаписей Цикл

			Если ЭтоКорректировка
				ИЛИ ЭтоИсправление Тогда // Значит текущая счет-фактура корректировочная/исправительная
				ПерезаписатьНаНовуюСЧФ_Корр = НЕ Источник.Ссылка = НоваяЗапись.СЧФ_Кор;
				ЭтоНоваяСЧФ_Корр            = НЕ ЗначениеЗаполнено(НоваяЗапись.СЧФ_Кор);

				Если ПерезаписатьНаНовуюСЧФ_Корр
					ИЛИ ЭтоНоваяСЧФ_Корр Тогда

					// Если это создание новой СЧФ корр, перезапишем ссылку и сбросим статусы
					НоваяЗапись.СЧФ_Кор          = Источник.Ссылка;
					НоваяЗапись.СуммаСЧФ_Кор     = коррРТУ.Товары.Итог("Сумма");
					НоваяЗапись.НомерИсправления = Источник["НомерИсправления"];
					НоваяЗапись.ДатаСЧФ  = Источник.Дата;
					НоваяЗапись.НомерСЧФ = СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Источник.Номер, Истина, Истина));

					Если ПерезаписатьНаНовуюСЧФ_Корр Тогда

						НоваяЗапись.Статус_DP_IZVPOL_04            = Ложь;
						НоваяЗапись.Статус_DP_IZVPOL_06            = Ложь;
						НоваяЗапись.Статус_DP_IZVPOL_10            = Ложь;
						НоваяЗапись.Статус_DP_PDPOL_02             = Ложь;
						НоваяЗапись.Статус_DP_UVUTOCH_09           = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPOK_11     = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPR_01      = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPR_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOK_11       = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPR_01        = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPR_01_Испр   = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRMARK_01      = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRMARK_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOKMARK_11     = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRPROS_01      = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRPROS_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOKPROS_11     = Ложь;

						НоваяЗапись.СтатусНаправление_DP_PRANNUL_22 = Перечисления.ЭКОМ_НаправлениеОбмена.ПустаяСсылка();
						НоваяЗапись.Статус_DP_IZVPOL_23            = Ложь;
						НоваяЗапись.Статус_DP_UVUTOCH_24           = Ложь;
						НоваяЗапись.СтатусЮЗД                       = ПредопределенноеЗначение("Перечисление.ЭКОМ_Статусы.ПустаяСсылка");
                        НоваяЗапись.КоличествоКвитанций             = 0;

					КонецЕсли;

					НаборЗаписей.Записать();

				ИначеЕсли Источник.Ссылка = НоваяЗапись.СЧФ_Кор Тогда
					// Если это перезапись уже существующей СЧФ корр, обновим
					НоваяЗапись.СуммаСЧФ_Кор     = коррРТУ.Товары.Итог("Сумма");
					НоваяЗапись.НомерИсправления = Источник["НомерИсправления"];
					НоваяЗапись.ДатаСЧФ  = Источник.Дата;
					НоваяЗапись.НомерСЧФ = СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Источник.Номер, Истина, Истина));

					НаборЗаписей.Записать();

				КонецЕсли;

			Иначе
				ПерезаписатьНаНовуюСЧФ = НЕ Источник.Ссылка = НоваяЗапись.СЧФ;
				ЭтоНоваяСЧФ            = НЕ ЗначениеЗаполнено(НоваяЗапись.СЧФ);

				Если ПерезаписатьНаНовуюСЧФ
					ИЛИ ЭтоНоваяСЧФ Тогда

					// Если это создание новой СЧФ, перезапишем ссылку и сбросим статусы
					НоваяЗапись.СЧФ      = Источник.Ссылка;
					НоваяЗапись.СуммаСЧФ = РТУ.Товары.Итог("Сумма");
					НоваяЗапись.ДатаСЧФ  = Источник.Дата;
					НоваяЗапись.НомерСЧФ = СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Источник.Номер, Истина, Истина));

					Если ПерезаписатьНаНовуюСЧФ Тогда

						НоваяЗапись.Статус_DP_IZVPOL_04            = Ложь;
						НоваяЗапись.Статус_DP_IZVPOL_06            = Ложь;
						НоваяЗапись.Статус_DP_IZVPOL_10            = Ложь;
						НоваяЗапись.Статус_DP_PDPOL_02             = Ложь;
						НоваяЗапись.Статус_DP_UVUTOCH_09           = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPOK_11     = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPR_01      = Ложь;
						НоваяЗапись.Статус_ON_KORSCHFDOPPR_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOK_11       = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPR_01        = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPR_01_Испр   = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRMARK_01      = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRMARK_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOKMARK_11     = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRPROS_01      = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPRPROS_01_Испр = Ложь;
						НоваяЗапись.Статус_ON_NSCHFDOPPOKPROS_11     = Ложь;

						НоваяЗапись.СтатусНаправление_DP_PRANNUL_22 = Перечисления.ЭКОМ_НаправлениеОбмена.ПустаяСсылка();
						НоваяЗапись.Статус_DP_IZVPOL_23            = Ложь;
						НоваяЗапись.Статус_DP_UVUTOCH_24           = Ложь;
						НоваяЗапись.СтатусЮЗД                       = ПредопределенноеЗначение("Перечисление.ЭКОМ_Статусы.ПустаяСсылка");
                        НоваяЗапись.КоличествоКвитанций             = 0;

					КонецЕсли;

					НаборЗаписей.Записать();

				ИначеЕсли Источник.Ссылка = НоваяЗапись.СЧФ Тогда
					// Если это перезапись уже существующей СЧФ, обновим
					НоваяЗапись.СуммаСЧФ = РТУ.Товары.Итог("Сумма");
					НоваяЗапись.ДатаСЧФ  = Источник.Дата;
					НоваяЗапись.НомерСЧФ = СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Источник.Номер, Истина, Истина));

					НаборЗаписей.Записать();

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецЕсли;

// ВозвратТоваровОтПокупателя
Если ТипЗнч(Источник.Ссылка) = Тип(ДокументВозвратаОтПокупателя) Тогда
	
	// проверка документа основания и наличия соответствующего реквизита у ВозвратТоваровОтПокупателя
	РеквизитОснованиеСуществует = Метаданные.Документы[ИмяДокументаВозвратаПокупателя].Реквизиты.Найти(ОснованиеВозвратаКлиента) <> Неопределено;
	Если РеквизитОснованиеСуществует И ЗначениеЗаполнено(Источник[ОснованиеВозвратаКлиента]) Тогда
		
		// для необрабатываемых типов значений действия не выполняются      
		Если ТипЗнч(Источник[ОснованиеВозвратаКлиента]) = Тип(ТипДокументаРеализации) Тогда
			
			// поиск скуществующих записей по документу основания	
			НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Накладная.Установить(Источник[ОснованиеВозвратаКлиента]);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() Тогда
				
				ДанныеИзмерений   = Новый Структура;
				ДанныеИзмерений.Вставить("ВозвратнаяНакладная", Источник.Ссылка);
				
				ДанныеРесурсов = Новый Структура;
				Если Источник.Проведен Тогда
					ДанныеРесурсов.Вставить("КоличествоВозврат", Источник.Товары.Итог("Количество"));
					ДанныеРесурсов.Вставить("СуммаВозврат", Источник.Товары.Итог("Сумма"));
				КонецЕсли;   	
				
				ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика"); 
				Для Каждого Запись Из НаборЗаписей Цикл
					ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(Запись, ДанныеИзмерений, ДанныеРесурсов);
				КонецЦикла;
				НаборЗаписей.Записать();     					
			КонецЕсли;// проверка наличия записей
			
		КонецЕсли; // тип документа основание
	КонецЕсли;// наличие реквизита ОснованиеВозвратаКлиента и его заполненность
КонецЕсли;//проверка типа