ТипДокументаЗаказа      = "ДокументСсылка.ЗаказКлиента";

ТипДокументаРеализации = "ДокументСсылка.РеализацияТоваровУслуг"; 
ТипДокументаСчетФактуры = "ДокументСсылка.СчетФактураВыданный";

ИмяОрганизации          = "Организация";
ИмяКонтрагента          = "Контрагент";
ИмяТочкиДоставки        = "Склад";
ИмяДатаОтгрузки         = "ЖелаемаяДатаОтгрузки";
ДатаЗаказа1С            = "ДатаПоДаннымКлиента";
НомерЗаказа1С           = "НомерПоДаннымКлиента";
НомерВходящегоДокумента = "НомерВходящегоДокумента";
ДатаВходящегоДокумента  = "ДатаВходящегоДокумента";
ИмяЗаказа1С             = "ЗаказПоставщику";

// Заказ клиента.
Если ТипЗнч(Источник.Ссылка) = Тип(ТипДокументаЗаказа) Тогда

    ВыборкаУчастниковВЭДО = КонтрагентУчаствуетВЭДО(Источник[ИмяОрганизации], Источник[ИмяКонтрагента]);
    Если НЕ ВыборкаУчастниковВЭДО.Количество() = 0 Тогда

        ВыборкаУчастниковВЭДО.Следующий();

        НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ORDERDATE.Установить(Источник.ДатаПоДаннымКлиента);
		НаборЗаписей.Отбор.Организация.Установить(Источник.Организация);
		НаборЗаписей.Отбор.Контрагент.Установить(Источник.Контрагент);
		НаборЗаписей.Отбор.ТочкаДоставки.Установить(Источник.Партнер);
		НаборЗаписей.Отбор.ORDERNUMBER.Установить(Источник.НомерПоДаннымКлиента);
		
        ДанныеИзмерений = Новый Структура;
        ДанныеИзмерений.Вставить("Заказ", Источник.Ссылка);

        ДанныеРесурсов = Новый Структура;
        ДанныеРесурсов.Вставить("ДатаПоставки", 	Источник[ИмяДатаОтгрузки]);
        ДанныеРесурсов.Вставить("КоличествоЗаказ", 	Источник.Товары.Итог("Количество"));
        ДанныеРесурсов.Вставить("СуммаЗаказ", 		Источник.Товары.Итог("Сумма"));

        // Выполним блокировку данных.
        ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");            

        НаборЗаписей.Прочитать();
        Если НаборЗаписей.Количество() = 0 Тогда                                        
            // Записываем документ в первый раз.
            ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НаборЗаписей.Добавить(), ДанныеИзмерений, ДанныеРесурсов); // записываем данные в регистр если они заполнены

        Иначе                                                    
            // Если существует документ в регистре.
            Для Каждого НоваяЗапись Из НаборЗаписей Цикл                    
                ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов); // записываем данные в регистр если они заполнены                    
            КонецЦикла;

        КонецЕсли;        

        НаборЗаписей.Записать();

		// Изменение количества принятого в Эком документе по данным заказа клиента.
		Для Каждого НоваяЗапись Из НаборЗаписей Цикл
			Если НЕ НоваяЗапись.ORDER.Пустая() Тогда
				ЭкомДокументОбъект = НоваяЗапись.ORDER.ПолучитьОбъект();
				ДокументИзменен = Ложь;
				Для Каждого Строка Из Источник.Товары Цикл
					СтрокаТоваров = ЭкомДокументОбъект.ТЧ_Товары.Найти(Строка.Номенклатура, "Номенклатура");
					Если НЕ СтрокаТоваров = Неопределено
						И НЕ СтрокаТоваров.КоличествоПринятое = Строка.Количество Тогда
						СтрокаТоваров.КоличествоПринятое = Строка.Количество;
						ДокументИзменен = Истина;
					КонецЕсли;
				КонецЦикла;
				Если ДокументИзменен Тогда
					Попытка
						ЭкомДокументОбъект.Записать();
					Исключение КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
    КонецЕсли;        

КонецЕсли;   

//// Реализация.
//Если ТипЗнч(Источник.Ссылка) = Тип(ТипДокументаРеализации) Тогда

//    ВыборкаУчастниковВЭДО = КонтрагентУчаствуетВЭДО(Источник[ИмяОрганизации], Источник[ИмяКонтрагента]);
//    Если НЕ ВыборкаУчастниковВЭДО.Количество() = 0 Тогда

//        ДокументЗаказа = Неопределено;
//        Если ЗначениеЗаполнено(Источник[ИмяЗаказа1С]) Тогда
//            ДокументЗаказа = Источник[ИмяЗаказа1С];
//        КонецЕсли;

//        НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей();

//        ЗаписьНайдена = Ложь;

//        // 1. Ищем по заказу
//        Если ЗначениеЗаполнено(ДокументЗаказа) Тогда
//            НаборЗаписей.Отбор.Заказ.Установить(ДокументЗаказа); // поле проиндексировано

//            // Выполним блокировку данных
//            ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");        

//            НаборЗаписей.Прочитать();
//            Если НЕ НаборЗаписей.Количество() = 0 Тогда
//                ЗаписьНайдена = Истина;
//            КонецЕсли;
//        КонецЕсли;

//        // 2. Поиск по дате и номеру десадва
//        Если ЗаписьНайдена = Ложь Тогда             

//            DESADV = Неопределено;
//            Запрос = Новый Запрос;
//            Запрос.Текст = 
//            "ВЫБРАТЬ
//            |    ЭКОМ_Документы.Ссылка КАК ЭКОМ_ДокументDESADV,
//            |    ЭКОМ_Документы.Документ1С КАК Заказ
//            |ИЗ
//            |    Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
//            |ГДЕ
//            |    ЭКОМ_Документы.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.DESADV_Входящий)
//            |    И ЭКОМ_Документы.НакладнаяДата = &НакладнаяДата
//            |    И ЭКОМ_Документы.НакладнаяНомер = &НакладнаяНомер";

//            Запрос.УстановитьПараметр("НакладнаяДата", Источник[ДатаВходящегоДокумента]);
//            Запрос.УстановитьПараметр("НакладнаяНомер", Источник[НомерВходящегоДокумента]);
//            РезультатЗапроса = Запрос.Выполнить();
//            Если НЕ РезультатЗапроса.Пустой() Тогда
//                Выборка = РезультатЗапроса.Выбрать();
//                Выборка.Следующий();

//                ДокументЗаказа = Выборка.Заказ;
//                DESADV         = Выборка.ЭКОМ_ДокументDESADV;
//            КонецЕсли;            


//            ДанныеОтбораЗаполнены = Ложь;
//            НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей(); 

//            СтруктураОтбора = Новый Структура;
//            СтруктураОтбора.Вставить("Заказ" , ДокументЗаказа);
//            СтруктураОтбора.Вставить("DESADV", DESADV);
//            Для каждого Данные Из СтруктураОтбора Цикл
//                Если ЗначениеЗаполнено(Данные.Значение) Тогда
//                    НаборЗаписей.Отбор[Данные.Ключ].Установить(Данные.Значение);
//                    ДанныеОтбораЗаполнены = Истина;
//                КонецЕсли;
//            КонецЦикла;

//            // Выполним блокировку данных
//            ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");                 
//            Если ДанныеОтбораЗаполнены Тогда
//                НаборЗаписей.Прочитать();
//                Если НЕ НаборЗаписей.Количество() = 0 Тогда
//                    ЗаписьНайдена = Истина;
//                КонецЕсли;
//            КонецЕсли;

//        КонецЕсли;

//        Если ЗаписьНайдена Тогда

//            ДанныеИзмерений = Новый Структура;
//            ДанныеИзмерений.Вставить("Накладная"    , Источник.Ссылка);
//            ДанныеИзмерений.Вставить("Организация"  , Источник[ИмяОрганизации]);
//            ДанныеИзмерений.Вставить("Контрагент"   , Источник[ИмяКонтрагента]);
//            ДанныеИзмерений.Вставить("ТочкаДоставки", Источник[ИмяТочкиДоставки]);

//            ДанныеРесурсов = Новый Структура;
//            ДанныеРесурсов.Вставить("КоличествоНакладная" , Источник.Товары.Итог("Количество"));
//            ДанныеРесурсов.Вставить("СуммаНакладная"      , Источник.Товары.Итог("Сумма"));
//            ДанныеРесурсов.Вставить("СуммаНДСНакладная", Источник.Товары.Итог("СуммаНДС"));

//            // Если существует документ в регистре
//            Для Каждого НоваяЗапись Из НаборЗаписей Цикл

//                ДокументНакладная = Неопределено;
//                Если НоваяЗапись.DESADV.ДокументыСвязанные.Количество() > 0 Тогда
//                    ДокументНакладная = НоваяЗапись.DESADV.ДокументыСвязанные[0].ДокументСвязанный;
//                КонецЕсли;

//                Если ДокументНакладная = Источник.Ссылка Тогда
//                    ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов);    
//                КонецЕсли;                

//            КонецЦикла;

//            НаборЗаписей.Записать();

//        КонецЕсли;    

//    КонецЕсли;        

//КонецЕсли;

//// СчетФактураВыданный
//Если ТипЗнч(Источник.Ссылка) = Тип(ТипДокументаСчетФактуры) Тогда

//    ДанныеИзмерений = Новый Структура;
//    ДанныеИзмерений.Вставить("СЧФ", Источник.Ссылка);

//    ДанныеРесурсов = Новый Структура;
//    ДанныеРесурсов.Вставить("СуммаСЧФ" , Источник.ДокументыОснования.Итог("Сумма"));

//    Для каждого СтрокаДокументОснование Из Источник.ДокументыОснования Цикл
//        Если ТипЗнч(СтрокаДокументОснование.ДокументОснование) = Тип(ТипДокументаРеализации) Тогда

//            ДокументРеализации = СтрокаДокументОснование.ДокументОснование;
//            ДокументЗаказа      = ДокументРеализации[ИмяЗаказа1С];

//            ДанныеОтбораЗаполнены = Ложь;
//            НаборЗаписей = РегистрыСведений.ЭКОМ_ЦепочкиДокументовПоставщика.СоздатьНаборЗаписей(); 

//            СтруктураОтбора = Новый Структура;
//            СтруктураОтбора.Вставить("Заказ"    , ДокументЗаказа);
//            СтруктураОтбора.Вставить("Накладная", ДокументРеализации);
//            Для каждого Данные Из СтруктураОтбора Цикл
//                Если ЗначениеЗаполнено(Данные.Значение) Тогда
//                    НаборЗаписей.Отбор[Данные.Ключ].Установить(Данные.Значение);
//                    ДанныеОтбораЗаполнены = Истина;
//                КонецЕсли;
//            КонецЦикла;

//            // Выполним блокировку данных
//            ЭКОМ_ПодпискаСобытий.ВыполнитьБлокировкуНабораЗаписей(НаборЗаписей.Отбор, "ЭКОМ_ЦепочкиДокументовПоставщика");
//            Если ДанныеОтбораЗаполнены Тогда
//                НаборЗаписей.Прочитать();
//                // Если существует документ в регистре
//                Для Каждого НоваяЗапись Из НаборЗаписей Цикл

//                    ЭКОМ_ПодпискаСобытий.СформироватьЗаписьВРегистр(НоваяЗапись, ДанныеИзмерений, ДанныеРесурсов);    

//                КонецЦикла;

//                НаборЗаписей.Записать();

//            КонецЕсли;                
//        КонецЕсли;
//    КонецЦикла;        
//КонецЕсли;